'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _messages = require('../messages');

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _messages2 = require('./messages');

var _messages3 = _interopRequireDefault(_messages2);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _input = require('../input');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var Switch = function Switch(_ref) {
  var _ref$align = _ref.align,
      align = _ref$align === undefined ? 'right' : _ref$align,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$fetching = _ref.fetching,
      fetching = _ref$fetching === undefined ? false : _ref$fetching,
      _ref$input = _ref.input,
      input = _ref$input === undefined ? {} : _ref$input,
      intl = _ref.intl,
      label = _ref.label,
      _ref$meta = _ref.meta,
      meta = _ref$meta === undefined ? { touched: false, error: null } : _ref$meta,
      name = _ref.name,
      sublabel = _ref.sublabel,
      tooltip = _ref.tooltip,
      _ref$tooltipInteracti = _ref.tooltipInteractive,
      tooltipInteractive = _ref$tooltipInteracti === undefined ? false : _ref$tooltipInteracti,
      rest = _objectWithoutProperties(_ref, ['align', 'disabled', 'fetching', 'input', 'intl', 'label', 'meta', 'name', 'sublabel', 'tooltip', 'tooltipInteractive']);

  return React.createElement(
    'div',
    { className: cx('xsui-switch-container') },
    React.createElement(
      'div',
      {
        className: cx('xsui-switch', 'xsui-switch--align-' + align, disabled && 'xsui-switch--disabled') },
      React.createElement(
        'label',
        { 'data-id': input.name || name, 'data-value': input.value },
        React.createElement('input', _extends({}, input, rest, {
          className: cx(fetching && 'xsui-switch--fetching'),
          name: input.name || name,
          type: 'checkbox',
          checked: !!input.value,
          disabled: disabled || fetching
        })),
        React.createElement(
          'div',
          { className: cx('xsui-switch__status', disabled && 'xsui-switch__status--disabled') },
          React.createElement(
            'div',
            { className: cx('xsui-switch__status__off') },
            intl.formatMessage(_messages3.default.off)
          ),
          React.createElement(
            'div',
            { className: cx('xsui-switch__status__on') },
            intl.formatMessage(_messages3.default.on)
          )
        )
      ),
      React.createElement(
        'div',
        { className: cx('xsui-switch__description', 'xsui-switch__description--align-' + align) },
        label && React.createElement(
          'div',
          { className: cx('xsui-switch__label') },
          label,
          tooltip && React.createElement(_tooltip2.default, { label: tooltip, interactive: tooltipInteractive, offset: 'left' })
        ),
        sublabel !== undefined ? React.createElement(
          'div',
          { className: cx('xsui-switch__sublabel') },
          sublabel
        ) : null
      )
    ),
    meta.touched && meta.error && React.createElement(
      _messages.ValidationMessage,
      null,
      meta.error
    )
  );
};

Switch.propTypes = {
  align: _propTypes2.default.oneOf(['left', 'right']),
  disabled: _propTypes2.default.bool,
  fetching: _propTypes2.default.bool,
  input: _propTypes2.default.object,
  label: _propTypes2.default.node,
  meta: function meta() {
    return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta)).apply(this, arguments);
  },
  name: _propTypes2.default.string,
  sublabel: _propTypes2.default.node,
  tooltip: _propTypes2.default.node,
  tooltipInteractive: _propTypes2.default.bool
};
exports.default = (0, _reactIntl.injectIntl)(Switch);