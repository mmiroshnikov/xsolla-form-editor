'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _reactDayPicker = require('react-day-picker');

var _reactTransitionGroup = require('react-transition-group');

var _classNames = require('../date-picker/classNames');

var _classNames2 = _interopRequireDefault(_classNames);

var _datePicker = require('../date-picker');

var _datePicker2 = _interopRequireDefault(_datePicker);

var _presets = require('../date-picker/presets');

var _presets2 = _interopRequireDefault(_presets);

var _data = require('../date-picker/presets/data');

var _data2 = _interopRequireDefault(_data);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _messages3 = require('../date-picker/messages');

var _messages4 = _interopRequireDefault(_messages3);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DatePickerInputRange = function (_PureComponent) {
  _inherits(DatePickerInputRange, _PureComponent);

  function DatePickerInputRange() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DatePickerInputRange);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DatePickerInputRange.__proto__ || Object.getPrototypeOf(DatePickerInputRange)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false,
      hoveredDay: null
    }, _this.toggleVisible = function () {
      return _this.setState({ visible: !_this.state.visible });
    }, _this.setHoveredDay = function (day) {
      return _this.setState({ hoveredDay: day });
    }, _this.handleClickOutside = function () {
      return _this.setState({ visible: false });
    }, _this.handleChange = function (_ref2) {
      var from = _ref2.from,
          to = _ref2.to;

      if (from && to) {
        _this.toggleVisible();
      }

      return _this.props.input.onChange({ from: from, to: to });
    }, _this.handleDayClick = function (date) {
      var input = _this.props.input;

      var status = {
        isEmpty: !input.value.from && !input.value.to,
        isCompleted: input.value.from && input.value.to,
        isStarted: input.value.from && !input.value.to
      };

      _this.setHoveredDay(null);

      if (status.isEmpty || status.isCompleted) {
        return _this.handleChange({
          from: date,
          to: null
        });
      }

      if (status.isStarted && (_reactDayPicker.DateUtils.isSameDay(date, input.value.from) || _reactDayPicker.DateUtils.isDayAfter(date, input.value.from))) {
        return _this.handleChange({
          from: input.value.from,
          to: date
        });
      }

      return _this.handleChange({
        from: date,
        to: null
      });
    }, _this.handleDayMouseEnter = function (date) {
      var input = _this.props.input;


      if (input.value.from && !input.value.to && _reactDayPicker.DateUtils.isDayAfter(date, input.value.from)) {
        return _this.setHoveredDay(date);
      }

      return _this.setHoveredDay(null);
    }, _this.humanizeOutputValue = function (value) {
      var filledLength = Object.values(value).filter(function (a) {
        return a;
      }).length;

      if (!filledLength) {
        return '';
      }

      return [value.from, value.to].map(function (a) {
        if (a instanceof Date) {
          return _this.props.intl.formatDate(a);
        }
        return _this.props.intl.formatMessage(_messages2.default.selectData);
      }).join(' â€” ');
    }, _this.actions = [{
      label: _this.props.intl.formatMessage(_messages4.default.clear),
      onClick: function onClick() {
        _this.handleChange({ from: null, to: null });
        _this.toggleVisible();
      }
    }], _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line

  /**
   * Handle change
   * @param {Date} date
   * @return {void}
   */


  /**
   * Handle click on date
   * @param {Date} date
   * @return {void}
   */


  /**
   * Highlight background when hovering on a date
   * @param {Date} date
   * @return {void}
   */


  /**
   * Return humanized value
   * @param {Value} value
   * @return {string}
   */


  _createClass(DatePickerInputRange, [{
    key: 'render',
    value: function render() {
      var _ref3;

      var _props = this.props,
          intl = _props.intl,
          input = _props.input,
          meta = _props.meta,
          size = _props.size,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          customInput = _props.customInput,
          presetsData = _props.presetsData,
          visiblePresets = _props.visiblePresets,
          visibleClearButton = _props.visibleClearButton,
          datePickerRestProps = _objectWithoutProperties(_props, ['intl', 'input', 'meta', 'size', 'placeholder', 'disabled', 'customInput', 'presetsData', 'visiblePresets', 'visibleClearButton']);

      var requiredInputProps = {
        input: {
          name: input.name,
          value: this.humanizeOutputValue(input.value),
          onChange: function onChange() {
            return void 0;
          }
        },
        meta: meta,
        size: size,
        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
        disabled: disabled,
        focused: this.state.visible,
        onClick: this.toggleVisible
      };

      return _react2.default.createElement(
        'div',
        { style: { position: 'relative', display: 'inline-block' } },
        customInput ? (0, _react.cloneElement)(customInput(_extends({}, requiredInputProps, { raw: input.value, intl: intl }))) : _react2.default.createElement(_input2.default, _extends({}, requiredInputProps, {
          icon: 'calendar',
          offset: 'left-separated',
          inline: true,
          readOnly: true
        })),
        _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          this.state.visible && _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 100 },
            _react2.default.createElement(_datePicker2.default, _extends({}, datePickerRestProps, {
              initialMonth: input.value.from ? new Date(input.value.from) : new Date(),
              selectedDays: [input.value.from, { from: input.value.from, to: input.value.to || this.state.hoveredDay }],
              modifiers: (_ref3 = {}, _defineProperty(_ref3, _classNames2.default.start, input.value.from), _defineProperty(_ref3, _classNames2.default.startCompleted, input.value.to || this.state.hoveredDay ? input.value.from : null), _defineProperty(_ref3, _classNames2.default.end, input.value.to), _defineProperty(_ref3, _classNames2.default.endHovered, this.state.hoveredDay), _ref3),
              onDayClick: this.handleDayClick,
              onDayMouseEnter: this.handleDayMouseEnter,
              footer: visiblePresets && _react2.default.createElement(_presets2.default, {
                value: input.value,
                onChange: this.handleChange,
                data: presetsData || (0, _data2.default)(intl)
              }),
              actions: visibleClearButton ? this.actions : []
            }))
          )
        )
      );
    }
  }]);

  return DatePickerInputRange;
}(_react.PureComponent);

DatePickerInputRange.propTypes = Object.assign({}, _input.bpfrpt_proptype_Props === _propTypes2.default.any ? {} : _input.bpfrpt_proptype_Props, _datePicker.bpfrpt_proptype_DatePickerType === _propTypes2.default.any ? {} : _datePicker.bpfrpt_proptype_DatePickerType, {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  customInput: _propTypes2.default.func,
  presetsData: function presetsData() {
    return (typeof _presets.bpfrpt_proptype_PresetsData === 'function' ? _presets.bpfrpt_proptype_PresetsData : _propTypes2.default.shape(_presets.bpfrpt_proptype_PresetsData)).apply(this, arguments);
  },
  visiblePresets: _propTypes2.default.bool.isRequired,
  visibleClearButton: _propTypes2.default.bool.isRequired
});
DatePickerInputRange.defaultProps = {
  size: 'sm',
  numberOfMonths: 2,
  visiblePresets: false,
  visibleClearButton: false
};
exports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(DatePickerInputRange));