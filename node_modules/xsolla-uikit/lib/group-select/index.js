'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactIntl = require('react-intl');

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _reactTransitionGroup = require('react-transition-group');

var _index = require('../input/index');

var _index2 = _interopRequireDefault(_index);

var _groups = require('./groups');

var _groups2 = _interopRequireDefault(_groups);

var _entries = require('./entries');

var _entries2 = _interopRequireDefault(_entries);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _messages = require('../select/messages');

var _messages2 = _interopRequireDefault(_messages);

var _messages3 = require('./messages');

var _messages4 = _interopRequireDefault(_messages3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var positionValues = {
  top: 'top',
  bottom: 'bottom'
};

var GroupSelect = function (_Component) {
  _inherits(GroupSelect, _Component);

  function GroupSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, GroupSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GroupSelect.__proto__ || Object.getPrototypeOf(GroupSelect)).call.apply(_ref, [this].concat(args))), _this), _this.allGroupValue = 'allElementsGroup', _this.compareElementsByLabel = function (a, b) {
      var getVal = function getVal(x) {
        return x && x.label ? x.label.toLowerCase() : '';
      };
      var va = getVal(a);
      var vb = getVal(b);
      return va > vb ? 1 : va < vb ? -1 : 0;
    }, _this.getAllGroup = function () {
      var options = _this.props.options;

      var optionsAvailable = !!(options && options.length);
      if (!optionsAvailable) {
        return null;
      }
      //Use Map to avoid duplication of objects with the same value
      var allChildrenMap = new Map();
      options.forEach(function (group) {
        var children = group.children;

        if (children && children.length > 0) {
          children.forEach(function (child) {
            allChildrenMap.set(child.value, child);
          });
        }
      });
      var allChildren = [].concat(_toConsumableArray(allChildrenMap.values()));
      if (allChildren.length > 0) {
        allChildren.sort(_this.compareElementsByLabel);
        var allGroup = {
          label: _this.getAllGroupLabel(),
          value: _this.allGroupValue,
          children: allChildren
        };
        return allGroup;
      }
      return null;
    }, _this.getAllGroupLabel = function () {
      return _this.props.allGroupLabel || _this.props.intl.formatMessage(_messages4.default.allGroupLabel);
    }, _this.state = {
      position: positionValues.bottom,
      visible: false,
      group: _this.props.initialGroup
    }, _this.determineDropdownPosition = function () {
      if (_this.inputRef && _this.containerRef) {
        var inputRect = _this.inputRef.getBoundingClientRect();
        var containerRect = _this.containerRef.getBoundingClientRect();
        var height = containerRect.bottom - containerRect.top + 1;
        var marginToInput = 5;
        var marginToWindow = 32;
        var margin = marginToInput + marginToWindow;
        var heightUnder = document.documentElement.clientHeight - inputRect.bottom - margin;
        var heightAbove = inputRect.top - margin;
        _this.setState({
          position: height <= heightUnder || height > heightAbove && heightUnder >= heightAbove ? positionValues.bottom : positionValues.top
        });
      }
    }, _this.handleResize = function () {
      _this.setState({ position: positionValues.bottom });
      _this.determineDropdownPosition();
    }, _this.setContainerRef = function (ref) {
      return _this.containerRef = ref;
    }, _this.setInputRef = function (ref) {
      return _this.inputRef = ref;
    }, _this.setVisibility = function () {
      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (visible === _this.state.visible) {
        return;
      }

      if (visible && _this.props.input.onFocus) {
        _this.props.input.onFocus();
      }

      if (!visible && _this.props.input.onBlur) {
        // Pass current value on blur to avoid issues
        // in custom parse/format/normalize handlers
        // See: https://github.com/erikras/redux-form/issues/2768
        _this.props.input.onBlur(_this.props.input.value);
      }

      _this.setState({
        visible: visible,
        position: visible ? _this.state.position : positionValues.bottom
      });
    }, _this.toggleVisible = function () {
      _this.setVisibility(!_this.state.visible);
    }, _this.handleClickOutside = function () {
      _this.setVisibility(false);
    }, _this.handleGroupChange = function (value) {
      _this.setState({ group: value });
    }, _this.handleChildrenChange = function (option) {
      _this.handleMultiChange([option]);
    }, _this.handleMultiChange = function (options) {
      var _this$props = _this.props,
          input = _this$props.input,
          groupKey = _this$props.groupKey,
          childrenKey = _this$props.childrenKey,
          propOptions = _this$props.options;


      var allOptions = [];
      propOptions.forEach(function (group) {
        group.children.forEach(function (child) {
          var _allOptions$push;

          allOptions.push((_allOptions$push = {}, _defineProperty(_allOptions$push, groupKey, group.value), _defineProperty(_allOptions$push, 'label', child.label), _defineProperty(_allOptions$push, 'value', child.value), _allOptions$push));
        });
      });

      var changedOptions = [].concat(_toConsumableArray(options.filter(function (x) {
        return x.group !== _this.allGroupValue;
      })));
      var optionsFromAllGroup = options.filter(function (x) {
        return x.group === _this.allGroupValue;
      });
      optionsFromAllGroup.forEach(function (option) {
        changedOptions = changedOptions.concat(allOptions.filter(function (y) {
          return option.value === y.value;
        }).map(function (z) {
          return _extends({}, z, { checked: option.checked });
        }));
      });

      var value = input.value || [];

      // The set with removed items
      // Items are compared using two keys, so the map is nested two levels deep
      var removedSet = changedOptions.reduce(function (acc, item) {
        return item.checked ? _extends({}, acc, _defineProperty({}, item.group, _extends({}, acc[item.group], _defineProperty({}, item.value, true)))) : acc;
      }, {});
      var notRemoved = function notRemoved(item) {
        return !(removedSet[item[groupKey]] && removedSet[item[groupKey]][item[childrenKey]]);
      };

      var added = changedOptions.filter(function (item) {
        return item.checked === false;
      }).map(function (item) {
        var _ref2;

        return _ref2 = {}, _defineProperty(_ref2, groupKey, item.group), _defineProperty(_ref2, childrenKey, item.value), _ref2;
      });

      var updatedValue = value.filter(notRemoved) // Removed unchecked items
      .concat(added); // Add newly checked items

      input.onChange(updatedValue);
    }, _this.humanizeOutputValue = function (options, input) {
      var _this$props2 = _this.props,
          maxLength = _this$props2.maxLength,
          groupKey = _this$props2.groupKey,
          childrenKey = _this$props2.childrenKey;

      var value = input.value || [];

      var humanizedValue = options.reduce(function (previousOption, currentOption) {
        var selectValues = currentOption.children.filter(function (children) {
          return value.find(function (a) {
            return a[groupKey] === currentOption.value && a[childrenKey] === children.value;
          });
        }).map(function (a) {
          return {
            label: a.label,
            type: 'children'
          };
        });

        if (selectValues.length && selectValues.length === currentOption.children.length) {
          return [].concat(_toConsumableArray(previousOption), [{
            label: currentOption.label,
            type: 'group'
          }]);
        }

        return [].concat(_toConsumableArray(previousOption), _toConsumableArray(selectValues));
      }, []).sort(function (a, b) {
        return a.type === b.type ? 0 : a.type < b.type ? 1 : -1;
      }).map(function (a) {
        return a.label;
      });

      if (humanizedValue.length > maxLength) {
        return [].concat(_toConsumableArray(humanizedValue.splice(0, maxLength)), ['+' + humanizedValue.length]);
      }

      return humanizedValue;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(GroupSelect, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.determineDropdownPosition();
      window.addEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (!prevState.visible && this.state.visible) {
        this.determineDropdownPosition();
      }
    }

    /**
     * Humanize output
     * @param options
     * @param input
     * @returns {*}
     */

  }, {
    key: 'getActiveGroup',
    value: function getActiveGroup() {
      if (this.state.group !== null) {
        return this.state.group;
      }
      var _props = this.props,
          options = _props.options,
          showAllGroup = _props.showAllGroup;

      if (showAllGroup) {
        return this.allGroupValue;
      } else if (options && options[0] && options[0].value) {
        return options[0].value;
      }
      return null;
    }
  }, {
    key: 'countSelectedGroupItems',
    value: function countSelectedGroupItems(selectedValues, groupKey) {
      return selectedValues.reduce(function (acc, value) {
        return _extends({}, acc, _defineProperty({}, value[groupKey], (acc[value[groupKey]] || 0) + 1));
      }, {});
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props2 = this.props,
          options = _props2.options,
          showAllGroup = _props2.showAllGroup,
          allGroupLabelForInput = _props2.allGroupLabelForInput,
          intl = _props2.intl,
          input = _props2.input,
          meta = _props2.meta,
          label = _props2.label,
          groupKey = _props2.groupKey,
          childrenKey = _props2.childrenKey,
          name = _props2.name,
          size = _props2.size,
          placeholder = _props2.placeholder,
          containerClassName = _props2.containerClassName,
          disabled = _props2.disabled;


      var value = input.value || [];
      var activeGroup = this.getActiveGroup();

      var groups = options.map(function (option) {
        return _extends({}, option, {
          active: option.value === activeGroup
        });
      });

      var allGroupSelectedCount = void 0;
      var isAllElementsInAllGroupSelected = false;
      if (showAllGroup && groups.length > 0) {
        var allGroup = this.getAllGroup();
        allGroup.active = allGroup.value === activeGroup;
        if (allGroup) {
          groups.splice(0, 0, allGroup);
        }
        if (allGroup.children) {
          allGroupSelectedCount = allGroup.children.reduce(function (count, x) {
            return value.some(function (v) {
              return v[childrenKey] === x.value;
            }) ? ++count : count;
          }, 0);
          isAllElementsInAllGroupSelected = allGroupSelectedCount === allGroup.children.length;
        }
      }

      var groupObject = groups.find(function (a) {
        return a.value === activeGroup;
      });
      var isChecked = function isChecked(selectedItem) {
        if (activeGroup === _this2.allGroupValue) {
          return value.some(function (a) {
            return a[childrenKey] === selectedItem.value;
          });
        } else {
          return value.some(function (a) {
            return a[groupKey] === activeGroup && a[childrenKey] === selectedItem.value;
          });
        }
      };
      var entries = groupObject && (groupObject.children || []).map(function (option) {
        return _extends({}, option, {
          checked: isChecked(option),
          group: activeGroup
        });
      });
      var selectedCountMap = this.countSelectedGroupItems(value, groupKey);
      if (allGroupSelectedCount != null) {
        selectedCountMap[this.allGroupValue] = allGroupSelectedCount;
      }
      var optionsAvailable = !!(options && options.length);

      var inputElementValue = isAllElementsInAllGroupSelected ? allGroupLabelForInput || this.getAllGroupLabel() : this.humanizeOutputValue(options, input).join(', ');

      return _react2.default.createElement(
        'div',
        { className: cx('xsui-group-select') },
        _react2.default.createElement(_index2.default, {
          input: {
            name: input.name || name,
            value: inputElementValue,
            onChange: function onChange() {
              return void 0;
            }
          },
          containerRef: this.setInputRef,
          meta: meta,
          size: size,
          offset: 'right',
          placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
          focused: this.state.visible,
          disabled: disabled || !optionsAvailable,
          icon: 'dropdown-select',
          readOnly: true,
          onClick: this.toggleVisible
        }),
        _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          optionsAvailable && this.state.visible ? _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 150 },
            _react2.default.createElement(
              'div',
              {
                className: cx('xsui-group-select__transition-container', 'xsui-group-select__transition-container--position-' + this.state.position, containerClassName) },
              _react2.default.createElement(
                'div',
                {
                  ref: this.setContainerRef,
                  className: cx('xsui-group-select__container', 'xsui-group-select__container--position-' + this.state.position, containerClassName) },
                _react2.default.createElement(_groups2.default, {
                  options: groups,
                  handleChange: this.handleGroupChange,
                  selectedCountMap: selectedCountMap
                }),
                _react2.default.createElement(_entries2.default, {
                  activeGroup: activeGroup,
                  options: entries,
                  label: label,
                  handleChange: this.handleChildrenChange,
                  handleMultiChange: this.handleMultiChange
                })
              )
            )
          ) : null
        )
      );
    }
  }]);

  return GroupSelect;
}(_react.Component);

GroupSelect.propTypes = {
  input: _propTypes2.default.object.isRequired,
  meta: _propTypes2.default.shape({
    touched: _propTypes2.default.bool,
    error: _propTypes2.default.any
  }),
  intl: _propTypes2.default.object,
  name: _propTypes2.default.string,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
    children: _propTypes2.default.array.isRequired
  })).isRequired,
  showAllGroup: _propTypes2.default.bool,
  allGroupLabel: _propTypes2.default.node,
  allGroupLabelForInput: _propTypes2.default.node,
  label: _propTypes2.default.string,
  size: _propTypes2.default.oneOf(['xs', 'sm', 'md']),
  maxLength: _propTypes2.default.number,
  groupKey: _propTypes2.default.string,
  childrenKey: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  containerClassName: _propTypes2.default.string,
  initialGroup: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  disabled: _propTypes2.default.bool
};
GroupSelect.defaultProps = {
  meta: {
    touched: false,
    error: null
  },
  maxLength: 4,
  showAllGroup: false,
  groupKey: 'group',
  childrenKey: 'children',
  containerClassName: '',
  initialGroup: null,
  disabled: false
};
exports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(GroupSelect));