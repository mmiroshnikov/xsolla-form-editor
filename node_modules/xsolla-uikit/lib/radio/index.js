'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _messages = require('../messages');

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _input = require('../input');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var Radio = function Radio(_ref) {
  var input = _ref.input,
      meta = _ref.meta,
      label = _ref.label,
      tooltip = _ref.tooltip,
      radioValue = _ref.radioValue,
      dataId = _ref.dataId,
      rest = _objectWithoutProperties(_ref, ['input', 'meta', 'label', 'tooltip', 'radioValue', 'dataId']);

  input.checked = input.value === radioValue;
  input.value = radioValue;
  return _react2.default.createElement(
    'div',
    { className: cx('xsui-radio') },
    _react2.default.createElement(
      'div',
      { className: cx('xsui-radio__wrapper') },
      _react2.default.createElement(
        'label',
        { 'data-id': input.name || rest.name, 'data-value': input.value },
        _react2.default.createElement('input', _extends({}, input, rest, {
          className: cx('xsui-radio__input', meta.touched && meta.error && 'xsui-radio__input--error'),
          name: input.name || rest.name,
          type: 'radio',
          'data-id': dataId
        })),
        _react2.default.createElement(
          'div',
          { className: cx('xsui-radio__label') },
          label
        )
      ),
      tooltip && _react2.default.createElement(_tooltip2.default, { label: tooltip, offset: 'left' })
    ),
    meta.touched && meta.error && _react2.default.createElement(
      _messages.ValidationMessage,
      null,
      meta.error
    )
  );
};

Radio.propTypes = {
  input: function input() {
    return (typeof _input.bpfrpt_proptype_InputType === 'function' ? _input.bpfrpt_proptype_InputType : _propTypes2.default.shape(_input.bpfrpt_proptype_InputType)).apply(this, arguments);
  },
  meta: function meta() {
    return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta)).apply(this, arguments);
  },
  name: _propTypes2.default.string,
  label: function label() {
    return (typeof _propTypes2.default.node === 'function' ? _propTypes2.default.node.isRequired ? _propTypes2.default.node.isRequired : _propTypes2.default.node : _propTypes2.default.shape(_propTypes2.default.node).isRequired).apply(this, arguments);
  },
  tooltip: function tooltip() {
    return (typeof _propTypes2.default.node === 'function' ? _propTypes2.default.node : _propTypes2.default.shape(_propTypes2.default.node)).apply(this, arguments);
  },
  radioValue: _propTypes2.default.number.isRequired,
  disabled: _propTypes2.default.bool,
  dataId: _propTypes2.default.string
};
Radio.defaultProps = {
  input: {},
  meta: {
    touched: false,
    error: null
  },
  name: null,
  tooltip: null,
  disabled: false
};

exports.default = Radio;