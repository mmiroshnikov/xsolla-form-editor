'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _reactDom = require('react-dom');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _loader = require('../loader');

var _loader2 = _interopRequireDefault(_loader);

var _utils = require('../utils');

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('./types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var Item = function Item(_ref) {
  var _ref$tag = _ref.tag,
      tag = _ref$tag === undefined ? _react2.default.createElement('div', null) : _ref$tag,
      _ref$active = _ref.active,
      active = _ref$active === undefined ? false : _ref$active,
      label = _ref.label,
      extraLabel = _ref.extraLabel,
      description = _ref.description,
      _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === undefined ? 'row' : _ref$appearance,
      icon = _ref.icon,
      _ref$iconAlign = _ref.iconAlign,
      iconAlign = _ref$iconAlign === undefined ? 'left' : _ref$iconAlign,
      customIcon = _ref.customIcon,
      color = _ref.color,
      disabled = _ref.disabled,
      _ref$itemRef = _ref.itemRef,
      itemRef = _ref$itemRef === undefined ? function () {
    return void 0;
  } : _ref$itemRef,
      extraLabelClass = _ref.extraLabelClass,
      className = _ref.className,
      _ref$separated = _ref.separated,
      separated = _ref$separated === undefined ? false : _ref$separated,
      _ref$dataId = _ref.dataId,
      dataId = _ref$dataId === undefined ? '' : _ref$dataId,
      _ref$breakLabelText = _ref.breakLabelText,
      breakLabelText = _ref$breakLabelText === undefined ? false : _ref$breakLabelText,
      rest = _objectWithoutProperties(_ref, ['tag', 'active', 'label', 'extraLabel', 'description', 'appearance', 'icon', 'iconAlign', 'customIcon', 'color', 'disabled', 'itemRef', 'extraLabelClass', 'className', 'separated', 'dataId', 'breakLabelText']);

  return _react2.default.cloneElement(tag, _extends({}, rest, {
    ref: typeof tag.type === 'function' ? null : itemRef,
    className: cx('xsui-dropdown-item', 'xsui-dropdown-item--appearance-' + appearance, active && 'xsui-dropdown-item--active', (icon || customIcon) && 'xsui-dropdown-item--icon-align-' + iconAlign, disabled && 'xsui-dropdown-item--disabled', separated && 'xsui-dropdown-item--separated', className),
    'data-value': rest.value,
    'data-id': dataId,
    children: _react2.default.createElement(
      _react.Fragment,
      null,
      icon && _react2.default.createElement(
        'div',
        { className: cx('xsui-dropdown-item__icon'), style: { color: color } },
        _react2.default.createElement(_icon2.default, { name: icon })
      ),
      !icon && customIcon && _react2.default.createElement(
        'div',
        { className: cx('xsui-dropdown-item__icon') },
        customIcon
      ),
      _react2.default.createElement(
        'div',
        { className: cx('xsui-dropdown-item__entry') },
        _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown-item__row') },
          _react2.default.createElement(
            'div',
            {
              className: cx('xsui-dropdown-item__label', breakLabelText && 'xsui-dropdown-item__label--break-text'),
              style: { color: color } },
            label
          ),
          extraLabel instanceof Array ? extraLabel.map(function (a, index) {
            return _react2.default.createElement(
              'div',
              {
                key: 'label--' + index,
                className: cx('xsui-dropdown-item__extra-label', extraLabelClass) },
              a
            );
          }) : _react2.default.createElement(
            'div',
            { className: cx('xsui-dropdown-item__extra-label', extraLabelClass) },
            extraLabel
          )
        ),
        description && _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown-item__description') },
          description
        )
      )
    )
  }));
};

Item.propTypes = _types.bpfrpt_proptype_ItemProps === _propTypes2.default.any ? {} : _types.bpfrpt_proptype_ItemProps;

var Options = function (_PureComponent) {
  _inherits(Options, _PureComponent);

  function Options() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, Options);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Options.__proto__ || Object.getPrototypeOf(Options)).call.apply(_ref2, [this].concat(args))), _this), _this.positionPredetermined = !!_this.props.position, _this.state = {
      search: '',
      position: _this.props.position || 'bottom'
    }, _this.layoutRef = (0, _react.createRef)(), _this.determineDropdownPosition = function () {
      _this.setState({
        position: (0, _utils.dropdownVisible)(_this.containerRef, _this.props.buttonRef) ? 'bottom' : 'top'
      });
    }, _this.handleScroll = function () {
      var onScroll = _this.props.onScroll;

      var selectHeight = 84;
      var blockIndents = 10;

      if (_this.containerRef && _this.optionsRef) {
        var containerInnerHeight = _this.containerRef.offsetHeight - blockIndents;
        var scrollTop = _this.optionsRef.scrollHeight - containerInnerHeight + selectHeight;
        if (scrollTop === _this.containerRef.scrollTop) {
          onScroll();
        }
      }
    }, _this.setContainerRef = function (ref) {
      return _this.containerRef = ref;
    }, _this.setOptionsRef = function (ref) {
      return _this.optionsRef = ref;
    }, _this.setItemRef = function (ref) {
      return _this.activeItemRef = ref;
    }, _this.handleClick = function (item) {
      item.onClick && item.onClick();
      _this.props.onChange(item.value);
    }, _this.filterItem = function (item, string) {
      return item.label.toString().toLowerCase().indexOf(string) > -1 || item.value && item.value.toString().toLowerCase().indexOf(string) > -1 || item.extraLabel && item.extraLabel.toString().toLowerCase().indexOf(string) > -1 || item.description && item.description.toString().toLowerCase().indexOf(string) > -1;
    }, _this.renderOptions = function (filterredItems) {
      var _this$props = _this.props,
          intl = _this$props.intl,
          size = _this$props.size,
          align = _this$props.align,
          appearance = _this$props.appearance,
          searchable = _this$props.searchable,
          separated = _this$props.separated,
          fullWidth = _this$props.fullWidth,
          style = _this$props.style,
          buttonRef = _this$props.buttonRef,
          fetching = _this$props.fetching;


      return _react2.default.createElement(
        'div',
        {
          ref: _this.setContainerRef,
          className: cx('xsui-dropdown__container', 'xsui-dropdown__container--size-' + size, 'xsui-dropdown__container--appearance-' + appearance, !buttonRef && 'xsui-dropdown__container--align-' + align, 'xsui-dropdown__container--position-' + _this.state.position, buttonRef && 'xsui-dropdown__container--position-' + _this.state.position + '-hovered', separated && 'xsui-dropdown__container--separated', fullWidth && 'xsui-dropdown__container--full-width'),
          style: style },
        searchable && _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown__container__search') },
          _react2.default.createElement(_input2.default, {
            input: {
              name: 'search',
              value: _this.state.search,
              onChange: function onChange(e) {
                return _this.setState({
                  search: e.target.value
                });
              }
            },
            size: 'sm',
            offset: 'left',
            icon: 'search',
            autoComplete: 'off',
            placeholder: intl.formatMessage(_messages2.default.search)
          })
        ),
        _react2.default.createElement(
          'div',
          { ref: _this.setOptionsRef },
          filterredItems.map(function (item, index) {
            return _react2.default.createElement(Item, _extends({}, item, {
              iconAlign: item.iconAlign || align.split('-')[0],
              key: 'option-' + index,
              itemRef: function itemRef(ref) {
                return item.active && _this.setItemRef(ref);
              },
              onClick: function onClick() {
                return _this.handleClick(item);
              }
            }));
          })
        ),
        fetching && _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown__loader-container') },
          _react2.default.createElement(_loader2.default, { fullscreen: true, size: 'lg' })
        ),
        !filterredItems.length && _react2.default.createElement(Item, { label: intl.formatMessage(_messages2.default.nothingFound), disabled: true })
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Options, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.containerRef) {
        this.containerRef.addEventListener('scroll', this.handleScroll);
      }

      if (!this.positionPredetermined) {
        this.determineDropdownPosition();
        window.addEventListener('resize', this.determineDropdownPosition);
      }

      if (this.activeItemRef) {
        // $FlowFixMe ref type for findDOMNode
        var item = (0, _reactDom.findDOMNode)(this.activeItemRef);
        if (item.offsetTop > 100) {
          // $FlowFixMe ref type for findDOMNode
          (0, _reactDom.findDOMNode)(this.containerRef).scrollTop = item.offsetTop - item.clientHeight - 42;
        }
      }

      if (this.props.buttonRef && this.containerRef) {
        var layoutEl = this.layoutRef.current;

        if (!layoutEl || !this.props.buttonRef.current) {
          return;
        }

        var layoutElHeight = this.containerRef.offsetHeight + this.props.buttonRef.current.offsetHeight - 5;

        layoutEl.style.height = layoutElHeight + 'px';

        layoutEl.style.width = this.containerRef.offsetWidth + 'px';
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.containerRef) {
        this.containerRef.removeEventListener('scroll', this.handleScroll);
      }
      if (!this.positionPredetermined) {
        window.removeEventListener('resize', this.determineDropdownPosition);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          items = _props.items,
          align = _props.align,
          value = _props.value,
          buttonRef = _props.buttonRef;


      var filterredItems = items.filter(function (a) {
        return _this2.filterItem(a, _this2.state.search.toString().toLowerCase().trim());
      }).map(function (item) {
        return _extends({}, item, { active: item.active || item.value === value });
      });

      return _react2.default.createElement(
        _react.Fragment,
        null,
        buttonRef ? _react2.default.createElement(
          'div',
          {
            ref: this.layoutRef,
            className: cx('xsui-dropdown__layout', 'xsui-dropdown__layout-' + align, 'xsui-dropdown__layout-' + this.state.position, 'xsui-dropdown__container--align-' + align) },
          this.renderOptions(filterredItems)
        ) : _react2.default.createElement(
          _react.Fragment,
          null,
          this.renderOptions(filterredItems)
        )
      );
    }
  }]);

  return Options;
}(_react.PureComponent);

Options.propTypes = {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  items: _propTypes2.default.arrayOf(function (props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  }).isRequired,
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  align: _propTypes2.default.oneOf(['left', 'left-half', 'left-half-back', 'right', 'right-half', 'right-half-back']),
  appearance: _propTypes2.default.oneOf(['primary', 'secondary', 'tertiary']),
  position: _propTypes2.default.oneOf(['top', 'bottom']),
  searchable: _propTypes2.default.bool,
  separated: _propTypes2.default.bool,
  fullWidth: _propTypes2.default.bool,
  value: _propTypes2.default.any,
  onChange: _propTypes2.default.func,
  onScroll: _propTypes2.default.func,
  fetching: _propTypes2.default.bool,
  style: _propTypes2.default.object,
  buttonRef: _propTypes2.default.shape({
    current: function current() {
      return (typeof HTMLDivElement === 'function' ? _propTypes2.default.instanceOf(HTMLDivElement) : _propTypes2.default.any).apply(this, arguments);
    }
  })
};
Options.defaultProps = {
  position: null,
  size: 'md',
  align: 'left',
  appearance: 'primary',
  searchable: false,
  separated: false,
  fullWidth: false,
  value: null,
  onChange: function onChange() {
    return void 0;
  },
  onScroll: function onScroll() {
    return void 0;
  },
  fetching: false
};
exports.default = (0, _reactIntl.injectIntl)(Options);