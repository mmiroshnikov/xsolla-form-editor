'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _reactTransitionGroup = require('react-transition-group');

var _once = require('../_shared/once');

var _options = require('./options');

var _options2 = _interopRequireDefault(_options);

var _informContent = require('./inform-content');

var _informContent2 = _interopRequireDefault(_informContent);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('./types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var warnAppearanceSecondary = (0, _once.once)(function () {
  /*eslint-disable no-console, max-len */
  console.warn('Warning:', '<Dropdown appearance="secondary" />  is deprecated. See https://uikit.xsolla.com/components/dropdown');
  /*eslint-enable */
});
var warnSizeSm = (0, _once.once)(function () {
  /*eslint-disable no-console, max-len */
  console.warn('Warning:', '<Dropdown size="sm" />  is deprecated. See https://uikit.xsolla.com/components/dropdown');
  /*eslint-enable */
});

var Dropdown = function (_PureComponent) {
  _inherits(Dropdown, _PureComponent);

  function Dropdown() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call.apply(_ref, [this].concat(args))), _this), _this.instance = _react2.default.createRef(), _this.state = {
      visible: false
    }, _this.showDropdown = function () {
      return _this.setState({ visible: true });
    }, _this.hideDropdown = function () {
      return _this.setState({ visible: false });
    }, _this.toggleVisible = function () {
      return _this.setState({ visible: !_this.state.visible });
    }, _this.handleClickOutside = function () {
      return _this.setState({ visible: false });
    }, _this.handleOnClick = function (e) {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onClick = _this$props.onClick;


      e.preventDefault();

      if (!disabled) {
        _this.toggleVisible();
      }

      onClick && onClick();
    }, _this.handleOnChange = function (value) {
      _this.props.autohide && _this.toggleVisible();
      _this.props.onChange && _this.props.onChange(value);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line

  /**
   * Handle on change in dropdown
   * @param value
   */


  _createClass(Dropdown, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          autosize = _props.autosize,
          options = _props.options,
          optionsWidth = _props.optionsWidth,
          type = _props.type,
          trigger = _props.trigger,
          onScrollOptions = _props.onScrollOptions,
          fetching = _props.fetching,
          rest = _objectWithoutProperties(_props, ['children', 'autosize', 'options', 'optionsWidth', 'type', 'trigger', 'onScrollOptions', 'fetching']);

      if (rest.appearance === 'secondary') {
        warnAppearanceSecondary();
      }

      if (rest.size === 'sm') {
        warnSizeSm();
      }

      return _react2.default.createElement(
        'div',
        {
          className: cx('xsui-dropdown', autosize && 'xsui-dropdown--autosize'),
          onMouseEnter: trigger === 'hover' ? this.showDropdown : undefined,
          onMouseLeave: trigger === 'hover' ? this.hideDropdown : undefined,
          ref: this.instance },
        _react2.default.cloneElement(children, {
          focused: typeof children.type === 'function' ? this.state.visible : null,
          onClick: this.handleOnClick
        }),
        options.length > 0 && type === 'options' && _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          this.state.visible && _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 100 },
            _react2.default.createElement(_options2.default, _extends({}, rest, {
              items: options,
              fetching: fetching,
              onChange: this.handleOnChange,
              onScroll: onScrollOptions,
              size: optionsWidth || rest.size,
              buttonRef: trigger === 'hover' ? this.instance : undefined
            }))
          )
        ),
        type === 'inform' && _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          this.state.visible && _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 100 },
            _react2.default.createElement(_informContent2.default, _extends({}, rest, {
              onChange: this.handleOnChange,
              size: optionsWidth || rest.size,
              buttonRef: trigger === 'hover' ? this.instance : undefined
            }))
          )
        )
      );
    }
  }]);

  return Dropdown;
}(_react.PureComponent);

Dropdown.propTypes = {
  children: function children(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  },
  options: _propTypes2.default.arrayOf(function (props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  }),
  optionsWidth: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  autosize: _propTypes2.default.bool,
  autohide: _propTypes2.default.bool,
  value: _propTypes2.default.any,
  onChange: _propTypes2.default.func,
  onClick: _propTypes2.default.func,
  onScrollOptions: _propTypes2.default.func,
  type: _propTypes2.default.oneOf(['inform', 'options']),
  trigger: _propTypes2.default.oneOf(['click', 'hover']),
  appearance: _propTypes2.default.oneOf(['primary', 'secondary', 'tertiary']),
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  fetching: _propTypes2.default.bool
};
Dropdown.defaultProps = {
  options: [],
  optionsWidth: undefined,
  autosize: false,
  type: 'options',
  autohide: true,
  value: null,
  onChange: function onChange() {
    return void 0;
  },
  onScrollOptions: function onScrollOptions() {
    return void 0;
  },
  trigger: 'click',
  className: '',
  disabled: false,
  fetching: false
};
exports.default = (0, _reactOnclickoutside2.default)(Dropdown);