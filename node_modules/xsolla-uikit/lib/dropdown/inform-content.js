'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _utils = require('../utils');

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var InformContent = function (_PureComponent) {
  _inherits(InformContent, _PureComponent);

  function InformContent() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InformContent);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InformContent.__proto__ || Object.getPrototypeOf(InformContent)).call.apply(_ref, [this].concat(args))), _this), _this.positionPredetermined = Boolean(_this.props.position), _this.state = {
      position: _this.props.position || 'bottom'
    }, _this.setContainerRef = function (ref) {
      return _this.containerRef = ref;
    }, _this.handleClick = function () {
      var onClick = _this.props.content.onClick;

      onClick && onClick();
      _this.props.onChange();
    }, _this.determineDropdownPosition = function () {
      _this.setState({
        position: (0, _utils.dropdownVisible)(_this.containerRef, _this.props.buttonRef) ? 'bottom' : 'top'
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InformContent, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.positionPredetermined) {
        this.determineDropdownPosition();
        window.addEventListener('resize', this.determineDropdownPosition);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.positionPredetermined) {
        window.removeEventListener('resize', this.determineDropdownPosition);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          size = _props.size,
          align = _props.align,
          fullWidth = _props.fullWidth,
          informContentClassName = _props.informContentClassName;
      var position = this.state.position;
      var _props$content = this.props.content,
          title = _props$content.title,
          button = _props$content.button,
          description = _props$content.description,
          buttonAppearance = _props$content.buttonAppearance;

      return _react2.default.createElement(
        'div',
        {
          ref: this.setContainerRef,
          className: cx('xsui-dropdown__container', 'xsui-dropdown__container-inform', 'xsui-dropdown__container-inform--' + align, 'xsui-dropdown__container--align-' + align, 'xsui-dropdown__container--size-' + size, 'xsui-dropdown__container--position-' + position, fullWidth && 'xsui-dropdown__container--full-width', informContentClassName) },
        title && _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown__container-inform__title') },
          title
        ),
        _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown__container-inform__description') },
          description
        ),
        button && _react2.default.createElement(
          'div',
          { className: cx('xsui-dropdown__container-inform__button') },
          _react2.default.createElement(
            _button2.default,
            {
              appearance: buttonAppearance || 'secondary',
              size: 'sm',
              onClick: this.handleClick },
            button
          )
        )
      );
    }
  }]);

  return InformContent;
}(_react.PureComponent);

InformContent.propTypes = {
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  align: _propTypes2.default.oneOf(['left', 'right']),
  fullWidth: _propTypes2.default.bool,
  onChange: _propTypes2.default.func,
  content: _propTypes2.default.shape({
    title: _propTypes2.default.string,
    description: _propTypes2.default.string,
    button: _propTypes2.default.string,
    buttonAppearance: _propTypes2.default.oneOf(['primary', 'secondary', 'outline', 'outline-primary', 'outline-secondary', 'flatten', 'square', 'icon', 'alert']),
    onClick: _propTypes2.default.func
  }),
  position: _propTypes2.default.oneOf(['top', 'bottom']),
  buttonRef: _propTypes2.default.shape({
    current: function current() {
      return (typeof HTMLDivElement === 'function' ? _propTypes2.default.instanceOf(HTMLDivElement) : _propTypes2.default.any).apply(this, arguments);
    }
  }),
  informContentClassName: _propTypes2.default.string
};
InformContent.defaultProps = {
  size: 'md',
  align: 'left',
  fullWidth: false,
  content: {
    title: '',
    description: ''
  },
  onChange: function onChange() {
    return void 0;
  }
};
exports.default = (0, _reactIntl.injectIntl)(InformContent);