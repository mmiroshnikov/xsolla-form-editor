'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _formGroup = require('../form-group');

var _formGroup2 = _interopRequireDefault(_formGroup);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _inputPassword = require('../input-password');

var _inputPassword2 = _interopRequireDefault(_inputPassword);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Example = function (_PureComponent) {
  _inherits(Example, _PureComponent);

  function Example() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Example);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Example.__proto__ || Object.getPrototypeOf(Example)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: ''
    }, _this.setValue = function (e) {
      return _this.setState({ value: e.target.value });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Example, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: { maxWidth: 480, margin: '0 auto' } },
        _react2.default.createElement(
          _formGroup2.default,
          {
            label: 'Standard input',
            indentation: 'lg',
            caption: 'Default appearance and behavior. Used in most cases.' },
          _react2.default.createElement(_index2.default, { input: { name: 'default', value: this.state.value, onChange: this.setValue } })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'With error', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'default', value: this.state.value, onChange: this.setValue },
            meta: { touched: true, error: 'Error message' }
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'With \'highlight\' validationAppearance', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'default', value: this.state.value, onChange: this.setValue },
            meta: { touched: true, error: 'Error message' },
            validationAppearance: 'highlight'
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          {
            label: 'Small input',
            indentation: 'lg',
            caption: 'Usually used for filters. Width is fixed at 164px.' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'small', value: this.state.value, onChange: this.setValue },
            size: 'sm',
            inline: true
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'With icon', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'with-icon', value: this.state.value, onChange: this.setValue },
            offset: 'left',
            icon: 'search'
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'With custom icon', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'with-custom-icon', value: this.state.value, onChange: this.setValue },
            offset: 'left',
            customIcon: require('./../_icons/youtube.svg')
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Borderless', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            appearance: 'flatten',
            input: { name: 'with-icon', value: this.state.value, onChange: this.setValue },
            offset: 'left',
            icon: 'search'
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'With custom trigger', indentation: 'lg' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'with-icon', value: this.state.value, onChange: this.setValue },
            offset: 'right',
            extra: _react2.default.createElement(_icon2.default, { name: 'circle-remove-mini', hoverable: true, onClick: this.setValue })
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Password field', indentation: 'lg', caption: 'Shows/hides input value' },
          _react2.default.createElement(_inputPassword2.default, {
            input: { name: 'password', value: this.state.value, onChange: this.setValue },
            type: 'password'
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          {
            label: 'Readonly (button appearance)',
            indentation: 'lg',
            caption: 'Used for \'select\' fields. Not applicable for keyboard input.' },
          _react2.default.createElement(_index2.default, {
            input: { name: 'readonly', value: this.state.value, onChange: this.setValue },
            offset: 'right',
            readOnly: true,
            icon: 'dropdown-select'
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          {
            label: 'Custom \u0441omponent',
            indentation: 'lg'
            // eslint-disable-next-line max-len
            , caption: 'Allows to use any custom component instead of default <input>, e.g. \'react-debounce-input\'' },
          _react2.default.createElement(_index2.default, {
            as: function as() {
              return _react2.default.createElement('textarea', null);
            },
            input: { name: 'readonly', value: this.state.value, onChange: this.setValue }
          })
        )
      );
    }
  }]);

  return Example;
}(_react.PureComponent);

exports.default = Example;