'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bpfrpt_proptype_Props = exports.bpfrpt_proptype_Meta = exports.bpfrpt_proptype_InputLook = exports.bpfrpt_proptype_InputType = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _notification = require('../notification');

var _notification2 = _interopRequireDefault(_notification);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var bpfrpt_proptype_InputType = {
  name: _propTypes2.default.string,
  value: function value(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  },
  checked: _propTypes2.default.bool,
  onBlur: _propTypes2.default.func,
  onChange: _propTypes2.default.func.isRequired,
  onDragStart: _propTypes2.default.func,
  onDrop: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onClick: _propTypes2.default.func
};
var bpfrpt_proptype_InputLook = {
  offset: _propTypes2.default.oneOf(['left', 'left-separated', 'right', 'both']),
  focused: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  customIcon: _propTypes2.default.string,
  validationAppearance: _propTypes2.default.oneOf(['default', 'highlight'])
};
var bpfrpt_proptype_Meta = {
  touched: _propTypes2.default.bool,
  error: _propTypes2.default.node,
  warning: _propTypes2.default.string,
  dirty: _propTypes2.default.bool,
  submitFailed: _propTypes2.default.bool
};
var bpfrpt_proptype_Props = {
  offset: _propTypes2.default.oneOf(['left', 'left-separated', 'right', 'both']),
  focused: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  customIcon: _propTypes2.default.string,
  validationAppearance: _propTypes2.default.oneOf(['default', 'highlight']),
  as: function as() {
    return (typeof $FlowFixMe === 'function' ? _propTypes2.default.instanceOf($FlowFixMe) : _propTypes2.default.any).apply(this, arguments);
  },
  // Should allow string | React.ComponentType<{}>
  input: _propTypes2.default.shape({
    name: _propTypes2.default.string,
    value: function value(props, propName, componentName) {
      if (!Object.prototype.hasOwnProperty.call(props, propName)) {
        throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
      }
    },
    checked: _propTypes2.default.bool,
    onBlur: _propTypes2.default.func,
    onChange: _propTypes2.default.func.isRequired,
    onDragStart: _propTypes2.default.func,
    onDrop: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onClick: _propTypes2.default.func
  }).isRequired,
  meta: _propTypes2.default.shape({
    touched: _propTypes2.default.bool,
    error: _propTypes2.default.node,
    warning: _propTypes2.default.string,
    dirty: _propTypes2.default.bool,
    submitFailed: _propTypes2.default.bool
  }),
  type: _propTypes2.default.oneOf(['text', 'email', 'password', 'number', 'file']),
  size: _propTypes2.default.oneOf(['sm', 'md']),
  appearance: _propTypes2.default.oneOf(['primary', 'flatten']),
  dock: _propTypes2.default.oneOf(['left', 'right']),
  placeholder: _propTypes2.default.string,
  inline: _propTypes2.default.bool,
  disabledLimitationMinWidth: _propTypes2.default.bool,
  extra: _propTypes2.default.node,
  onClick: _propTypes2.default.func,
  containerRef: _propTypes2.default.func,
  style: _propTypes2.default.any,
  className: _propTypes2.default.string,
  dataIdError: _propTypes2.default.string,
  notificationClassName: _propTypes2.default.string
};


var cx = _bind2.default.bind(_style2.default);

var Input = function Input(_ref) {
  var _ref$as = _ref.as,
      as = _ref$as === undefined ? 'input' : _ref$as,
      input = _ref.input,
      _ref$meta = _ref.meta,
      meta = _ref$meta === undefined ? { touched: false, error: null, warning: null } : _ref$meta,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'text' : _ref$type,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'md' : _ref$size,
      _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === undefined ? 'primary' : _ref$appearance,
      offset = _ref.offset,
      dock = _ref.dock,
      placeholder = _ref.placeholder,
      _ref$inline = _ref.inline,
      inline = _ref$inline === undefined ? false : _ref$inline,
      _ref$focused = _ref.focused,
      focused = _ref$focused === undefined ? false : _ref$focused,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$disabledLimitati = _ref.disabledLimitationMinWidth,
      disabledLimitationMinWidth = _ref$disabledLimitati === undefined ? false : _ref$disabledLimitati,
      _ref$readOnly = _ref.readOnly,
      readOnly = _ref$readOnly === undefined ? false : _ref$readOnly,
      icon = _ref.icon,
      customIcon = _ref.customIcon,
      extra = _ref.extra,
      onClick = _ref.onClick,
      style = _ref.style,
      containerRef = _ref.containerRef,
      className = _ref.className,
      _ref$validationAppear = _ref.validationAppearance,
      validationAppearance = _ref$validationAppear === undefined ? 'default' : _ref$validationAppear,
      dataIdError = _ref.dataIdError,
      notificationClassName = _ref.notificationClassName,
      rest = _objectWithoutProperties(_ref, ['as', 'input', 'meta', 'type', 'size', 'appearance', 'offset', 'dock', 'placeholder', 'inline', 'focused', 'disabled', 'disabledLimitationMinWidth', 'readOnly', 'icon', 'customIcon', 'extra', 'onClick', 'style', 'containerRef', 'className', 'validationAppearance', 'dataIdError', 'notificationClassName']);

  var showValidationMessage = validationAppearance === 'default';
  var isError = meta.touched && meta.error;
  var isWarning = meta.touched && !meta.error && meta.warning;

  var inputName = input.name || '';
  var errorDataId = dataIdError || 'error-' + inputName;
  var warningDataId = 'warning-' + inputName;

  return React.createElement(
    'div',
    {
      style: _extends({
        display: inline ? 'inline-block' : 'block'
      }, style) },
    React.createElement(
      'div',
      {
        ref: containerRef,
        style: {
          position: 'relative',
          width: '100%',
          display: inline ? 'inline-block' : 'block'
        } },
      React.createElement(readOnly ? 'button' : as, _extends({}, rest, input, {
        placeholder: placeholder,
        disabled: disabled,
        onClick: onClick,
        className: cx('xsui-input', 'xsui-input--size-' + size, appearance && 'xsui-input--appearance-' + appearance, offset && 'xsui-input--offset-' + offset, focused && 'xsui-input--focused', disabledLimitationMinWidth && 'xsui-input--disabled-min-width', readOnly && !input.value && 'xsui-input--empty', readOnly && 'xsui-input--read-only', isError && 'xsui-input--error', isWarning && 'xsui-input--warning', dock && 'xsui-input--dock-' + dock, className),
        value: input.value === null || input.value === void 0 ? '' : String(input.value),
        type: readOnly ? 'button' : type,
        children: readOnly ? input.value || placeholder : null,
        'data-id': inputName,
        'data-value': input.value
      })),
      icon && React.createElement(
        'div',
        { className: cx('xsui-input__icon') },
        React.createElement(_icon2.default, { name: icon })
      ),
      customIcon && React.createElement(
        'div',
        { className: cx('xsui-input__icon') },
        React.createElement('img', { src: customIcon })
      ),
      extra && React.createElement(
        'div',
        { className: cx('xsui-input__extra') },
        extra
      )
    ),
    showValidationMessage && React.createElement(
      'div',
      { className: cx(notificationClassName) },
      isError && React.createElement(
        _notification2.default,
        { appearance: 'string', status: 'error' },
        React.createElement(
          'span',
          { 'data-id': errorDataId },
          meta.error
        )
      ),
      isWarning && React.createElement(
        _notification2.default,
        { appearance: 'string', status: 'warning' },
        React.createElement(
          'span',
          { 'data-id': warningDataId },
          meta.warning
        )
      )
    )
  );
};

Input.propTypes = bpfrpt_proptype_Props;
exports.default = Input;
exports.bpfrpt_proptype_InputType = bpfrpt_proptype_InputType;
exports.bpfrpt_proptype_InputLook = bpfrpt_proptype_InputLook;
exports.bpfrpt_proptype_Meta = bpfrpt_proptype_Meta;
exports.bpfrpt_proptype_Props = bpfrpt_proptype_Props;