'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLoaderColor = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _loader = require('../loader');

var _loader2 = _interopRequireDefault(_loader);

var _once = require('../_shared/once');

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var warnAppearanceIcon = (0, _once.once)(function () {
  /*eslint-disable no-console, max-len */
  console.warn('Warning:', '<Button appearance="icon" />  is deprecated. Use <Icon /> https://uikit.xsolla.com/components/icon');
  /*eslint-enable */
});

var getLoaderColor = exports.getLoaderColor = function getLoaderColor(appearance) {
  if (appearance === 'primary' || appearance === 'secondary' || appearance === 'alert') {
    return 'white';
  }

  if (appearance === 'flatten') {
    return 'blue';
  }

  return 'gray';
};

var Button = function Button(_ref) {
  var _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === undefined ? 'primary' : _ref$appearance,
      _ref$type = _ref.type,
      type = _ref$type === undefined ? 'button' : _ref$type,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'md' : _ref$size,
      offset = _ref.offset,
      icon = _ref.icon,
      children = _ref.children,
      _ref$focused = _ref.focused,
      focused = _ref$focused === undefined ? false : _ref$focused,
      _ref$fetching = _ref.fetching,
      fetching = _ref$fetching === undefined ? false : _ref$fetching,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled,
      _ref$reversed = _ref.reversed,
      reversed = _ref$reversed === undefined ? false : _ref$reversed,
      _ref$initialIconColor = _ref.initialIconColor,
      initialIconColor = _ref$initialIconColor === undefined ? 'blue' : _ref$initialIconColor,
      rest = _objectWithoutProperties(_ref, ['appearance', 'type', 'size', 'offset', 'icon', 'children', 'focused', 'fetching', 'disabled', 'reversed', 'initialIconColor']);

  if (appearance === 'icon') {
    warnAppearanceIcon();
  }

  return _react2.default.createElement(
    'button',
    _extends({}, rest, {
      className: cx('xsui-button', 'xsui-button--appearance-' + appearance, 'xsui-button--size-' + size, offset && 'xsui-button--offset-' + offset, icon && 'xsui-button__icon', focused && 'xsui-button--focused', 'xsui-button--color-' + initialIconColor),
      type: type,
      disabled: disabled }),
    _react2.default.createElement(
      'div',
      { className: cx('xsui-button__wrapper') },
      fetching && _react2.default.createElement(
        'div',
        { className: cx('xsui-button__wrapper--fetching') },
        _react2.default.createElement(_loader2.default, { color: getLoaderColor(appearance), size: 'sm', fullscreen: true })
      ),
      _react2.default.createElement(
        'div',
        {
          className: cx('xsui-button__content', fetching && 'xsui-button--fetching', reversed && 'xsui-button--reversed') },
        icon && _react2.default.createElement(_icon2.default, { name: icon }),
        children
      )
    )
  );
};

Button.propTypes = {
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  appearance: _propTypes2.default.oneOf(['primary', 'secondary', 'outline', 'outline-primary', 'outline-secondary', 'flatten', 'square', 'icon', 'alert']),
  type: _propTypes2.default.oneOf(['button', 'submit']),
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  offset: _propTypes2.default.oneOf(['left', 'right', 'both', 'arrow-fetching-both']),
  icon: _propTypes2.default.string,
  initialIconColor: _propTypes2.default.oneOf(['blue', 'gray']),
  focused: _propTypes2.default.bool,
  fetching: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  reversed: _propTypes2.default.bool,
  onClick: _propTypes2.default.func
};
exports.default = Button;