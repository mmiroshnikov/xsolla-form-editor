'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _modal = require('../modal');

var _modal2 = _interopRequireDefault(_modal);

var _index = require('../form-footer/index');

var _index2 = _interopRequireDefault(_index);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var ModalAlert = function (_React$PureComponent) {
  _inherits(ModalAlert, _React$PureComponent);

  function ModalAlert() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ModalAlert);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModalAlert.__proto__ || Object.getPrototypeOf(ModalAlert)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      fetching: false,
      confirmed: false
    }, _this.handleKeydown = function (e) {
      var confirmed = _this.state.confirmed;
      var _this$props = _this.props,
          confirmationEl = _this$props.confirmationEl,
          submitByEnter = _this$props.submitByEnter;


      if (!submitByEnter) {
        return;
      }

      var isConfirmed = confirmationEl ? confirmed : true;

      if (e.keyCode === 13) {
        e.preventDefault();

        if (isConfirmed) {
          _this.handleSubmit();
        }
      }
    }, _this.toggleFetching = function () {
      return _this.setState({ fetching: !_this.state.fetching });
    }, _this.setConfirmed = function (value) {
      var confirmationHandler = _this.props.confirmationHandler;

      _this.setState({ confirmed: value });

      if (confirmationHandler) {
        _this.toggleFetching();
        confirmationHandler().then(function () {
          return _this.toggleFetching();
        }).catch(function () {
          return _this.toggleFetching();
        });
      }
    }, _this.clearState = function () {
      _this.setState({
        fetching: false,
        confirmed: false
      });
    }, _this.handleDiscard = function () {
      _this.clearState();
      _this.props.onDiscard();
    }, _this.handleSubmit = function () {
      var _this$props2 = _this.props,
          onSubmit = _this$props2.onSubmit,
          closeAfterSubmit = _this$props2.closeAfterSubmit;


      _this.toggleFetching();
      var submitResult = onSubmit(_this.state.confirmed);
      Promise.resolve(submitResult).then(function () {
        return _this.handleClose(closeAfterSubmit);
      });
    }, _this.handleClose = function () {
      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      _this.clearState();
      close && _this.props.onClose();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModalAlert, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeydown, true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleKeydown, true);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          icon = _props.icon,
          title = _props.title,
          description = _props.description,
          discard = _props.discard,
          submit = _props.submit,
          submitAppearance = _props.submitAppearance,
          confirmationEl = _props.confirmationEl,
          modalDiscardDataID = _props.modalDiscardDataID,
          modalSubmitDataID = _props.modalSubmitDataID,
          _props$compactFooter = _props.compactFooter,
          compactFooter = _props$compactFooter === undefined ? false : _props$compactFooter,
          rest = _objectWithoutProperties(_props, ['icon', 'title', 'description', 'discard', 'submit', 'submitAppearance', 'confirmationEl', 'modalDiscardDataID', 'modalSubmitDataID', 'compactFooter']);

      return React.createElement(
        _modal2.default,
        _extends({}, rest, { onClose: this.handleClose, hideCloseBtn: true }),
        React.createElement(
          React.Fragment,
          null,
          React.createElement(
            'div',
            { className: cx('modal-alert') },
            icon && React.createElement('img', { className: cx('modal-alert__icon'), src: icon }),
            React.createElement(
              'div',
              { className: cx('modal-alert__title') },
              title
            ),
            React.createElement(
              'div',
              { className: cx('modal-alert__description') },
              description
            ),
            submit && confirmationEl && React.createElement(
              'div',
              { className: cx('modal-alert__confirmation') },
              confirmationEl({
                value: this.state.confirmed,
                onChange: this.setConfirmed
              })
            )
          ),
          (discard || submit) && React.createElement(
            _index2.default,
            { compact: compactFooter },
            discard && React.createElement(
              _button2.default,
              {
                appearance: 'outline',
                onClick: function onClick() {
                  return _this2.handleDiscard() || _this2.handleClose();
                },
                'data-id': modalDiscardDataID },
              discard
            ),
            submit && React.createElement(
              _button2.default,
              {
                appearance: submitAppearance,
                disabled: confirmationEl && !this.state.confirmed,
                fetching: this.state.fetching,
                onClick: this.handleSubmit,
                'data-id': modalSubmitDataID },
              submit
            )
          )
        )
      );
    }
  }]);

  return ModalAlert;
}(React.PureComponent);

ModalAlert.propTypes = {
  fetching: _propTypes2.default.bool,
  isOpen: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  title: _propTypes2.default.node.isRequired,
  description: _propTypes2.default.node.isRequired,
  discard: _propTypes2.default.node,
  submit: _propTypes2.default.node,
  submitAppearance: _propTypes2.default.oneOf(['primary', 'secondary', 'outline', 'outline-primary', 'outline-secondary', 'flatten', 'square', 'icon', 'alert']),
  confirmationEl: _propTypes2.default.func,
  confirmationHandler: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  onSubmit: _propTypes2.default.func,
  onDiscard: _propTypes2.default.func,
  modalDiscardDataID: _propTypes2.default.string,
  modalSubmitDataID: _propTypes2.default.string,
  closeAfterSubmit: _propTypes2.default.bool,
  compactFooter: _propTypes2.default.bool,
  submitByEnter: _propTypes2.default.bool
};
ModalAlert.defaultProps = {
  compactFooter: false,
  closeAfterSubmit: true,
  submitByEnter: false,
  fetching: false,
  isOpen: false,
  icon: null,
  discard: null,
  submit: null,
  onClose: function onClose() {
    return void 0;
  },
  onSubmit: function onSubmit() {
    return void 0;
  },
  onDiscard: function onDiscard() {
    return void 0;
  }
};
exports.default = ModalAlert;