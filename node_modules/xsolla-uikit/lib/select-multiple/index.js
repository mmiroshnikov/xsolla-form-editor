'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _dropdown = require('../dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _messages = require('../select/messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var SelectMultiple = function SelectMultiple(_ref) {
  var intl = _ref.intl,
      input = _ref.input,
      fields = _ref.fields,
      options = _ref.options,
      searchable = _ref.searchable,
      autosize = _ref.autosize,
      placeholder = _ref.placeholder,
      rest = _objectWithoutProperties(_ref, ['intl', 'input', 'fields', 'options', 'searchable', 'autosize', 'placeholder']);

  var selectedItems = fields.getAll() || [];
  return _react2.default.createElement(
    'div',
    { className: cx('xsui-select') },
    _react2.default.createElement(
      _dropdown2.default,
      {
        appearance: 'secondary',
        options: options.map(function (item) {
          return _extends({}, item, { active: selectedItems.includes(item.value) });
        }),
        value: input.value || null,
        size: rest.size,
        searchable: searchable,
        autosize: autosize,
        fullWidth: true,
        autohide: false,
        separated: false,
        onChange: function onChange(value) {
          selectedItems.includes(value) ? fields.remove(selectedItems.indexOf(value)) : fields.push(value);
        } },
      _react2.default.createElement(_input2.default, _extends({}, rest, {
        input: {
          name: input.name || rest.name,
          value: options.length > 0 ? selectedItems.map(function (value) {
            var option = options.find(function (option) {
              return option.value === value;
            });
            if (!option) {
              return null;
            }
            return option.label;
          }).join(', ') : '',
          onChange: function onChange() {
            return void 0;
          }
        },
        offset: 'right',
        icon: 'dropdown-select',
        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
        readOnly: true
      }))
    )
  );
};

SelectMultiple.propTypes = {
  intl: _reactIntl.intlShape,
  input: _propTypes2.default.object,
  fields: _propTypes2.default.object,
  meta: _propTypes2.default.shape({
    touched: _propTypes2.default.bool,
    error: _propTypes2.default.any
  }),
  name: _propTypes2.default.string,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    tag: _propTypes2.default.string,
    label: _propTypes2.default.string.isRequired,
    description: _propTypes2.default.any,
    color: _propTypes2.default.string,
    icon: _propTypes2.default.string,
    onClick: _propTypes2.default.func
  })),
  size: _propTypes2.default.oneOf(['xs', 'sm', 'md']),
  placeholder: _propTypes2.default.string,
  searchable: _propTypes2.default.bool,
  autosize: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};

SelectMultiple.defaultProps = {
  input: {},
  fields: {},
  meta: {
    touched: false,
    error: null
  },
  size: 'md',
  options: [],
  searchable: false,
  autosize: false,
  disabled: false
};

exports.default = (0, _reactIntl.injectIntl)(SelectMultiple);