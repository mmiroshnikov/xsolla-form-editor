'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactIntl = require('react-intl');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _copyToClipboard = require('copy-to-clipboard');

var _copyToClipboard2 = _interopRequireDefault(_copyToClipboard);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _tooltip = require('../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var InputCopy = function (_PureComponent) {
  _inherits(InputCopy, _PureComponent);

  function InputCopy() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InputCopy);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputCopy.__proto__ || Object.getPrototypeOf(InputCopy)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isTooltipShown: false
    }, _this.handleCopy = function () {
      var _this$props = _this.props,
          input = _this$props.input,
          onCopy = _this$props.onCopy;

      (0, _copyToClipboard2.default)(input.value);
      if (typeof onCopy === 'function') {
        onCopy();
      }
      _this.setState({ isTooltipShown: true });
    }, _this.handleSelectOnClick = function (event) {
      event.currentTarget.select();
    }, _this.handleCloseTooltipWithTimeout = function () {
      setTimeout(function () {
        _this.setState({
          isTooltipShown: false
        });
      }, 2000);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InputCopy, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          intl = _props.intl,
          input = _props.input,
          type = _props.type,
          size = _props.size,
          appearance = _props.appearance,
          inline = _props.inline,
          onClick = _props.onClick,
          containerRef = _props.containerRef,
          selectOnClick = _props.selectOnClick,
          style = _props.style,
          rest = _objectWithoutProperties(_props, ['intl', 'input', 'type', 'size', 'appearance', 'inline', 'onClick', 'containerRef', 'selectOnClick', 'style']);

      var isTooltipShown = this.state.isTooltipShown;

      return _react2.default.createElement(
        'div',
        {
          style: _extends({
            display: inline ? 'inline-block' : 'block'
          }, style) },
        _react2.default.createElement(
          'div',
          {
            ref: containerRef,
            style: {
              position: 'relative',
              width: '100%',
              display: inline ? 'inline-block' : 'block'
            } },
          _react2.default.createElement('input', _extends({}, rest, input, {
            onChange: function onChange() {
              return void 0;
            },
            readOnly: true,
            onClick: selectOnClick ? this.handleSelectOnClick : onClick,
            className: cx('xsui-input', 'xsui-input-copy', 'xsui-input--size-' + size, 'xsui-input--offset-right', selectOnClick && 'xsui-input-copy--selectable', appearance && 'xsui-input--appearance-' + appearance),
            value: input.value === null || input.value === void 0 ? '' : String(input.value),
            type: type,
            children: null,
            'data-id': input.name,
            'data-value': input.value
          })),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-input__extra') },
            _react2.default.createElement(
              _tooltip2.default,
              {
                label: intl.formatMessage(_messages2.default.copied),
                open: isTooltipShown,
                onShown: this.handleCloseTooltipWithTimeout,
                style: { height: 24 } },
              _react2.default.createElement(_icon2.default, { name: 'copy', hoverable: true, onClick: this.handleCopy })
            )
          )
        )
      );
    }
  }]);

  return InputCopy;
}(_react.PureComponent);

InputCopy.propTypes = {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  input: _propTypes2.default.shape({
    name: _propTypes2.default.string,
    value: function value(props, propName, componentName) {
      if (!Object.prototype.hasOwnProperty.call(props, propName)) {
        throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
      }
    }
  }).isRequired,
  type: _propTypes2.default.oneOf(['text', 'email', 'password']),
  size: _propTypes2.default.oneOf(['sm', 'md']),
  appearance: _propTypes2.default.oneOf(['primary', 'flatten']),
  inline: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  onCopy: _propTypes2.default.func,
  containerRef: _propTypes2.default.func,
  selectOnClick: _propTypes2.default.bool,
  style: _propTypes2.default.any
};
InputCopy.defaultProps = {
  type: 'text',
  size: 'md',
  appearance: 'primary',
  inline: false,
  selectOnClick: false
};
exports.default = (0, _reactIntl.injectIntl)(InputCopy);