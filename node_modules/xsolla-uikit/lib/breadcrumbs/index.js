'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactRouterDom = require('react-router-dom');

var _dropdown = require('../dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var MoreButton = function MoreButton(_ref) {
  var _ref$focused = _ref.focused,
      focused = _ref$focused === undefined ? false : _ref$focused,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === undefined ? function () {
    return void 0;
  } : _ref$onClick;
  return _react2.default.createElement(
    'div',
    { className: cx('xsui-breadcrumbs_item') },
    _react2.default.createElement(
      'div',
      {
        className: cx('xsui-breadcrumbs_label', 'xsui-breadcrumbs_label--more', focused && 'xsui-breadcrumbs_label--focused'),
        onClick: onClick },
      _react2.default.createElement(_icon2.default, { name: 'more' })
    ),
    _react2.default.createElement(
      'div',
      { className: cx('xsui-breadcrumbs_chevron') },
      _react2.default.createElement(_icon2.default, { name: 'chevron' })
    )
  );
};

MoreButton.propTypes = {
  focused: _propTypes2.default.bool,
  onClick: _propTypes2.default.func
};

var Breadcrumbs = function (_PureComponent) {
  _inherits(Breadcrumbs, _PureComponent);

  function Breadcrumbs() {
    _classCallCheck(this, Breadcrumbs);

    return _possibleConstructorReturn(this, (Breadcrumbs.__proto__ || Object.getPrototypeOf(Breadcrumbs)).apply(this, arguments));
  }

  _createClass(Breadcrumbs, [{
    key: 'render',
    value: function render() {
      var entryDataId = this.props.entryDataId;


      return _react2.default.createElement(
        'div',
        { className: cx('xsui-breadcrumbs') },
        _react2.default.createElement(
          'div',
          { className: cx('xsui-breadcrumbs_entry'), 'data-id': entryDataId },
          this.props.items.length > this.visibleItems.length && _react2.default.createElement(
            _dropdown2.default,
            { options: this.hiddenItems.map(function (a) {
                return _extends({}, a, { tag: _react2.default.createElement(_reactRouterDom.Link, { to: a.to }) });
              }) },
            _react2.default.createElement(MoreButton, null)
          ),
          this.visibleItems.map(function (item, index) {
            return _react2.default.createElement(
              'div',
              {
                key: 'item--' + index,
                className: cx('xsui-breadcrumbs_item'),
                'data-id': item.dataId },
              _react2.default.createElement(
                _reactRouterDom.Link,
                { to: item.to, className: cx('xsui-breadcrumbs_label') },
                item.label
              ),
              _react2.default.createElement(
                'div',
                { className: cx('xsui-breadcrumbs_chevron') },
                _react2.default.createElement(_icon2.default, { name: 'chevron' })
              )
            );
          })
        ),
        this.props.extra && _react2.default.createElement(
          'div',
          { className: cx('xsui-breadcrumbs_extra') },
          this.props.extra
        )
      );
    }
  }, {
    key: 'visibleItems',
    get: function get() {
      return [].concat(_toConsumableArray(this.props.items)).slice(this.props.limit * -1);
    }
  }, {
    key: 'hiddenItems',
    get: function get() {
      return [].concat(_toConsumableArray(this.props.items)).reverse().slice(this.props.limit);
    }
  }]);

  return Breadcrumbs;
}(_react.PureComponent);

Breadcrumbs.propTypes = {
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: function label() {
      return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
    },
    to: _propTypes2.default.string.isRequired,
    dataId: _propTypes2.default.string
  }).isRequired).isRequired,
  limit: _propTypes2.default.number,
  extra: function extra() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node) : _propTypes2.default.any).apply(this, arguments);
  },
  entryDataId: _propTypes2.default.string
};
Breadcrumbs.defaultProps = {
  limit: 2,
  extra: null
};
exports.default = Breadcrumbs;