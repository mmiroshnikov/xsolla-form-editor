'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _notification = require('../notification');

var _notification2 = _interopRequireDefault(_notification);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _input = require('../input');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var ActionButton = function (_PureComponent) {
  _inherits(ActionButton, _PureComponent);

  function ActionButton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ActionButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ActionButton.__proto__ || Object.getPrototypeOf(ActionButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = { text: null }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ActionButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          _props$appearance = _props.appearance,
          appearance = _props$appearance === undefined ? 'primary' : _props$appearance,
          _props$meta = _props.meta,
          meta = _props$meta === undefined ? { touched: false, error: null } : _props$meta,
          _props$disabled = _props.disabled,
          disabled = _props$disabled === undefined ? false : _props$disabled,
          extraLabel = _props.extraLabel,
          icon = _props.icon,
          type = _props.type,
          dataId = _props.dataId,
          onClick = _props.onClick,
          onChange = _props.onChange,
          placeholder = _props.placeholder;

      var notPrimary = appearance !== 'primary';
      var isInput = appearance === 'input';

      var elementType = {
        filled: 'div',
        input: 'input',
        primary: 'button'
      };

      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          'div',
          { className: cx('xsui-action-button__container') },
          _react2.default.createElement(elementType[appearance], {
            className: cx('xsui-action-button', 'xsui-action-button--appearance-' + appearance, disabled && 'xsui-action-button--disabled', meta.touched && meta.error && 'xsui-action-button--error'),
            type: type || isInput && 'text' || 'button',
            'data-id': dataId,
            onClick: notPrimary ? function () {
              return void 0;
            } : onClick,
            onChange: isInput ? function (event) {
              return onChange && onChange(event.target.value);
            } : function () {
              return void 0;
            },
            placeholder: isInput ? placeholder : null,
            value: isInput ? children : null,
            children: !isInput ? _react2.default.createElement(
              _react.Fragment,
              null,
              _react2.default.createElement(
                'div',
                { className: cx('xsui-action-button__entry') },
                children
              ),
              _react2.default.createElement(
                'div',
                { className: cx('xsui-action-button__right') },
                extraLabel && _react2.default.createElement(
                  'div',
                  { className: cx('xsui-action-button__extra') },
                  extraLabel
                ),
                icon && _react2.default.createElement(
                  'div',
                  { className: cx('xsui-action-button__icon') },
                  _react2.default.createElement(_icon2.default, {
                    name: icon,
                    hoverable: true,
                    onClick: notPrimary ? onClick : function () {
                      return void 0;
                    }
                  })
                )
              )
            ) : null
          }),
          isInput && _react2.default.createElement(
            'div',
            {
              className: cx('xsui-action-button__input-icon', disabled && 'xsui-action-button--disabled', meta.touched && meta.error && 'xsui-action-button__input-icon--error') },
            _react2.default.createElement(
              'div',
              { className: cx('xsui-action-button__right') },
              extraLabel && _react2.default.createElement(
                'div',
                { className: cx('xsui-action-button__extra') },
                extraLabel
              ),
              icon && _react2.default.createElement(
                'div',
                { className: cx('xsui-action-button__icon') },
                _react2.default.createElement(_icon2.default, {
                  name: icon,
                  hoverable: true,
                  onClick: notPrimary ? onClick : function () {
                    return void 0;
                  }
                })
              )
            )
          )
        ),
        meta.touched && meta.error && _react2.default.createElement(
          _notification2.default,
          { appearance: 'string', status: 'error' },
          meta.error
        )
      );
    }
  }]);

  return ActionButton;
}(_react.PureComponent);

ActionButton.propTypes = {
  children: function children() {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  appearance: _propTypes2.default.oneOf(['primary', 'filled', 'input']),
  meta: function meta() {
    return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta)).apply(this, arguments);
  },
  disabled: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  extraLabel: _propTypes2.default.string,
  type: _propTypes2.default.string,
  dataId: _propTypes2.default.string,
  onClick: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  placeholder: _propTypes2.default.string
};
exports.default = ActionButton;