'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactTippy = require('react-tippy');

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _bind2.default.bind(_style2.default);

var Tooltip = function Tooltip(_ref) {
  var label = _ref.label,
      offset = _ref.offset,
      children = _ref.children,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, ['label', 'offset', 'children', 'className']);

  return _react2.default.createElement(
    'div',
    { className: cx('xsui-tooltip', offset && 'xsui-tooltip--offset-' + offset, className) },
    _react2.default.createElement(
      _reactTippy.Tooltip,
      _extends({}, rest, { useContext: true, html: label, duration: 200 }),
      children
    )
  );
};

var flatMap = function flatMap(f, arr) {
  return arr.reduce(function (x, y) {
    return [].concat(_toConsumableArray(x), _toConsumableArray(f(y)));
  }, []);
};
var allowedPositions = flatMap(function (direction) {
  return [direction, direction + '-start', direction + '-end'];
}, ['bottom', 'right', 'left', 'top']);

Tooltip.propTypes = {
  children: _propTypes2.default.any,
  position: _propTypes2.default.oneOf(allowedPositions),
  label: _propTypes2.default.node.isRequired,
  offset: _propTypes2.default.oneOf([false, 'left', 'right']),
  distance: _propTypes2.default.number,
  arrow: _propTypes2.default.bool,
  trigger: _propTypes2.default.oneOf(['mouseenter', 'focus', 'click', 'manual']),
  hideOnClick: _propTypes2.default.bool,
  className: _propTypes2.default.string
};

Tooltip.defaultProps = {
  children: _react2.default.createElement('div', { className: cx('xsui-tooltip__button') }),
  position: 'top',
  offset: false,
  distance: 12,
  arrow: false,
  trigger: 'mouseenter',
  hideOnClick: false
};

exports.default = Tooltip;