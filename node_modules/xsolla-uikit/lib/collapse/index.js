'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactCollapse = require('react-collapse');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var CollapseWrapper = function (_PureComponent) {
  _inherits(CollapseWrapper, _PureComponent);

  function CollapseWrapper() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CollapseWrapper);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CollapseWrapper.__proto__ || Object.getPrototypeOf(CollapseWrapper)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpened: _this.props.isOpened
    }, _this.toggle = function () {
      return _this.setState({ isOpened: !_this.state.isOpened });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CollapseWrapper, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          staticElements = _props.staticElements,
          collapsedLabel = _props.collapsedLabel,
          expandedLabel = _props.expandedLabel,
          disabled = _props.disabled,
          _props$btnIconPositio = _props.btnIconPosition,
          btnIconPosition = _props$btnIconPositio === undefined ? 'start' : _props$btnIconPositio,
          showElementsInline = _props.showElementsInline,
          springConfig = _props.springConfig;

      var staticChildren = children.slice(0, staticElements);
      var dynamicChildren = children.slice(staticElements);
      var hasCollapsedInlineElements = showElementsInline && dynamicChildren.length > 0 && staticChildren.length > 0;

      return _react2.default.createElement(
        'div',
        {
          className: cx('xsui-collapse', showElementsInline && 'xsui-collapse--inline-elements', this.state.isOpened ? 'xsui-collapse--expanded' : 'xsui-collapse--collapsed') },
        staticChildren,
        hasCollapsedInlineElements && !this.state.isOpened && _react2.default.createElement(
          'span',
          null,
          '\u2026'
        ),
        dynamicChildren.length > 0 && _react2.default.createElement(
          _react.Fragment,
          null,
          _react2.default.createElement(
            _reactCollapse.Collapse,
            {
              isOpened: this.state.isOpened,
              onRest: this.onRest,
              springConfig: springConfig },
            _react2.default.createElement(
              'div',
              {
                className: cx('xsui-collapse__entry', showElementsInline && 'xsui-collapse__entry--show-elements-inline') },
              dynamicChildren
            )
          ),
          _react2.default.createElement(
            _button2.default,
            {
              appearance: 'flatten',
              onClick: this.toggle,
              disabled: disabled,
              reversed: btnIconPosition === 'end',
              icon: this.state.isOpened ? 'collapse' : 'expand' },
            this.state.isOpened ? expandedLabel(dynamicChildren.length) : collapsedLabel(dynamicChildren.length)
          )
        )
      );
    }
  }]);

  return CollapseWrapper;
}(_react.PureComponent);

CollapseWrapper.propTypes = {
  children: _propTypes2.default.arrayOf(function () {
    return (typeof React$Node === 'function' ? _propTypes2.default.instanceOf(React$Node).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  }),
  isOpened: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  staticElements: _propTypes2.default.number,
  collapsedLabel: _propTypes2.default.func,
  expandedLabel: _propTypes2.default.func,
  btnIconPosition: _propTypes2.default.oneOf(['start', 'end']),
  showElementsInline: _propTypes2.default.bool,
  springConfig: _propTypes2.default.shape({
    stiffness: _propTypes2.default.number,
    damping: _propTypes2.default.number,
    precision: _propTypes2.default.number
  })
};
CollapseWrapper.defaultProps = {
  children: [],
  isOpened: false,
  disabled: false,
  staticElements: 1,
  collapsedLabel: function collapsedLabel(count) {
    return count + ' more';
  },
  expandedLabel: function expandedLabel() {
    return 'Collapse';
  },
  showElementsInline: false,
  springConfig: { stiffness: 160, damping: 20, precision: 100 }
};
exports.default = CollapseWrapper;