'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _index = require('../../../../index');

var _constants = require('../constants');

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('../types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var DEFAULT_LOCK_MESSAGE = 'The request was sent. An Xsolla representative will contact you soon.';

var Step = function (_PureComponent) {
  _inherits(Step, _PureComponent);

  function Step() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Step);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Step.__proto__ || Object.getPrototypeOf(Step)).call.apply(_ref, [this].concat(args))), _this), _this.isContactType = function () {
      var step = _this.props.step;


      return step.type === _constants.INTEGRATION_GUIDE_STEP.CONTACT_XSOLLA;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Step, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          step = _props.step,
          stepNumber = _props.stepNumber,
          isActive = _props.isActive,
          onClick = _props.onClick;


      var hasUrl = !!step.url || step.id === _constants.MANUAL_LAST_STEP_ID;
      var needPointer = hasUrl || step.type === _constants.INTEGRATION_GUIDE_STEP.CONTACT_XSOLLA;
      var showArrow = isActive && hasUrl;
      var showDescription = isActive && step.description || this.isContactType();
      var description = step.contactLocked ? DEFAULT_LOCK_MESSAGE : step.description;

      return _react2.default.createElement(
        'div',
        {
          className: cx('xsui-upsell-step', needPointer && 'xsui-upsell-step--pointer', isActive && 'xsui-upsell-step--active', step.contactLocked && 'xsui-upsell-step--locked'),
          onClick: function (_onClick) {
            function onClick() {
              return _onClick.apply(this, arguments);
            }

            onClick.toString = function () {
              return _onClick.toString();
            };

            return onClick;
          }(function () {
            return onClick(step);
          }),
          'data-id': 'step-' + step.id },
        _react2.default.createElement(
          'div',
          { className: cx('xsui-upsell-step__content') },
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-step__heading') },
            _react2.default.createElement(
              'div',
              { className: cx('xsui-upsell-step__number') },
              stepNumber,
              '.'
            ),
            _react2.default.createElement(
              'p',
              { className: cx('xsui-upsell-step__title'), 'data-id': 'step-title' },
              step.title
            )
          ),
          showDescription && _react2.default.createElement(
            'p',
            { className: cx('xsui-upsell-step__description'), 'data-id': 'step-description' },
            description
          )
        ),
        showArrow && _react2.default.createElement(
          'div',
          { className: cx('xsui-upsell-step__arrow') },
          _react2.default.createElement(_index.Icon, { name: 'chevron', size: 22 })
        )
      );
    }
  }]);

  return Step;
}(_react.PureComponent);

Step.propTypes = {
  step: function step() {
    return (typeof _types.bpfrpt_proptype_StepType === 'function' ? _types.bpfrpt_proptype_StepType.isRequired ? _types.bpfrpt_proptype_StepType.isRequired : _types.bpfrpt_proptype_StepType : _propTypes2.default.shape(_types.bpfrpt_proptype_StepType).isRequired).apply(this, arguments);
  },
  stepNumber: _propTypes2.default.number.isRequired,
  isActive: _propTypes2.default.bool.isRequired,
  onClick: _propTypes2.default.func.isRequired
};
exports.default = Step;