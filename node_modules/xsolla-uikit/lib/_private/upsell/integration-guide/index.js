'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _index = require('../../../index');

var _constants = require('./constants');

var _step = require('./step');

var _step2 = _interopRequireDefault(_step);

var _errorMessage = require('./error-message');

var _errorMessage2 = _interopRequireDefault(_errorMessage);

var _upsellDropdown = require('../upsell-dropdown');

var _upsellDropdown2 = _interopRequireDefault(_upsellDropdown);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('./types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var IntegrationGuide = function (_PureComponent) {
  _inherits(IntegrationGuide, _PureComponent);

  function IntegrationGuide() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, IntegrationGuide);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = IntegrationGuide.__proto__ || Object.getPrototypeOf(IntegrationGuide)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isAssignedTo: false
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(IntegrationGuide, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          card = _props.card,
          onClose = _props.onClose,
          onFinishLater = _props.onFinishLater,
          onStepClick = _props.onStepClick,
          onRequestHelp = _props.onRequestHelp,
          activeStepID = _props.activeStepID,
          fetching = _props.fetching,
          error = _props.error,
          onRefresh = _props.onRefresh,
          className = _props.className,
          stepsRef = _props.stepsRef,
          assignToAM = _props.assignToAM,
          assignToColleague = _props.assignToColleague,
          hideCardLabel = _props.hideCardLabel,
          onAssignToColleague = _props.onAssignToColleague;


      if (fetching) {
        return _react2.default.createElement(
          'aside',
          { className: cx('xsui-upsell-integration-guide', className) },
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__close'), onClick: onClose },
            _react2.default.createElement(_index.Icon, { name: 'close', color: '#bdc9d2', size: 32 })
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__loader') },
            _react2.default.createElement(_index.Loader, { color: 'dark-gray' })
          )
        );
      }

      if (error) {
        return _react2.default.createElement(
          'aside',
          { className: cx('xsui-upsell-integration-guide', className) },
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__close'), onClick: onClose },
            _react2.default.createElement(_index.Icon, { name: 'close', color: '#bdc9d2', size: 32 })
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__loader') },
            _react2.default.createElement(_errorMessage2.default, { onRefresh: onRefresh })
          )
        );
      }

      if (!card) {
        return null;
      }

      return _react2.default.createElement(
        'aside',
        { className: cx('xsui-upsell-integration-guide', className) },
        _react2.default.createElement(
          'div',
          {
            className: cx('xsui-upsell-integration-guide__close'),
            onClick: onClose,
            'data-id': 'close-integration-guide' },
          _react2.default.createElement(_index.Icon, { name: 'close', color: '#fff', size: 32 })
        ),
        _react2.default.createElement('div', {
          className: cx('xsui-upsell-integration-guide__image'),
          style: { backgroundImage: 'url(' + card.imageUrl + ')' }
        }),
        _react2.default.createElement(
          'section',
          { className: cx('xsui-upsell-integration-guide__content') },
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__information') },
            _react2.default.createElement(
              'div',
              { className: cx('xsui-upsell-integration-guide__heading') },
              _react2.default.createElement(
                'h3',
                { className: cx('xsui-upsell-integration-guide__title') },
                card.title
              ),
              _react2.default.createElement(
                _upsellDropdown2.default,
                {
                  trigger: 'click',
                  align: 'left',
                  position: 'bottom',
                  size: 'md',
                  onRequestHelp: onRequestHelp,
                  onAssignToColleague: onAssignToColleague,
                  assignToAM: assignToAM,
                  assignToColleague: assignToColleague,
                  hideCardLabel: hideCardLabel },
                _react2.default.createElement(
                  'button',
                  { type: 'button', className: cx('xsui-upsell-integration-guide__assistance') },
                  'Request assistance ',
                  _react2.default.createElement(_index.Icon, { name: 'more', color: '#0076ff' })
                )
              ),
              _react2.default.createElement(
                'p',
                { className: cx('xsui-upsell-integration-guide__description') },
                card.description
              )
            ),
            _react2.default.createElement(
              'div',
              { className: cx('xsui-upsell-integration-guide__list') },
              _react2.default.createElement(
                'div',
                { className: cx('xsui-upsell-integration-guide__point-label') },
                _react2.default.createElement(
                  'h4',
                  { className: cx('xsui-upsell-integration-guide__label') },
                  'Setup steps'
                )
              ),
              _react2.default.createElement(
                'div',
                { className: cx('upsell-integration-guide__points'), ref: stepsRef },
                this.cardSteps.map(function (step, index) {
                  return _react2.default.createElement(_step2.default, {
                    key: step.id,
                    step: step,
                    stepNumber: index + 1,
                    isActive: step.id === activeStepID,
                    onClick: onStepClick
                  });
                })
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-upsell-integration-guide__footer') },
            _react2.default.createElement(
              _index.Button,
              { appearance: 'flatten', onClick: onFinishLater },
              _react2.default.createElement(
                'p',
                { className: cx('xsui-upsell-integration-guide__button-label') },
                'Finish Later'
              )
            )
          )
        )
      );
    }
  }, {
    key: 'cardSteps',
    get: function get() {
      var card = this.props.card;


      if (!card) {
        return [];
      }

      return [].concat(_toConsumableArray(card.steps), [{
        id: _constants.MANUAL_LAST_STEP_ID,
        title: 'Complete setup',
        description: null,
        url: null,
        isExternal: false,
        contactLocked: false,
        type: _constants.INTEGRATION_GUIDE_STEP.DEFAULT
      }]);
    }
  }]);

  return IntegrationGuide;
}(_react.PureComponent);

IntegrationGuide.propTypes = {
  card: function card() {
    return (typeof _types.bpfrpt_proptype_IntegrationGuideCardType === 'function' ? _types.bpfrpt_proptype_IntegrationGuideCardType : _propTypes2.default.shape(_types.bpfrpt_proptype_IntegrationGuideCardType)).apply(this, arguments);
  },
  onClose: _propTypes2.default.func.isRequired,
  onFinishLater: _propTypes2.default.func.isRequired,
  onStepClick: _propTypes2.default.func.isRequired,
  onRequestHelp: _propTypes2.default.func.isRequired,
  activeStepID: _propTypes2.default.number,
  fetching: _propTypes2.default.bool.isRequired,
  error: _propTypes2.default.bool.isRequired,
  onRefresh: _propTypes2.default.func.isRequired,
  className: _propTypes2.default.string,
  stepsRef: _propTypes2.default.func,
  assignToAM: function assignToAM() {
    return (typeof _upsellDropdown.bpfrpt_proptype_AssignToAM === 'function' ? _upsellDropdown.bpfrpt_proptype_AssignToAM.isRequired ? _upsellDropdown.bpfrpt_proptype_AssignToAM.isRequired : _upsellDropdown.bpfrpt_proptype_AssignToAM : _propTypes2.default.shape(_upsellDropdown.bpfrpt_proptype_AssignToAM).isRequired).apply(this, arguments);
  },
  assignToColleague: function assignToColleague() {
    return (typeof _upsellDropdown.bpfrpt_proptype_AssignToColleague === 'function' ? _upsellDropdown.bpfrpt_proptype_AssignToColleague.isRequired ? _upsellDropdown.bpfrpt_proptype_AssignToColleague.isRequired : _upsellDropdown.bpfrpt_proptype_AssignToColleague : _propTypes2.default.shape(_upsellDropdown.bpfrpt_proptype_AssignToColleague).isRequired).apply(this, arguments);
  },
  hideCardLabel: _propTypes2.default.string.isRequired,
  onAssignToColleague: _propTypes2.default.func.isRequired
};
exports.default = IntegrationGuide;