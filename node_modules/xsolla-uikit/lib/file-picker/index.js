'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _FilePicker$propTypes;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _validation = require('../messages/validation');

var _validation2 = _interopRequireDefault(_validation);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _input = require('../input');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var calcPercent = function calcPercent(from, to) {
  return Math.round(from / to * 100);
};

var FilePicker = function (_PureComponent) {
  _inherits(FilePicker, _PureComponent);

  function FilePicker() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FilePicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FilePicker.__proto__ || Object.getPrototypeOf(FilePicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      humanizeFileName: null,
      progress: 0,
      uploadError: null
    }, _this.validateFileSize = function (size) {
      return size <= _this.props.sizeLimit;
    }, _this.setHumanizeFileName = function (humanizeFileName) {
      return _this.setState({ humanizeFileName: humanizeFileName });
    }, _this.setProgress = function (progress) {
      return _this.setState({ progress: progress });
    }, _this.clearProgress = function () {
      return _this.setState({ progress: 0 });
    }, _this.setError = function (message) {
      _this.clearProgress();
      if (_this.state.humanizeFileName) {
        _this.setState({ uploadError: message });
      }
    }, _this.clearError = function () {
      return _this.setState({ uploadError: null });
    }, _this.uploadFile = function (file) {
      var _this$props = _this.props,
          input = _this$props.input,
          requestConfig = _this$props.requestConfig,
          responseGetter = _this$props.responseGetter;

      _this.setProgress(1);

      var formData = new FormData();
      formData.append(requestConfig.field, file);

      return _axios2.default.post(requestConfig.url, formData, {
        headers: { 'content-type': 'multipart/form-data' },
        onUploadProgress: function onUploadProgress(e) {
          return _this.setProgress(calcPercent(e.loaded * 0.95, e.total));
        }
        // -5% for api pending
      }).then(function (response) {
        input.onChange({ target: { value: responseGetter(response.data) } });
        _this.setProgress(100);
      }).catch(function (error) {
        _this.setError(error.response && error.response.data ? error.response.data.message : 'Error');
      });
    }, _this.handleChange = function (e) {
      _this.clearError();

      if (!e.target.files.length) {
        return false;
      }

      var _this$props2 = _this.props,
          intl = _this$props2.intl,
          sizeLimit = _this$props2.sizeLimit;

      var file = e.target.files[0];

      if (!_this.validateFileSize(file.size)) {
        return _this.setError(intl.formatMessage(_messages2.default.fileTooBig, { count: 1, size: sizeLimit / 1000000 + ' MB' }));
      }

      _this.setHumanizeFileName(file.name);

      return _this.uploadFile(file);
    }, _this.handleClear = function () {
      _this.setHumanizeFileName(null);
      _this.clearProgress();
      _this.clearError();
      _this.props.input.onChange({ target: { value: null } });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FilePicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          input = _props.input,
          meta = _props.meta,
          accept = _props.accept,
          disabled = _props.disabled;


      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          {
            className: cx('xsui-file-picker', input.value && 'xsui-file-picker--filled', this.isUploading && 'xsui-file-picker--uploading', disabled && 'xsui-file-picker--disabled', (this.state.uploadError || meta.touched && meta.error) && 'xsui-file-picker--error') },
          !this.isUploading && _react2.default.createElement(
            'label',
            { className: cx('xsui-file-picker__input') },
            _react2.default.createElement('input', { type: 'file', accept: accept.join(','), onChange: this.handleChange })
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-file-picker__icon') },
            this.state.humanizeFileName ? _react2.default.createElement(_icon2.default, {
              name: this.isUploading ? 'circle-remove-mini' : 'delete',
              hoverable: true,
              onClick: this.handleClear
            }) : _react2.default.createElement(_icon2.default, { name: 'upload' })
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-file-picker__label') },
            this.state.humanizeFileName || 'Upload file'
          ),
          this.isUploading && _react2.default.createElement('div', {
            className: cx('xsui-file-picker__progress'),
            style: { width: this.state.progress + '%' }
          })
        ),
        this.state.uploadError && _react2.default.createElement(
          _validation2.default,
          null,
          this.state.uploadError
        ),
        meta.touched && meta.error && _react2.default.createElement(
          _validation2.default,
          null,
          meta.error
        )
      );
    }
  }, {
    key: 'isUploading',
    get: function get() {
      return !!this.state.humanizeFileName && this.state.progress > 0 && this.state.progress < 100;
    }
  }]);

  return FilePicker;
}(_react.PureComponent);

FilePicker.propTypes = (_FilePicker$propTypes = {
  meta: function meta() {
    return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta)).apply(this, arguments);
  },
  responseGetter: _propTypes2.default.func,
  accept: _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired),
  sizeLimit: _propTypes2.default.number,
  disabled: _propTypes2.default.bool,
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  input: function input() {
    return (typeof _input.bpfrpt_proptype_InputType === 'function' ? _input.bpfrpt_proptype_InputType.isRequired ? _input.bpfrpt_proptype_InputType.isRequired : _input.bpfrpt_proptype_InputType : _propTypes2.default.shape(_input.bpfrpt_proptype_InputType).isRequired).apply(this, arguments);
  },
  requestConfig: _propTypes2.default.shape({
    url: _propTypes2.default.string.isRequired,
    field: _propTypes2.default.string.isRequired
  }).isRequired
}, _defineProperty(_FilePicker$propTypes, 'responseGetter', _propTypes2.default.func), _defineProperty(_FilePicker$propTypes, 'meta', function meta() {
  return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta)).apply(this, arguments);
}), _defineProperty(_FilePicker$propTypes, 'accept', _propTypes2.default.arrayOf(_propTypes2.default.string.isRequired)), _defineProperty(_FilePicker$propTypes, 'sizeLimit', _propTypes2.default.number), _defineProperty(_FilePicker$propTypes, 'disabled', _propTypes2.default.bool), _FilePicker$propTypes);
FilePicker.defaultProps = {
  meta: { touched: false, error: null },
  responseGetter: function responseGetter(data) {
    return data;
  },
  accept: [],
  sizeLimit: 1000000,
  disabled: false
};
exports.default = (0, _reactIntl.injectIntl)(FilePicker);