'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var Pagination = function (_PureComponent) {
  _inherits(Pagination, _PureComponent);

  function Pagination() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call.apply(_ref, [this].concat(args))), _this), _this.handleControl = function (direction) {
      if (direction === 'prev') {
        return _this.props.onChangePage(_this.props.current - 1);
      }

      return _this.props.onChangePage(_this.props.current + 1);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pagination, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        { className: cx('pagination', 'pagination--size-' + this.props.size) },
        _react2.default.createElement(
          'div',
          { className: cx('pagination_buttons') },
          _react2.default.createElement(
            'div',
            {
              className: cx('pagination_item', 'pagination_item-nav', this.props.current <= 1 && 'pagination_item--disabled'),
              onClick: this.handleControl.bind(this, 'prev') },
            _react2.default.createElement(_icon2.default, { name: 'chevron-reverse' })
          ),
          _react2.default.createElement(
            'div',
            {
              className: cx('pagination_item', 'pagination_item-nav', this.props.current >= this.pageCount && 'pagination_item--disabled'),
              onClick: this.handleControl.bind(this, 'next') },
            _react2.default.createElement(_icon2.default, { name: 'chevron' })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: cx('pagination_container') },
          this.pages.map(function (page, index) {
            return (0, _react.createElement)(_this2.props.renderItem, {
              key: 'pagination-page--' + index,
              className: cx('pagination_item', page.current && 'pagination_item--current', page.disabled && 'pagination_item--disabled'),
              onClick: _this2.props.onChangePage.bind(_this2, parseInt(page.value)),
              children: page.value
            });
          })
        )
      );
    }
  }, {
    key: 'pageCount',
    get: function get() {
      return Math.ceil(this.props.total / this.props.perPage);
    }
  }, {
    key: 'pages',
    get: function get() {
      var _this3 = this;

      var visibleItems = 7;
      var delta = 2;

      if (this.props.current + delta >= this.pageCount - 1) {
        delta = this.props.current + visibleItems - this.pageCount - 1;
      }

      if (this.props.current < visibleItems - delta) {
        delta = visibleItems - this.props.current;
      }

      var range = [];

      if (this.pageCount > visibleItems) {
        for (var i = Math.max(2, this.props.current - delta); i <= Math.min(this.pageCount - 1, this.props.current + delta); i++) {
          range.push(i);
        }

        var deltaStart = this.props.current - delta - 2;
        var deltaEnd = this.pageCount - 1 - this.props.current - delta;

        if (deltaStart > 0) {
          range.unshift(deltaStart === 1 ? deltaStart + 1 : '...');
        }

        if (deltaEnd > 0) {
          range.push(deltaEnd === 1 ? this.pageCount - 1 : '...');
        }

        range.unshift(1);
        range.push(this.pageCount);
      } else {
        for (var _i = 1; _i <= this.pageCount; _i++) {
          range.push(_i);
        }
      }

      return range.map(function (page) {
        return {
          value: page,
          current: page === _this3.props.current,
          disabled: isNaN(page)
        };
      });
    }
  }]);

  return Pagination;
}(_react.PureComponent);

Pagination.propTypes = {
  current: _propTypes2.default.number.isRequired,
  total: _propTypes2.default.number.isRequired,
  perPage: _propTypes2.default.number.isRequired,
  size: _propTypes2.default.oneOf(['sm', 'md']),
  renderItem: _propTypes2.default.func,
  onChangePage: _propTypes2.default.func
};
Pagination.defaultProps = {
  size: 'md',
  renderItem: function renderItem(props) {
    return _react2.default.createElement('div', props);
  },
  onChangePage: function onChangePage() {
    return void 0;
  }
};
exports.default = Pagination;