'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _formFooter = require('../form-footer');

var _formFooter2 = _interopRequireDefault(_formFooter);

var _modalAlert = require('../modal-alert');

var _modalAlert2 = _interopRequireDefault(_modalAlert);

var _button = require('../button');

var _button2 = _interopRequireDefault(_button);

var _formGroup = require('../form-group');

var _formGroup2 = _interopRequireDefault(_formGroup);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _select = require('../select');

var _select2 = _interopRequireDefault(_select);

var _head = require('../head');

var _head2 = _interopRequireDefault(_head);

var _checkbox = require('../checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _textarea = require('../textarea');

var _textarea2 = _interopRequireDefault(_textarea);

var _imagePicker = require('../image-picker');

var _imagePicker2 = _interopRequireDefault(_imagePicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Row = function Row(_ref) {
  var children = _ref.children,
      title = _ref.title;
  return _react2.default.createElement(
    'div',
    { className: 'example__row' },
    _react2.default.createElement(
      'div',
      { className: 'example__col' },
      _react2.default.createElement(
        'h4',
        null,
        title
      )
    ),
    children
  );
};

Row.propTypes = {
  children: _propTypes2.default.any,
  title: _propTypes2.default.string
};

var ModalExample = function (_PureComponent) {
  _inherits(ModalExample, _PureComponent);

  function ModalExample() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ModalExample);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ModalExample.__proto__ || Object.getPrototypeOf(ModalExample)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      isFormModalOpen: false,
      isFormModalFetching: false,
      isFormModalSubmitted: false,
      isAlertModalOpen: false,
      isAlertModalFetching: true,
      isConfirmModalOpen: false,
      isConfirmWithInputModalOpen: false,
      isConfirmWithCheckboxModalOpen: false
    }, _this.toggleValue = function () {
      return _this.setState({ value: !_this.state.value });
    }, _this.toggleFetching = function () {
      return setTimeout(function () {
        return _this.setState({ isAlertModalFetching: false });
      }, 1000);
    }, _this.promiseRequest = function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve(true);
        }, 1000);
      });
    }, _this.closeModal = function (modalKey) {
      return _this.setState(_defineProperty({}, modalKey, false));
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ModalExample, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          isFormModalOpen = _state.isFormModalOpen,
          isAlertModalOpen = _state.isAlertModalOpen,
          isConfirmModalOpen = _state.isConfirmModalOpen,
          isConfirmWithInputModalOpen = _state.isConfirmWithInputModalOpen,
          isConfirmWithCheckboxModalOpen = _state.isConfirmWithCheckboxModalOpen;


      return _react2.default.createElement(
        _react.Fragment,
        null,
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Regular form' },
          _react2.default.createElement(
            _button2.default,
            { onClick: function onClick() {
                return _this2.setState({ isFormModalOpen: true });
              } },
            'Show'
          ),
          _react2.default.createElement(
            _index2.default,
            {
              isOpen: isFormModalOpen,
              onClose: function onClose() {
                return _this2.setState({ isFormModalOpen: false, isFormModalSubmitted: false });
              } },
            _react2.default.createElement(
              'form',
              {
                onSubmit: function onSubmit(e) {
                  e.preventDefault();
                  console.log('regular form submit'); // eslint-disable-line
                } },
              _react2.default.createElement(
                _head2.default,
                null,
                'Regular form'
              ),
              _react2.default.createElement(
                _formGroup2.default,
                { label: 'Image', tooltip: 'Image' },
                _react2.default.createElement(_imagePicker2.default, {
                  name: 'image',
                  input: { value: null, onChange: function onChange() {
                      return _this2.setState({ value: null });
                    } },
                  url: '/'
                })
              ),
              _react2.default.createElement(
                _formGroup2.default,
                { label: 'Not edit field' },
                _react2.default.createElement(_input2.default, { input: { name: 'input', value: 'Default value', onChange: function onChange() {
                      return void 0;
                    } } })
              ),
              _react2.default.createElement(
                _formGroup2.default,
                { label: 'Simple select' },
                _react2.default.createElement(_select2.default, {
                  input: { name: 'select', value: null, onChange: function onChange() {
                      return void 0;
                    } },
                  options: [{ label: 'First value', extraLabel: 'ID01', value: 1 }, { label: 'Two value', extraLabel: 'ID02', value: 1 }]
                })
              ),
              _react2.default.createElement(
                _formFooter2.default,
                { sticky: true },
                _react2.default.createElement(
                  _button2.default,
                  { appearance: 'outline', onClick: function onClick() {
                      return _this2.closeModal('isFormModalOpen');
                    } },
                  'Discard'
                ),
                _react2.default.createElement(
                  _button2.default,
                  { type: 'submit', onClick: function onClick() {
                      return _this2.closeModal('isFormModalOpen');
                    } },
                  'Save changes'
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Alert' },
          _react2.default.createElement(
            _button2.default,
            {
              onClick: function onClick() {
                _this2.setState({ isAlertModalOpen: true, isAlertModalFetching: true });
                _this2.toggleFetching();
              } },
            'Show'
          ),
          _react2.default.createElement(_modalAlert2.default, {
            fetching: this.state.isAlertModalFetching,
            title: 'Success alert',
            description: 'The keys you requested are successfully sent. Please\xA0check email.',
            discard: 'Thanks, dismiss',
            icon: require('./../_icons/checkmark-in-circle.svg'),
            isOpen: isAlertModalOpen,
            onClose: function onClose() {
              return _this2.setState({ isAlertModalOpen: false, isAlertModalFetching: false });
            }
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Confirm' },
          _react2.default.createElement(
            _button2.default,
            {
              onClick: function onClick() {
                _this2.setState({ isConfirmModalOpen: true });
                _this2.toggleFetching();
              } },
            'Show'
          ),
          _react2.default.createElement(_modalAlert2.default, {
            title: 'Delete keys',
            description: 'This action cannot be undone. Are you sure you want to delete all keys?',
            discard: 'Nevermind',
            submit: 'Yes, delete keys',
            submitAppearance: 'alert',
            icon: require('./../_icons/alert--yellow.svg'),
            onClose: function onClose() {
              return _this2.setState({ isConfirmModalOpen: false });
            },
            isOpen: isConfirmModalOpen,
            onSubmit: function onSubmit() {
              return console.log('Confirmed!');
            } // eslint-disable-line
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Confirm with checkbox' },
          _react2.default.createElement(
            _button2.default,
            {
              onClick: function onClick() {
                _this2.setState({ isConfirmWithCheckboxModalOpen: true });
                _this2.toggleFetching();
              } },
            'Show'
          ),
          _react2.default.createElement(_modalAlert2.default, {
            title: 'Data may be lost',
            description: 'If you change your secret key or Webhook URL. Do you want to proceed?',
            discard: 'Discard',
            submit: 'Proceed',
            submitAppearance: 'alert',
            confirmationHandler: this.promiseRequest,
            confirmationEl: function confirmationEl(_ref3) {
              var value = _ref3.value,
                  _onChange = _ref3.onChange;
              return _react2.default.createElement(
                _formGroup2.default,
                { centered: true },
                _react2.default.createElement(_checkbox2.default, {
                  input: {
                    value: value,
                    onChange: function onChange(e) {
                      return _onChange(e.target.value !== 'true');
                    }
                  },
                  label: 'Yes, I understand effect'
                })
              );
            },
            icon: require('./../_icons/alert--red.svg'),
            isOpen: isConfirmWithCheckboxModalOpen,
            onClose: function onClose() {
              return _this2.setState({ isConfirmWithCheckboxModalOpen: false });
            },
            onSubmit: function onSubmit() {
              return console.log('Confirmed!');
            } // eslint-disable-line
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Confirm with input' },
          _react2.default.createElement(
            _button2.default,
            {
              onClick: function onClick() {
                _this2.setState({ isConfirmWithInputModalOpen: true });
                _this2.toggleFetching();
              } },
            'Show'
          ),
          _react2.default.createElement(_modalAlert2.default, {
            title: 'Data may be lost',
            description: 'This action cannot be undone. Please provide a reason for deleting.',
            discard: 'Discard',
            submit: 'Delete items',
            submitAppearance: 'alert',
            confirmationEl: function confirmationEl(_ref4) {
              var _onChange2 = _ref4.onChange;
              return _react2.default.createElement(
                _formGroup2.default,
                null,
                _react2.default.createElement(_textarea2.default, {
                  rows: 5,
                  input: {
                    onChange: function onChange(e) {
                      return _onChange2(e.target.value);
                    }
                  }
                })
              );
            },
            icon: require('./../_icons/alert--red.svg'),
            onClose: function onClose() {
              return _this2.setState({ isConfirmWithInputModalOpen: false });
            },
            isOpen: isConfirmWithInputModalOpen,
            onSubmit: function onSubmit(value) {
              return console.log('Confirmed, value: ' + value);
            } // eslint-disable-line
          })
        )
      );
    }
  }]);

  return ModalExample;
}(_react.PureComponent);

exports.default = ModalExample;