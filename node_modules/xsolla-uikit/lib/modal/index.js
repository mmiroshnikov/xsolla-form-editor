'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactPortal = require('react-portal');

var _contentBlock = require('../content-block');

var _contentBlock2 = _interopRequireDefault(_contentBlock);

var _loader = require('../loader');

var _loader2 = _interopRequireDefault(_loader);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var Overlay = function Overlay() {
  return React.createElement('div', { className: cx('xsui-modal__overlay') });
};

var Modal = function (_React$PureComponent) {
  _inherits(Modal, _React$PureComponent);

  function Modal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      waiting: true
    }, _this.initialModal = function () {
      if (document.body) {
        var scrollbarWidth = window.innerWidth - document.body.clientWidth;
        document.body.style.paddingRight = scrollbarWidth + 'px';
        document.body.style.overflowY = 'hidden';
        document.body.addEventListener('keydown', _this.closeOnEscPress);

        _this.timer = window.setTimeout(function () {
          _this.setState({ waiting: false });
        });
      }
    }, _this.clearModal = function () {
      if (document.body) {
        document.body.style.paddingRight = '';
        document.body.style.overflowY = '';
        document.body.removeEventListener('keydown', _this.closeOnEscPress);

        window.clearTimeout(_this.timer);
      }
    }, _this.handleClose = function () {
      var onClose = _this.props.onClose;

      _this.modal && _this.modal.classList.add(cx('xsui-modal--hidden'));

      onClose();
    }, _this.closeOnEscPress = function (e) {
      if (e.keyCode === 27) {
        _this.handleClose();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Modal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.isOpen) {
        this.initialModal();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.isOpen !== prevProps.isOpen) {
        if (this.props.isOpen) {
          this.initialModal();
        } else {
          this.clearModal();
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.clearModal();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          size = _props.size,
          fetching = _props.fetching,
          hideCloseBtn = _props.hideCloseBtn,
          isOpen = _props.isOpen,
          modalClassName = _props.modalClassName;


      if (!isOpen || this.state.waiting) {
        return null;
      }

      return React.createElement(
        _reactPortal.Portal,
        null,
        React.createElement(
          'div',
          {
            ref: function ref(modal) {
              return _this2.modal = modal;
            },
            className: cx('xsui-modal', 'xsui-modal--size-' + size, fetching && 'xsui-modal--fetching', modalClassName) },
          React.createElement(Overlay, null),
          fetching && React.createElement(_loader2.default, { size: 'xlg', fullscreen: true, color: 'white' }),
          React.createElement(
            'div',
            { className: cx('xsui-modal__entry') },
            !hideCloseBtn && React.createElement('div', {
              className: cx('xsui-modal__close'),
              onClick: this.handleClose,
              'data-id': 'close_modal'
            }),
            React.createElement(
              _contentBlock2.default,
              { appearance: 'modal' },
              children
            )
          )
        )
      );
    }
  }]);

  return Modal;
}(React.PureComponent);

Modal.propTypes = {
  children: _propTypes2.default.node.isRequired,
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg', 'xlg']),
  fetching: _propTypes2.default.bool,
  onClose: _propTypes2.default.func,
  hideCloseBtn: _propTypes2.default.bool,
  isOpen: _propTypes2.default.bool,
  modalClassName: _propTypes2.default.string
};
Modal.defaultProps = {
  size: 'md',
  fetching: false,
  onClose: function onClose() {
    return void 0;
  },
  hideCloseBtn: false,
  isOpen: false,
  modalClassName: ''
};
exports.default = Modal;