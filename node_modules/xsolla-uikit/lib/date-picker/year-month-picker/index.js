'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _select = require('../../select');

var _select2 = _interopRequireDefault(_select);

var _icon = require('../../icon');

var _icon2 = _interopRequireDefault(_icon);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var YearMonthPicker = function (_PureComponent) {
  _inherits(YearMonthPicker, _PureComponent);

  function YearMonthPicker() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, YearMonthPicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = YearMonthPicker.__proto__ || Object.getPrototypeOf(YearMonthPicker)).call.apply(_ref, [this].concat(args))), _this), _this.getCurrentYear = function (date) {
      return date ? date.getUTCFullYear() : 2020;
    }, _this.getCurrentMonths = function (date) {
      return date ? date.getMonth() : 1;
    }, _this.now = new Date(), _this.yearRange = function (now) {
      return Array(now - (now - 20)).fill(0).map(function (_, index) {
        return {
          label: now - index,
          value: now - index
        };
      });
    }, _this.months = Array.from({ length: 12 }, function (e, i) {
      return {
        label: new Date(0, i + 1, 0).toLocaleDateString('en-US', { month: 'long' }),
        value: i
      };
    }), _this.handleChange = function (type, value) {
      var currentDate = _this.props.value || new Date();

      _this.props.onChange(new Date(currentDate.setMilliseconds(1)));

      switch (type) {
        case 'years':
          setTimeout(function () {
            _this.props.onChange(new Date(currentDate.setFullYear(value)));
          });
          break;
        case 'months':
          setTimeout(function () {
            _this.props.onChange(new Date(currentDate.setMonth(value)));
          });
          break;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(YearMonthPicker, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: cx('xsui-datepicker-year-monthpicker') },
        _react2.default.createElement(_select2.default, {
          input: {
            name: 'time',
            value: this.getCurrentYear(this.props.value),
            onChange: this.handleChange.bind(this, 'years')
          },
          options: this.yearRange(this.now.getUTCFullYear()),
          size: 'sm',
          disabled: this.props.disabled,
          disabledLimitationMinWidth: true,
          style: { width: 116 }
        }),
        _react2.default.createElement(_select2.default, {
          input: {
            name: 'time',
            value: this.getCurrentMonths(this.props.value),
            onChange: this.handleChange.bind(this, 'months')
          },
          options: this.months,
          size: 'sm',
          disabled: this.props.disabled,
          disabledLimitationMinWidth: true,
          style: { width: 116 }
        }),
        _react2.default.createElement(
          'div',
          { className: cx('xsui-datepicker-year-monthpicker__icon') },
          _react2.default.createElement(_icon2.default, { name: 'calendar', color: '#747e8a' })
        )
      );
    }
  }]);

  return YearMonthPicker;
}(_react.PureComponent);

YearMonthPicker.propTypes = {
  value: function value(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  },
  onChange: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool
};
exports.default = YearMonthPicker;