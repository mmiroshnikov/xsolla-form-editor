'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _reactTransitionGroup = require('react-transition-group');

var _datePicker = require('../date-picker');

var _datePicker2 = _interopRequireDefault(_datePicker);

var _timePicker = require('../date-picker/time-picker');

var _timePicker2 = _interopRequireDefault(_timePicker);

var _classNames = require('../date-picker/classNames');

var _classNames2 = _interopRequireDefault(_classNames);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _messages3 = require('../date-picker/messages');

var _messages4 = _interopRequireDefault(_messages3);

var _yearMonthPicker = require('../date-picker/year-month-picker');

var _yearMonthPicker2 = _interopRequireDefault(_yearMonthPicker);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DatePickerInput = function (_PureComponent) {
  _inherits(DatePickerInput, _PureComponent);

  function DatePickerInput() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DatePickerInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DatePickerInput.__proto__ || Object.getPrototypeOf(DatePickerInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false,
      hoveredDay: null,
      time: null
    }, _this.toggleVisible = function () {
      return _this.setState({ visible: !_this.state.visible });
    }, _this.setHoveredDay = function (day) {
      return _this.setState({ hoveredDay: day });
    }, _this.handleClickOutside = function () {
      return _this.setState({ visible: false });
    }, _this.handleDayClick = function (date) {
      if (!_this.props.pickTime) {
        _this.toggleVisible();
      }

      return _this.props.input.onChange(date);
    }, _this.humanizeOutputValue = function (value) {
      if (!value) {
        return '';
      }

      if (!_this.props.pickTime) {
        return _this.props.intl.formatDate(value);
      }

      return [_this.props.intl.formatDate(value), _this.props.intl.formatDate(value, { hour: 'numeric', minute: 'numeric' })].join(' ');
    }, _this.actions = [_this.props.visibleClearButton && {
      label: _this.props.intl.formatMessage(_messages4.default.clear),
      onClick: function onClick() {
        _this.handleDayClick(null);
        _this.toggleVisible();
      }
    }, _this.props.pickTime && {
      label: _this.props.intl.formatMessage(_messages4.default.apply),
      forceAlignRight: true,
      onClick: _this.toggleVisible
    }].filter(function (a) {
      return a;
    }), _temp), _possibleConstructorReturn(_this, _ret);
  } // eslint-disable-line

  /**
   * Handle click on date
   * @param {Date} date
   * @return {void}
   */


  /**
   * Return humanized value
   * @param {Date} value
   * @return {string}
   */


  _createClass(DatePickerInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          intl = _props.intl,
          input = _props.input,
          meta = _props.meta,
          size = _props.size,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          pickTime = _props.pickTime,
          pickMonth = _props.pickMonth,
          disabledPickTime = _props.disabledPickTime,
          customInput = _props.customInput,
          timePickerProps = _props.timePickerProps,
          datePickerRestProps = _objectWithoutProperties(_props, ['intl', 'input', 'meta', 'size', 'placeholder', 'disabled', 'pickTime', 'pickMonth', 'disabledPickTime', 'customInput', 'timePickerProps']);

      var requiredInputProps = {
        input: {
          name: input.name,
          value: this.humanizeOutputValue(input.value),
          onChange: function onChange() {
            return void 0;
          }
        },
        meta: meta,
        size: size,
        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
        disabled: disabled,
        focused: this.state.visible,
        onClick: this.toggleVisible
      };

      return _react2.default.createElement(
        'div',
        { style: { position: 'relative', display: 'inline-block' } },
        customInput ? (0, _react.cloneElement)(customInput(_extends({}, requiredInputProps, { raw: input.value, intl: intl }))) : _react2.default.createElement(_input2.default, _extends({}, requiredInputProps, {
          icon: 'calendar',
          offset: 'left-separated',
          inline: true,
          readOnly: true
        })),
        _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          this.state.visible && _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 100 },
            _react2.default.createElement(_datePicker2.default, _extends({}, datePickerRestProps, {
              initialMonth: input.value || new Date(),
              modifiers: _defineProperty({}, _classNames2.default.start, input.value),
              onDayClick: this.handleDayClick,
              monthPicker: pickMonth && _react2.default.createElement(_yearMonthPicker2.default, _extends({
                value: input.value,
                onChange: input.onChange,
                disabled: disabledPickTime
              }, timePickerProps)),
              timePicker: pickTime && _react2.default.createElement(_timePicker2.default, _extends({
                value: input.value,
                onChange: input.onChange,
                disabled: disabledPickTime
              }, timePickerProps)),
              actions: this.actions
            }))
          )
        )
      );
    }
  }]);

  return DatePickerInput;
}(_react.PureComponent);

DatePickerInput.propTypes = Object.assign({}, _input.bpfrpt_proptype_Props === _propTypes2.default.any ? {} : _input.bpfrpt_proptype_Props, _datePicker.bpfrpt_proptype_DatePickerType === _propTypes2.default.any ? {} : _datePicker.bpfrpt_proptype_DatePickerType, {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  pickTime: _propTypes2.default.bool,
  pickMonth: _propTypes2.default.bool,
  disabledPickTime: _propTypes2.default.bool,
  customInput: _propTypes2.default.func,
  visibleClearButton: _propTypes2.default.bool.isRequired,
  timePickerProps: function timePickerProps() {
    return (typeof _timePicker.bpfrpt_proptype_TimePickerProps === 'function' ? _timePicker.bpfrpt_proptype_TimePickerProps : _propTypes2.default.shape(_timePicker.bpfrpt_proptype_TimePickerProps)).apply(this, arguments);
  }
});
DatePickerInput.defaultProps = {
  size: 'sm',
  pickTime: false,
  pickMonth: false,
  disabledPickTime: false,
  visibleClearButton: false
};
exports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(DatePickerInput));