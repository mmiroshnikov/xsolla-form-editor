'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactOnclickoutside = require('react-onclickoutside');

var _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);

var _reactTransitionGroup = require('react-transition-group');

var _index = require('../input/index');

var _index2 = _interopRequireDefault(_index);

var _entries = require('./entries');

var _entries2 = _interopRequireDefault(_entries);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _inputTag = require('../input-tag');

var _inputTag2 = _interopRequireDefault(_inputTag);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var TreeSelect = function (_Component) {
  _inherits(TreeSelect, _Component);

  function TreeSelect() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TreeSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TreeSelect.__proto__ || Object.getPrototypeOf(TreeSelect)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      visible: false,
      position: 'bottom'
    }, _this.dropdownRef = null, _this.setDropdownRef = function (ref) {
      _this.dropdownRef = ref;
    }, _this.toggleVisible = function () {
      return _this.setState({ visible: !_this.state.visible });
    }, _this.handleClickOutside = function () {
      if (_this.state.visible) {
        _this.setState({ visible: false });
      }
    }, _this.handleChange = function (option) {
      var ignoreFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _this$props = _this.props,
          input = _this$props.input,
          allowMultiSelect = _this$props.allowMultiSelect,
          allowSelectNestedFolder = _this$props.allowSelectNestedFolder;

      var findIndex = input.value.findIndex(function (a) {
        return a.id === option.id;
      });

      if (!allowSelectNestedFolder && option.options && option.options.length) {
        return;
      }

      if (!allowMultiSelect) {
        _this.toggleVisible();
      }

      if (findIndex > -1) {
        !ignoreFound && input.value.splice(findIndex, 1);
      } else {
        allowMultiSelect ? input.value.push(option) : input.value = [option];
      }

      input.onChange(input.value);
      return _this.forceUpdate();
    }, _this.handleSelectAll = function () {
      var recursiveEach = function recursiveEach(options) {
        return options.forEach(function (option) {
          option.options && recursiveEach(option.options);
          !option.disabled && _this.handleChange(option, true);
        });
      };

      recursiveEach(_this.props.options);
    }, _this.handleUnselectAll = function () {
      _this.props.input.onChange([]);
      return _this.forceUpdate();
    }, _this.checkedSelectedItems = function (options) {
      return options.map(function (option) {
        return _extends({}, option, {
          options: option.options && _this.checkedSelectedItems(option.options),
          checked: !!_this.props.input.value.find(function (a) {
            return a.id === option.id;
          })
        });
      });
    }, _this.determineDropdownPosition = function () {
      _this.setState({ position: !(0, _utils.visibleInPage)(_this.dropdownRef) ? 'top' : 'bottom' });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Handle change item
   * @param option
   * @param ignoreFound
   */


  /**
   * Unselect all items
   */


  /**
   * Checked selected items
   * @param options
   * @returns Array
   */


  _createClass(TreeSelect, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(_, prevState) {
      if (prevState.visible !== this.state.visible) {
        this.determineDropdownPosition();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          intl = _props.intl,
          input = _props.input,
          meta = _props.meta,
          options = _props.options,
          name = _props.name,
          size = _props.size,
          allowMultiSelect = _props.allowMultiSelect,
          allowSelectNestedFolder = _props.allowSelectNestedFolder,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          kind = _props.kind;


      if (!input.value) {
        input.value = [];
      }

      var entries = this.checkedSelectedItems(options);

      var commonProps = {
        meta: meta,
        size: size,
        offset: 'right',
        focused: this.state.visible,
        disabled: disabled,
        icon: 'dropdown-select',
        readOnly: true,
        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
        onClick: this.toggleVisible
      };

      return _react2.default.createElement(
        'div',
        { className: cx('xsui-tree-select') },
        kind === 'count' && _react2.default.createElement(_index2.default, _extends({
          input: {
            name: '',
            value: intl.formatMessage(_messages2.default.selectedItems, {
              count: input.value.length
            }),
            onChange: function onChange() {}
          }
        }, commonProps)),
        kind === 'plain' && _react2.default.createElement(_index2.default, _extends({
          input: {
            name: input.name || name,
            value: input.value.map(function (a) {
              return a.label;
            }).join(', '),
            onChange: function onChange() {
              return void 0;
            }
          }
        }, commonProps)),
        kind === 'tags' && _react2.default.createElement(_inputTag2.default, _extends({
          name: input.name || name,
          hideInput: true,
          fields: {
            getAll: function getAll() {
              return input.value.map(function (tag) {
                return tag.label;
              });
            },
            push: function push(newTag) {
              return input.onChange([].concat(_toConsumableArray(input.value), [newTag]));
            },
            remove: function remove(tagIndex) {
              var nextTags = [].concat(_toConsumableArray(input.value));
              nextTags.splice(tagIndex, 1);
              input.onChange(nextTags);
            }
          }
        }, commonProps)),
        _react2.default.createElement(
          _reactTransitionGroup.TransitionGroup,
          null,
          this.state.visible && _react2.default.createElement(
            _reactTransitionGroup.CSSTransition,
            { classNames: 'slide-transition', timeout: 100 },
            _react2.default.createElement(
              'div',
              {
                ref: this.setDropdownRef,
                className: cx('xsui-tree-select__container', 'xsui-tree-select__container--position-' + this.state.position) },
              _react2.default.createElement(_entries2.default, {
                value: input.value,
                options: entries,
                allowMultiSelect: allowMultiSelect,
                allowSelectNestedFolder: allowSelectNestedFolder,
                handleChange: this.handleChange,
                handleSelectAll: this.handleSelectAll,
                handleUnselectAll: this.handleUnselectAll
              })
            )
          )
        )
      );
    }
  }]);

  return TreeSelect;
}(_react.Component);

TreeSelect.propTypes = {
  intl: _reactIntl.intlShape,
  input: _propTypes2.default.object.isRequired,
  meta: _propTypes2.default.shape({
    touched: _propTypes2.default.bool,
    error: _propTypes2.default.any
  }),
  name: _propTypes2.default.string,
  options: _propTypes2.default.array.isRequired,
  size: _propTypes2.default.oneOf(['xs', 'sm', 'md']),
  allowMultiSelect: _propTypes2.default.bool,
  allowSelectNestedFolder: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  kind: _propTypes2.default.oneOf(['count', 'plain', 'tags'])
};

TreeSelect.defaultProps = {
  meta: {
    touched: false,
    error: null
  },
  allowMultiSelect: false,
  allowSelectNestedFolder: false,
  disabled: false,
  kind: 'plain'
};

exports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(TreeSelect));