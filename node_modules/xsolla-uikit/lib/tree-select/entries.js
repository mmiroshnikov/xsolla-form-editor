'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _checkbox = require('../checkbox');

var _checkbox2 = _interopRequireDefault(_checkbox);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var RenderList = function (_PureComponent) {
  _inherits(RenderList, _PureComponent);

  function RenderList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RenderList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RenderList.__proto__ || Object.getPrototypeOf(RenderList)).call.apply(_ref, [this].concat(args))), _this), _this.state = { visible: false }, _this.toggleVisible = function () {
      return _this.setState({ visible: !_this.state.visible });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(RenderList, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      var recursiveEach = function recursiveEach(options) {
        return options.map(function (option) {
          option.options && recursiveEach(option.options);
          option.checked && _this2.setState({ visible: true });
        });
      };

      this.props.item.options && recursiveEach(this.props.item.options);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          item = _props.item,
          depLevel = _props.depLevel,
          allowMultiSelect = _props.allowMultiSelect,
          allowSelectNestedFolder = _props.allowSelectNestedFolder,
          handleChange = _props.handleChange,
          disabled = _props.disabled;

      var isNested = item.options && item.options.length > 0;

      return _react2.default.createElement(
        'li',
        null,
        _react2.default.createElement(
          'div',
          {
            className: cx('xsui-tree-select__item'),
            style: { paddingLeft: 12 * (depLevel + 1) + 12 * depLevel } },
          isNested && _react2.default.createElement(ArrowTrigger, {
            open: this.state.visible,
            label: item.label,
            onClick: this.toggleVisible,
            dataId: item.id + '.arrow'
          }),
          !isNested || allowSelectNestedFolder ? _react2.default.createElement(
            'div',
            { className: cx('xsui-tree-select__item__entry') },
            _react2.default.createElement(_checkbox2.default, {
              appearance: allowMultiSelect ? 'primary' : 'flatten',
              input: {
                name: item.id + '.checkbox',
                value: item.checked,
                onChange: handleChange.bind(this, item, false)
              },
              disabled: item.disabled || disabled,
              label: item.label
            }),
            _react2.default.createElement(
              'div',
              { className: cx('xsui-tree-select__item__entry__extra') },
              item.extraLabel
            )
          ) : _react2.default.createElement(
            'div',
            { className: cx('xsui-tree-select__item__entry') },
            _react2.default.createElement(
              'div',
              null,
              item.label
            ),
            _react2.default.createElement(
              'div',
              { className: cx('xsui-tree-select__item__entry__extra') },
              item.extraLabel
            )
          )
        ),
        this.state.visible && isNested && _react2.default.createElement(
          'ul',
          null,
          item.options.map(function (option, index) {
            return _react2.default.createElement(RenderList, {
              key: index,
              item: option,
              depLevel: depLevel + 1,
              allowMultiSelect: allowMultiSelect,
              allowSelectNestedFolder: allowSelectNestedFolder,
              handleChange: handleChange,
              disabled: disabled
            });
          })
        )
      );
    }
  }]);

  return RenderList;
}(_react.PureComponent);

RenderList.propTypes = {
  item: _propTypes2.default.object.isRequired,
  depLevel: _propTypes2.default.number.isRequired,
  allowMultiSelect: _propTypes2.default.bool,
  allowSelectNestedFolder: _propTypes2.default.bool,
  handleChange: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool.isRequired
};


var ArrowTrigger = function ArrowTrigger(_ref2) {
  var open = _ref2.open,
      dataId = _ref2.dataId,
      rest = _objectWithoutProperties(_ref2, ['open', 'dataId']);

  return _react2.default.createElement(
    'div',
    {
      className: cx('xsui-tree-select__arrow-trigger', open && 'xsui-tree-select__arrow-trigger--open') },
    _react2.default.createElement(
      'div',
      _extends({
        className: cx('xsui-tree-select__arrow-trigger__icon'),
        'data-id': dataId,
        'data-value': open
      }, rest),
      _react2.default.createElement(_icon2.default, { name: 'expand' })
    )
  );
};

ArrowTrigger.propTypes = {
  open: _propTypes2.default.bool.isRequired,
  label: function label(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  },
  dataId: _propTypes2.default.string.isRequired
};


var Entries = function Entries(_ref3) {
  var intl = _ref3.intl,
      value = _ref3.value,
      options = _ref3.options,
      _ref3$appearance = _ref3.appearance,
      appearance = _ref3$appearance === undefined ? 'primary' : _ref3$appearance,
      _ref3$showStripes = _ref3.showStripes,
      showStripes = _ref3$showStripes === undefined ? true : _ref3$showStripes,
      allowMultiSelect = _ref3.allowMultiSelect,
      allowSelectNestedFolder = _ref3.allowSelectNestedFolder,
      customStatusLabel = _ref3.customStatusLabel,
      handleChange = _ref3.handleChange,
      handleSelectAll = _ref3.handleSelectAll,
      handleUnselectAll = _ref3.handleUnselectAll,
      placeholder = _ref3.placeholder,
      _ref3$disabled = _ref3.disabled,
      disabled = _ref3$disabled === undefined ? false : _ref3$disabled,
      entryMaxHeight = _ref3.entryMaxHeight;
  return _react2.default.createElement(
    'div',
    { className: cx('xsui-tree-select__entries') },
    _react2.default.createElement(
      'div',
      { className: cx('xsui-tree-select__entries__head') },
      _react2.default.createElement(
        'div',
        { className: cx('xsui-tree-select__entries__head__count') },
        intl.formatMessage(customStatusLabel || _messages2.default.selectedItems, {
          count: value.length,
          total: options.length
        })
      ),
      allowMultiSelect && _react2.default.createElement(
        'div',
        {
          className: cx('xsui-tree-select__entries__head__action', disabled && 'xsui-tree-select__entries__head__action--disabled') },
        value.length === 0 ? _react2.default.createElement(
          'span',
          { onClick: handleSelectAll.bind(undefined) },
          intl.formatMessage(_messages2.default.selectAll)
        ) : _react2.default.createElement(
          'span',
          { onClick: handleUnselectAll.bind(undefined) },
          intl.formatMessage(_messages2.default.unselectAll)
        )
      )
    ),
    _react2.default.createElement(
      'div',
      {
        className: cx('xsui-tree-select__entries__content', 'xsui-tree-select__entries__content--appearance-' + appearance, showStripes && 'xsui-tree-select__entries__content--with-stripes'),
        style: { maxHeight: entryMaxHeight } },
      !options.length && placeholder ? _react2.default.createElement(
        'div',
        { className: cx('xsui-tree-select__entries__content__placeholder') },
        placeholder
      ) : _react2.default.createElement(
        'ul',
        null,
        options.map(function (option, index) {
          return _react2.default.createElement(RenderList, {
            key: index,
            item: option,
            depLevel: 0,
            allowMultiSelect: allowMultiSelect,
            allowSelectNestedFolder: allowSelectNestedFolder,
            handleChange: handleChange,
            disabled: disabled
          });
        })
      )
    )
  );
};

Entries.propTypes = {
  intl: function intl() {
    return (typeof _reactIntl.intlShape === 'function' ? _propTypes2.default.instanceOf(_reactIntl.intlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  appearance: _propTypes2.default.oneOf(['primary', 'secondary']),
  showStripes: _propTypes2.default.bool,
  customStatusLabel: _propTypes2.default.object,
  value: _propTypes2.default.arrayOf(function (props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  }).isRequired,
  options: _propTypes2.default.arrayOf(function (props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  }).isRequired,
  allowMultiSelect: _propTypes2.default.bool,
  allowSelectNestedFolder: _propTypes2.default.bool,
  handleChange: _propTypes2.default.func.isRequired,
  handleSelectAll: _propTypes2.default.func.isRequired,
  handleUnselectAll: _propTypes2.default.func.isRequired,
  placeholder: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  entryMaxHeight: _propTypes2.default.number
};
exports.default = (0, _reactIntl.injectIntl)(Entries);