'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fsm = require('@xstate/fsm');

var _constants = require('./constants');

var _types = require('./types');

var createFileUploaderMachine = function createFileUploaderMachine(context) {
  var defaultContext = _extends({}, _constants.INITIAL_CONTEXT, context);

  return (0, _fsm.createMachine)({
    id: 'file-uploader',
    initial: 'default',
    context: _extends({}, _constants.INITIAL_CONTEXT, context),
    states: {
      default: {
        on: {
          UPLOAD: {
            target: 'uploading',
            actions: ['updateContext']
          },
          DISABLE: {
            target: 'disabled',
            actions: ['updateContext']
          },
          REJECT: {
            target: 'error',
            actions: ['updateContext']
          }
        }
      },
      uploading: {
        on: {
          RESOLVE: {
            target: 'success',
            actions: ['updateContext']
          },
          REJECT: {
            target: 'error',
            actions: ['updateContext']
          }
        }
      },
      success: {
        on: {
          RESET: {
            target: 'default',
            actions: ['reset']
          }
        }
      },
      error: {
        on: {
          UPLOAD: {
            target: 'uploading',
            actions: ['updateContext']
          }
        }
      },
      disabled: {
        on: {
          ACTIVATE: 'default',
          UPDATE: {
            target: 'disabled',
            actions: ['updateContext']
          }
        }
      }
    }
  }, {
    actions: {
      reset: (0, _fsm.assign)(function (ctx, env) {
        return _extends({}, defaultContext, env);
      }),
      updateContext: (0, _fsm.assign)(function (ctx, env) {
        return _extends({}, env);
      })
    }
  });
};

exports.default = createFileUploaderMachine;