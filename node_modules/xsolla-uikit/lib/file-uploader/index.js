'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _fsm = require('@xstate/fsm');

var _validation = require('../messages/validation');

var _validation2 = _interopRequireDefault(_validation);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _uploadingButton = require('./uploading-button');

var _uploadingButton2 = _interopRequireDefault(_uploadingButton);

var _constants = require('./constants');

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _input = require('../input');

var _types = require('./types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var FileUploader = function (_Component) {
  _inherits(FileUploader, _Component);

  function FileUploader(props) {
    _classCallCheck(this, FileUploader);

    var _this = _possibleConstructorReturn(this, (FileUploader.__proto__ || Object.getPrototypeOf(FileUploader)).call(this, props));

    _initialiseProps.call(_this);

    var defaultContext = props.content ? _this.getContextByStatus(_constants.STATUS_DEFAULT) : {};

    var fileUploaderMachine = (0, _state2.default)(defaultContext);

    _this.service = (0, _fsm.interpret)(fileUploaderMachine);

    _this.state = {
      current: fileUploaderMachine.initialState
    };
    return _this;
  }

  _createClass(FileUploader, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var _props = this.props,
          input = _props.input,
          _props$meta = _props.meta,
          meta = _props$meta === undefined ? { error: null, touched: false } : _props$meta;


      this.service.subscribe(function (current) {
        return _this2.setState({ current: current });
      });
      this.service.start();

      if (input && (input.disabled || input.readOnly)) {
        this.service.send(_extends({ type: 'DISABLE' }, this.getContextByStatus(_constants.STATUS_DISABLED)));
      }

      if (meta.error && meta.touched) {
        this.service.send(_extends({
          type: 'REJECT'
        }, this.getContextByStatus(_constants.STATUS_ERROR), {
          error: meta.error
        }));
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var current = this.state.current;
      var _props$meta2 = this.props.meta,
          meta = _props$meta2 === undefined ? { error: null, dirty: false, submitFailed: false } : _props$meta2;

      var failedEmptyField = meta.error && prevProps.meta.error !== meta.error && !meta.dirty && meta.submitFailed;

      if (current.matches('disabled')) {
        var currentContext = this.getContextByStatus(_constants.STATUS_DISABLED);
        var prevContext = this.getContextByStatus(_constants.STATUS_DISABLED, prevProps);

        if (JSON.stringify(currentContext) !== JSON.stringify(prevContext)) {
          this.service.send(_extends({
            type: 'UPDATE'
          }, currentContext));
        }
      }

      if (failedEmptyField) {
        this.service.send(_extends({
          type: 'REJECT'
        }, this.getContextByStatus(_constants.STATUS_ERROR), {
          error: meta.error
        }));
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.service.stop();
    }
  }, {
    key: 'render',
    value: function render() {
      var current = this.state.current;
      var dataId = this.props.dataId;


      var areaClassNames = {
        'xsui-file-uploader__area': true,
        'xsui-file-uploader__area--default': current.matches('default') || current.matches('error') || current.matches('disabled')
      };

      var barClassNames = {
        'xsui-file-uploader__progress-bar': true,
        'xsui-file-uploader__progress-bar--default': current.matches('default') || current.matches('error') || current.matches('disabled'),
        'xsui-file-uploader__progress-bar--uploading': current.matches('uploading'),
        'xsui-file-uploader__progress-bar--success': current.matches('success')
      };

      return _react2.default.createElement(
        'div',
        { className: cx('xsui-file-uploader'), 'data-id': dataId },
        _react2.default.createElement(
          'div',
          { className: cx(areaClassNames) },
          _react2.default.createElement('div', { className: cx(barClassNames) }),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-file-uploader__info') },
            _react2.default.createElement(
              'div',
              { className: cx('xsui-file-uploader__text', 'xsui-file-uploader__text--main') },
              current.context.title
            ),
            _react2.default.createElement(
              'div',
              { className: cx('xsui-file-uploader__text', 'xsui-file-uploader__text--sub') },
              current.context.description
            )
          ),
          _react2.default.createElement(
            'div',
            { className: cx('xsui-file-uploader__extra-wrapper') },
            this.renderExtra()
          )
        ),
        current.matches('error') && _react2.default.createElement(
          _validation2.default,
          null,
          current.context.error
        )
      );
    }
  }]);

  return FileUploader;
}(_react.Component);

FileUploader.propTypes = {
  meta: function meta() {
    return (typeof _input.bpfrpt_proptype_Meta === 'function' ? _input.bpfrpt_proptype_Meta.isRequired ? _input.bpfrpt_proptype_Meta.isRequired : _input.bpfrpt_proptype_Meta : _propTypes2.default.shape(_input.bpfrpt_proptype_Meta).isRequired).apply(this, arguments);
  },
  input: _propTypes2.default.shape(Object.assign({}, _input.bpfrpt_proptype_InputType === _propTypes2.default.any ? {} : _input.bpfrpt_proptype_InputType, _input.bpfrpt_proptype_InputLook === _propTypes2.default.any ? {} : _input.bpfrpt_proptype_InputLook)).isRequired,
  accept: _propTypes2.default.string,
  dataId: _propTypes2.default.string,
  content: function content() {
    return (typeof _types.bpfrpt_proptype_Content === 'function' ? _types.bpfrpt_proptype_Content.isRequired ? _types.bpfrpt_proptype_Content.isRequired : _types.bpfrpt_proptype_Content : _propTypes2.default.shape(_types.bpfrpt_proptype_Content).isRequired).apply(this, arguments);
  },
  onUpload: _propTypes2.default.func
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this.getContextByStatus = function (status) {
    var _contextMap;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this3.props;
    var content = props.content;


    var contextMap = (_contextMap = {}, _defineProperty(_contextMap, _constants.STATUS_DEFAULT, _constants.INITIAL_CONTEXT), _defineProperty(_contextMap, _constants.STATUS_UPLOADING, _extends({}, _constants.INITIAL_CONTEXT, {
      description: 'Uploading...',
      extra: null
    })), _defineProperty(_contextMap, _constants.STATUS_SUCCESS, _extends({}, _constants.INITIAL_CONTEXT, {
      extra: null,
      renderExtra: function renderExtra() {
        return _react2.default.createElement(
          'div',
          { className: cx('xsui-file-uploader__icon-circle') },
          _react2.default.createElement(_icon2.default, { name: 'checkmark-mini' })
        );
      }
    })), _defineProperty(_contextMap, _constants.STATUS_ERROR, _constants.INITIAL_CONTEXT), _defineProperty(_contextMap, _constants.STATUS_DISABLED, _extends({}, _constants.INITIAL_CONTEXT, {
      extra: null
    })), _contextMap);

    var baseContext = contextMap[status] || _constants.INITIAL_CONTEXT;
    var customContext = content[status] || {};

    return _extends({}, baseContext, customContext);
  };

  this.onChange = function (event) {
    var _props2 = _this3.props,
        input = _props2.input,
        onUpload = _props2.onUpload,
        _props2$meta = _props2.meta,
        meta = _props2$meta === undefined ? { error: null } : _props2$meta;

    var currentEvent = _extends({}, event);

    _this3.service.send(_extends({
      type: 'UPLOAD'
    }, _this3.getContextByStatus(_constants.STATUS_UPLOADING)));

    input.onChange(currentEvent.target.value);

    if (onUpload) {
      onUpload(event).then(function () {
        _this3.service.send(_extends({
          type: 'RESOLVE'
        }, _this3.getContextByStatus(_constants.STATUS_SUCCESS)));

        setTimeout(function () {
          _this3.service.send(_extends({
            type: 'RESET'
          }, _this3.getContextByStatus(_constants.STATUS_DEFAULT)));
        }, 2000);
      }).catch(function (error) {
        var errorMessage = typeof error === 'string' ? error : '';

        _this3.service.send(_extends({
          type: 'REJECT'
        }, _this3.getContextByStatus(_constants.STATUS_ERROR), {
          error: errorMessage || meta.error
        }));
      });
    }
  };

  this.renderExtra = function () {
    var _props3 = _this3.props,
        input = _props3.input,
        accept = _props3.accept;
    var current = _this3.state.current;


    if (input.readOnly || input.disabled) {
      return;
    }

    if (current.context.renderExtra) {
      return current.context.renderExtra();
    }

    return _react2.default.createElement(_uploadingButton2.default, _extends({}, current.context.extra, {
      input: _extends({}, input, { accept: accept || '*', onChange: _this3.onChange })
    }));
  };
};

exports.default = FileUploader;