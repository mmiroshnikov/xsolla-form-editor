'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _formGroup = require('../form-group');

var _formGroup2 = _interopRequireDefault(_formGroup);

var _input = require('../input');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var request = function request() {
  return new Promise(function (resolve) {
    setTimeout(function () {
      resolve({
        data: {
          foo: 'boo'
        }
      });
    }, 5000);
  });
};

var Example = function (_Component) {
  _inherits(Example, _Component);

  function Example() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Example);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Example.__proto__ || Object.getPrototypeOf(Example)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      loading: false,
      loadedCount: 0,
      meta: {
        touched: false,
        error: null
      }
    }, _this.onUpload = function () {
      return request().then(function (response) {
        _this.setState(function (state) {
          return { loadedCount: state.loadedCount + 1 };
        });

        return response.data;
      });
    }, _this.onUploadWithError = function () {
      return request().then(function () {
        throw Error('Fatal error');
      }).catch(function (error) {
        return Promise.reject(error.message);
      });
    }, _this.onUploadWithReduxFormError = function () {
      _this.setState({ meta: { touched: false, error: null } });

      return request().then(function () {
        throw Error('Redux Form Fatal error');
      }).catch(function (error) {
        _this.setState({ meta: { touched: true, error: error.message } });
        return Promise.reject(error.message);
      });
    }, _this.getContent = function () {
      var loadedCount = _this.state.loadedCount;


      var context = {
        title: 'My custom title',
        description: loadedCount ? loadedCount + ' file uploaded' : 'My custom description',
        extra: {
          children: _react2.default.createElement(
            'div',
            null,
            'Upload'
          ),
          icon: 'upload',
          renderIcon: null
        },
        renderExtra: null,
        error: null
      };

      return {
        default: _extends({}, context),
        uploading: _extends({}, context, {
          description: 'Custom uploading...'
        }),
        success: _extends({}, context, {
          description: 'Custom success uploading!',
          extra: null,
          renderExtra: function renderExtra() {
            return _react2.default.createElement(
              'div',
              null,
              'SUCCESS!'
            );
          }
        }),
        error: _extends({}, context),
        disabled: _extends({}, context)
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Example, [{
    key: 'render',
    value: function render() {
      var meta = this.state.meta;


      return _react2.default.createElement(
        'div',
        { style: { margin: '0 auto', width: '468px' } },
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Default content' },
          _react2.default.createElement(_index2.default, {
            input: {
              name: 'file',
              value: '',
              onChange: function onChange() {}
            },
            onUpload: this.onUpload,
            accept: 'text/csv, text/plain',
            meta: {
              touched: false,
              error: null
            },
            content: {}
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Custom content' },
          _react2.default.createElement(_index2.default, {
            input: {
              name: 'file',
              value: '',
              onChange: function onChange() {}
            },
            onUpload: this.onUpload,
            meta: {
              touched: false,
              error: null
            },
            content: this.getContent()
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Uploading error' },
          _react2.default.createElement(_index2.default, {
            input: {
              name: 'file',
              value: '',
              onChange: function onChange() {}
            },
            onUpload: this.onUploadWithError,
            meta: {
              touched: true,
              error: null
            },
            content: {}
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Redux Form error' },
          _react2.default.createElement(_index2.default, {
            input: {
              name: 'file',
              value: '',
              onChange: function onChange() {}
            },
            onUpload: this.onUploadWithReduxFormError,
            meta: meta,
            content: {}
          })
        ),
        _react2.default.createElement(
          _formGroup2.default,
          { label: 'Disabled' },
          _react2.default.createElement(_index2.default, {
            input: {
              name: 'file',
              value: '',
              disabled: true,
              readOnly: true,
              onChange: function onChange() {}
            },
            onUpload: this.onUpload,
            meta: {
              touched: false,
              error: null
            },
            content: {}
          })
        )
      );
    }
  }]);

  return Example;
}(_react.Component);

exports.default = Example;