'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('../types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var Cell = function (_PureComponent) {
  _inherits(Cell, _PureComponent);

  function Cell() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Cell);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Cell.__proto__ || Object.getPrototypeOf(Cell)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      cellOffsetLeft: null
    }, _this.cellRef = (0, _react.createRef)(), _this.setCellOffset = function () {
      var column = _this.props.column;
      var cellOffsetLeft = _this.state.cellOffsetLeft;


      var cell = _this.cellRef.current;

      if (!cell) {
        return;
      }

      if (column.sticky && cellOffsetLeft !== cell.offsetLeft) {
        _this.setState({
          cellOffsetLeft: cell.offsetLeft
        });
      }
    }, _this.getFieldValue = function () {
      var _this$props = _this.props,
          row = _this$props.row,
          fieldGetter = _this$props.column.fieldGetter;


      if (typeof fieldGetter === 'function') {
        return fieldGetter(row);
      }

      return row[fieldGetter];
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Cell, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setCellOffset();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          column = _props.column,
          row = _props.row,
          rowIndex = _props.rowIndex,
          columnIndex = _props.columnIndex,
          _props$compact = _props.compact,
          compact = _props$compact === undefined ? false : _props$compact;
      var cellOffsetLeft = this.state.cellOffsetLeft;


      if (column.show === false) {
        return null;
      }

      var classes = cx('xsui-table-cell', compact && 'xsui-table-cell--compact', column.sticky && 'xsui-table-cell--sticky', rowIndex % 2 === 0 && 'xsui-table-cell--colored');
      var styles = {
        width: column.width,
        minWidth: column.minWidth || column.width,
        maxWidth: column.maxWidth || column.width,
        left: column.sticky && cellOffsetLeft
      };

      if (column.renderCell) {
        // $FlowFixMe - column.renderCell is undefined
        return column.renderCell({
          column: column,
          row: row,
          rowIndex: rowIndex,
          columnIndex: columnIndex,
          compact: compact,
          sticky: column.sticky,
          value: this.getFieldValue(),
          className: classes,
          style: styles
        });
      }

      return _react2.default.createElement(
        'td',
        { ref: this.cellRef, style: styles, className: classes },
        _react2.default.createElement(
          'p',
          { className: cx('xsui-table-cell__text'), 'data-id': 'table-cell__text' },
          this.getFieldValue()
        )
      );
    }
  }]);

  return Cell;
}(_react.PureComponent);

Cell.propTypes = {
  column: function column() {
    return (typeof _types.bpfrpt_proptype_Column === 'function' ? _types.bpfrpt_proptype_Column.isRequired ? _types.bpfrpt_proptype_Column.isRequired : _types.bpfrpt_proptype_Column : _propTypes2.default.shape(_types.bpfrpt_proptype_Column).isRequired).apply(this, arguments);
  },
  row: _propTypes2.default.object.isRequired,
  rowIndex: _propTypes2.default.number.isRequired,
  columnIndex: _propTypes2.default.number.isRequired,
  compact: _propTypes2.default.bool
};
exports.default = Cell;