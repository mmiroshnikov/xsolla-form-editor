'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STICKY_CLASS = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _tooltip = require('../../tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _constants = require('../constants');

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _types = require('../types');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var STICKY_CLASS = exports.STICKY_CLASS = 'xsui-table-head-cell--sticky-col';

var HeadCell = function (_PureComponent) {
  _inherits(HeadCell, _PureComponent);

  function HeadCell() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, HeadCell);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HeadCell.__proto__ || Object.getPrototypeOf(HeadCell)).call.apply(_ref, [this].concat(args))), _this), _this.textRef = (0, _react.createRef)(), _this.cellRef = (0, _react.createRef)(), _this.state = {
      isCellHigh: false,
      cellOffsetLeft: null
    }, _this.headTextCheck = function () {
      var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (!_this.textRef.current || iteration > 1) {
        return;
      }

      var clientHeight = _this.textRef.current.clientHeight;

      var isCellHigh = clientHeight > _constants.MAX_CELL_HEIGHT;

      // Если после обновления ноды, текст слишком большой, тогда вернем соокращение
      _this.setState({ isCellHigh: isCellHigh }, function () {
        return !isCellHigh && _this.headTextCheck(iteration + 1);
      });
    }, _this.handleResize = function () {
      _this.headTextCheck();
    }, _this.setCellOffset = function () {
      var cell = _this.cellRef.current;

      if (!cell) {
        return;
      }

      if (cell && _this.props.column.sticky) {
        _this.setState({
          cellOffsetLeft: cell.offsetLeft
        });
      }
    }, _this.isShowTooltip = function () {
      return !!_this.props.column.description || _this.state.isCellHigh;
    }, _this.renderCellContent = function () {
      if (_this.isShowTooltip()) {
        return _this.renderTooltip();
      }

      return _this.renderName();
    }, _this.renderName = function () {
      var isShowTooltip = _this.isShowTooltip();

      return _react2.default.createElement(
        'p',
        {
          ref: _this.textRef,
          className: cx('xsui-table-head-cell__text', isShowTooltip && 'xsui-table-head-cell__text--hover', _this.state.isCellHigh && 'xsui-table-head-cell__text--shorted') },
        _this.props.column.name
      );
    }, _this.renderTooltip = function () {
      var _this$props$column = _this.props.column,
          name = _this$props$column.name,
          description = _this$props$column.description;
      var isCellHigh = _this.state.isCellHigh;


      return _react2.default.createElement(
        _tooltip2.default,
        {
          className: cx('xsui-table-head-cell__tooltip', isCellHigh && 'xsui-table-head-cell__tooltip--fluid'),
          label: _react2.default.createElement(
            'div',
            null,
            !!description && _react2.default.createElement(
              'p',
              null,
              description
            ),
            isCellHigh && _react2.default.createElement(
              'p',
              null,
              name
            )
          ) },
        _this.renderName()
      );
    }, _this.renderCell = function () {
      var _this$props = _this.props,
          column = _this$props.column,
          compact = _this$props.compact,
          stickyRow = _this$props.stickyRow;


      var isStickyCell = column.sticky || stickyRow;

      return _react2.default.createElement(
        'div',
        {
          className: cx('xsui-table-head-cell__wrapper', isStickyCell && 'xsui-table-head-cell__wrapper--fit', compact && 'xsui-table-head-cell__wrapper--compact', _this.state.isCellHigh && 'xsui-table-head-cell__wrapper--shorted') },
        _react2.default.createElement(
          _react.Fragment,
          null,
          _react2.default.createElement('div', { className: cx('xsui-table-head-cell__border-bottom') }),
          !column.sticky && _react2.default.createElement('div', {
            className: cx('xsui-table-head-cell__border', compact && 'xsui-table-head-cell__border--compact')
          }),
          _this.renderCellContent(),
          column.sticky && _react2.default.createElement('div', {
            className: cx('xsui-table-head-cell__border', 'xsui-table-head-cell__border--sticky-column')
          })
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(HeadCell, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.headTextCheck();

      window.addEventListener('resize', this.handleResize);

      this.setCellOffset();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.column.name !== prevProps.column.name) {
        this.headTextCheck();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          column = _props.column,
          compact = _props.compact,
          stickyRow = _props.stickyRow;
      var cellOffsetLeft = this.state.cellOffsetLeft;
      var renderHeadCell = column.renderHeadCell,
          width = column.width,
          minWidth = column.minWidth,
          maxWidth = column.maxWidth,
          _column$show = column.show,
          show = _column$show === undefined ? true : _column$show,
          sticky = column.sticky;


      if (!show) {
        return null;
      }

      var classes = cx('xsui-table-head-cell', stickyRow && 'xsui-table-head-cell--sticky-row', sticky && STICKY_CLASS);
      var styles = {
        width: width,
        minWidth: minWidth || width,
        maxWidth: maxWidth || width,
        left: sticky && cellOffsetLeft
      };

      if (renderHeadCell) {
        return renderHeadCell({
          column: column,
          compact: compact,
          sticky: sticky,
          className: classes,
          style: styles
        });
      }

      return _react2.default.createElement(
        'th',
        { ref: this.cellRef, style: styles, className: classes },
        this.renderCell()
      );
    }
  }]);

  return HeadCell;
}(_react.PureComponent);

HeadCell.propTypes = {
  column: function column() {
    return (typeof _types.bpfrpt_proptype_Column === 'function' ? _types.bpfrpt_proptype_Column.isRequired ? _types.bpfrpt_proptype_Column.isRequired : _types.bpfrpt_proptype_Column : _propTypes2.default.shape(_types.bpfrpt_proptype_Column).isRequired).apply(this, arguments);
  },
  compact: _propTypes2.default.bool.isRequired,
  stickyRow: _propTypes2.default.bool.isRequired
};
exports.default = HeadCell;