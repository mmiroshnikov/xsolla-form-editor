'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _exampleStyle = require('./exampleStyle.css');

var _exampleStyle2 = _interopRequireDefault(_exampleStyle);

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_exampleStyle2.default);

var columns = [{
  id: 'Label 1',
  name: 'Label 1',
  fieldGetter: 'id',
  minWidth: 212,
  description: 'label description'
}, {
  id: 'Label 2',
  name: 'Label 2',
  fieldGetter: function fieldGetter(row) {
    return row.project.name;
  },
  minWidth: 170
}, {
  id: 'Label 3',
  name: 'Label 3 (long label name)',
  fieldGetter: 'amount',
  width: 75
}, {
  id: 'Label 4',
  name: 'Label 4',
  fieldGetter: 'revenue',
  width: 115
}, {
  id: 'Label 5',
  name: 'Label 5',
  fieldGetter: 'systemFees',
  minWidth: 115
}];

var additionalColumns = [{
  id: 'Label 6',
  name: 'Label 6',
  fieldGetter: 'amount',
  minWidth: 115
}, {
  id: 'Label 7',
  name: 'Label 7',
  fieldGetter: 'revenue',
  minWidth: 115
}, {
  id: 'Label 8',
  name: 'Label 8',
  fieldGetter: 'systemFees',
  minWidth: 115
}, {
  id: 'Label 9',
  name: 'Label 9',
  fieldGetter: 'tax',
  minWidth: 115
}];

var columnsWithCustomHeadCells = [].concat(columns).map(function (column) {
  return _extends({}, column, {
    renderHeadCell: function renderHeadCell(options) {
      return _react2.default.createElement(
        'td',
        {
          style: {
            width: options.column.width,
            minWidth: options.column.minWidth,
            maxWidth: options.column.maxWidth
          },
          className: options.className },
        _react2.default.createElement(
          'div',
          { className: cx('example-head-cell__wrapper') },
          _react2.default.createElement(
            'p',
            { style: { color: '#0073f7' }, className: cx('example-head-cell__text') },
            options.column.name,
            ' (custom)'
          ),
          _react2.default.createElement('div', { className: cx('example-head-cell__border') })
        )
      );
    }
  });
});

var columnsWithCustomCells = [].concat(columns).map(function (column) {
  return _extends({}, column, {
    renderCell: function renderCell(options) {
      return _react2.default.createElement(
        'td',
        { className: options.className },
        _react2.default.createElement(
          'div',
          { className: cx('example-table__custom-cell') },
          _react2.default.createElement(
            'p',
            { className: cx('example-table__text') },
            options.value
          ),
          _react2.default.createElement('div', { className: cx('example-table__point') })
        )
      );
    }
  });
});

var columnsWithSticky = [].concat(columns).map(function (column, index) {
  if (!index) {
    return _extends({}, column, {
      sticky: true
    });
  }

  return column;
});

var rows = [{
  id: 1,
  project: {
    name: 'Test Project'
  },
  amount: 10,
  revenue: 20,
  systemFees: 30,
  tax: 40,
  repatriation: 50,
  balanceFees: 60,
  commission: 70
}, {
  id: 2,
  project: {
    name: 'Test Project'
  },
  amount: 10,
  revenue: 20,
  systemFees: 30,
  tax: 40,
  repatriation: 50,
  balanceFees: 60,
  commission: 70
}, {
  id: 3,
  project: {
    name: 'Test Project'
  },
  amount: 10,
  revenue: 20,
  systemFees: 30,
  tax: 40,
  repatriation: 50,
  balanceFees: 60,
  commission: 70
}];

var additionalRows = [].concat(rows, rows).map(function (row, idx) {
  return _extends({}, row, { id: idx + 1 });
});

var TableExample = function (_Component) {
  _inherits(TableExample, _Component);

  function TableExample() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TableExample);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TableExample.__proto__ || Object.getPrototypeOf(TableExample)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      expandedRows: {}
    }, _this.expandRowToggle = function (rowIndex) {
      var expandedRows = _this.state.expandedRows;


      if (expandedRows[rowIndex]) {
        return _this.setState(function (prevState) {
          return {
            expandedRows: _extends({}, prevState.expandedRows, _defineProperty({}, rowIndex, !prevState.expandedRows[rowIndex]))
          };
        });
      }

      return _this.setState(function (prevState) {
        return {
          expandedRows: _extends({}, prevState.expandedRows, _defineProperty({}, rowIndex, true))
        };
      });
    }, _this.renderEmptyMessage = function () {
      return _react2.default.createElement(
        'div',
        { className: cx('example-table__empty-message') },
        _react2.default.createElement(
          'p',
          { className: cx('example-table__title') },
          'No packages available'
        ),
        _react2.default.createElement(
          'p',
          { className: cx('example-table__description') },
          'Xsolla is a video games industry company, providing game developers.'
        )
      );
    }, _this.renderRow = function (_ref2) {
      var className = _ref2.className,
          rowIndex = _ref2.rowIndex,
          columns = _ref2.columns,
          row = _ref2.row,
          CellComponent = _ref2.CellComponent;
      return _react2.default.createElement(
        _react.Fragment,
        { key: 'row-' + rowIndex + '-1' },
        _react2.default.createElement(
          'tr',
          { className: className, onClick: function onClick() {
              return _this.expandRowToggle(rowIndex);
            } },
          columns.map(function (column, columnIdx) {
            return _react2.default.createElement(CellComponent, {
              key: 'row-' + (row.id || rowIndex) + '-' + column.id,
              row: row,
              column: column,
              rowIndex: rowIndex,
              columnIndex: columnIdx
            });
          })
        ),
        _this.state.expandedRows[rowIndex] && _react2.default.createElement(
          'tr',
          { className: className },
          _react2.default.createElement(
            'td',
            { className: cx('example-table__additional-cell'), colSpan: columns.length },
            _react2.default.createElement(
              'p',
              null,
              'Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus, doloribus assumenda reprehenderit nemo sit optio omnis veritatis architecto ut beatae enim magnam dolor dolorem illo quam reiciendis adipisci dolore sequi quasi corporis.'
            )
          )
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TableExample, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'p',
          null,
          'Standard Table:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columns, rows: rows })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table in fetching state:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columns, rows: rows, fetching: true })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with custom empty message:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columns, rows: [], renderEmptyMessage: this.renderEmptyMessage })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with custom head cell:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columnsWithCustomHeadCells, rows: rows })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with custom cell:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columnsWithCustomCells, rows: rows })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with custom rows (expand row on click):'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columns, rows: rows, renderRow: this.renderRow })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with compact mode:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, { columns: columns, rows: rows, compact: true })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with sticky column:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card', 'example-table__card--small') },
          _react2.default.createElement(_index2.default, {
            className: cx('example-table--fit'),
            columns: [].concat(_toConsumableArray(columnsWithSticky), additionalColumns),
            rows: rows
          })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with sticky head:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card', 'example-table__card--small') },
          _react2.default.createElement(_index2.default, {
            className: cx('example-table--fit'),
            columns: [].concat(_toConsumableArray(columnsWithSticky), additionalColumns),
            rows: additionalRows,
            stickyHead: true
          })
        ),
        _react2.default.createElement(
          'p',
          null,
          'Table with horizontal scroll:'
        ),
        _react2.default.createElement(
          'div',
          { className: cx('example-table__card') },
          _react2.default.createElement(_index2.default, {
            className: cx('example-table--fit'),
            columns: [].concat(columns, additionalColumns),
            rows: rows,
            horizontalScroll: true
          })
        )
      );
    }
  }]);

  return TableExample;
}(_react.Component);

TableExample.propTypes = {};
exports.default = TableExample;