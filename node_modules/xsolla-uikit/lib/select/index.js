'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bpfrpt_proptype_Props = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _input = require('../input');

var _input2 = _interopRequireDefault(_input);

var _dropdown = require('../dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var bpfrpt_proptype_Props = Object.assign({}, _input.bpfrpt_proptype_Props === _propTypes2.default.any ? {} : _input.bpfrpt_proptype_Props, {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    tag: _propTypes2.default.any,
    itemRef: _propTypes2.default.func,
    active: _propTypes2.default.bool,
    label: function label(props, propName, componentName) {
      if (!Object.prototype.hasOwnProperty.call(props, propName)) {
        throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
      }
    },
    value: function value(props, propName, componentName) {
      if (!Object.prototype.hasOwnProperty.call(props, propName)) {
        throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
      }
    },
    extraLabel: _propTypes2.default.any,
    description: _propTypes2.default.string,
    appearance: _propTypes2.default.oneOf(['row', 'head']),
    icon: _propTypes2.default.string,
    customIcon: _propTypes2.default.any,
    color: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    onClick: _propTypes2.default.func
  }).isRequired).isRequired,
  onBlurHandler: _propTypes2.default.func,
  dropdownIcon: _propTypes2.default.string,
  containerClassName: _propTypes2.default.string,
  onScrollOptions: _propTypes2.default.func,
  dropdownProps: _propTypes2.default.object,
  searchable: _propTypes2.default.bool,
  autosize: _propTypes2.default.bool,
  // TODO: refactor this field
  align: _propTypes2.default.oneOf(['left', 'left-half', 'right', 'right-half']),
  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),
  fetching: _propTypes2.default.bool
});


var cx = _bind2.default.bind(_style2.default);

var mapSize = function mapSize(size) {
  switch (size) {
    case 'sm':
      return 'md';
    case 'md':
      return 'lg';
  }
};

var Select = function Select(_ref) {
  var intl = _ref.intl,
      input = _ref.input,
      options = _ref.options,
      _ref$searchable = _ref.searchable,
      searchable = _ref$searchable === undefined ? false : _ref$searchable,
      _ref$autosize = _ref.autosize,
      autosize = _ref$autosize === undefined ? false : _ref$autosize,
      _ref$align = _ref.align,
      align = _ref$align === undefined ? 'left' : _ref$align,
      _ref$size = _ref.size,
      size = _ref$size === undefined ? 'md' : _ref$size,
      placeholder = _ref.placeholder,
      dropdownProps = _ref.dropdownProps,
      containerClassName = _ref.containerClassName,
      onScrollOptions = _ref.onScrollOptions,
      _ref$fetching = _ref.fetching,
      fetching = _ref$fetching === undefined ? false : _ref$fetching,
      onBlurHandler = _ref.onBlurHandler,
      dropdownIcon = _ref.dropdownIcon,
      rest = _objectWithoutProperties(_ref, ['intl', 'input', 'options', 'searchable', 'autosize', 'align', 'size', 'placeholder', 'dropdownProps', 'containerClassName', 'onScrollOptions', 'fetching', 'onBlurHandler', 'dropdownIcon']);

  var selectedOption = options.find(function (a) {
    return a.value === input.value || null;
  }) || {};

  return _react2.default.createElement(
    'div',
    { className: cx('xsui-select', containerClassName) },
    _react2.default.createElement(
      _dropdown2.default,
      _extends({
        options: options,
        value: input.value || null,
        size: mapSize(size),
        searchable: searchable,
        autosize: autosize,
        align: align,
        separated: false,
        onChange: input.onChange,
        onScrollOptions: onScrollOptions,
        fetching: fetching,
        onClick: input.onClick
      }, dropdownProps),
      _react2.default.createElement(_input2.default, _extends({}, rest, {
        input: _extends({}, input, {
          onBlur: function onBlur(e) {
            e.preventDefault();
            if (onBlurHandler) {
              onBlurHandler(e);
            }
          },
          value: (options.find(function (a) {
            return a.value === input.value || null;
          }) || {}).label,
          onChange: function onChange() {
            return void 0;
          }
        }),
        size: size,
        offset: selectedOption.customIcon ? 'both' : 'right',
        icon: dropdownIcon || 'dropdown-select',
        extra: selectedOption.customIcon,
        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),
        readOnly: true
      }))
    )
  );
};

Select.propTypes = bpfrpt_proptype_Props;
exports.default = (0, _reactIntl.injectIntl)(Select);
exports.bpfrpt_proptype_Props = bpfrpt_proptype_Props;