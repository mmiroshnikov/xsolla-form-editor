'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactIntl = require('react-intl');

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _reactDropzone = require('react-dropzone');

var _reactDropzone2 = _interopRequireDefault(_reactDropzone);

var _icon = require('../icon');

var _icon2 = _interopRequireDefault(_icon);

var _loader = require('../loader');

var _loader2 = _interopRequireDefault(_loader);

var _notification = require('../notification');

var _notification2 = _interopRequireDefault(_notification);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);
var acceptedTypes = ['image/gif', 'image/jpg', 'image/jpeg', 'image/png', '.gif', '.jpg', '.jpeg', '.png'].join(',');

var ImagePicker = function (_PureComponent) {
  _inherits(ImagePicker, _PureComponent);

  function ImagePicker() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ImagePicker);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImagePicker.__proto__ || Object.getPrototypeOf(ImagePicker)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      fetching: false,
      error: null
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImagePicker, [{
    key: 'onDrop',
    value: function onDrop(files) {
      var _this2 = this;

      var _props = this.props,
          HTTPClient = _props.HTTPClient,
          input = _props.input,
          url = _props.url,
          responseKey = _props.responseKey,
          onUploadStart = _props.onUploadStart,
          onUploadEnd = _props.onUploadEnd;


      var computedHTTPClient = HTTPClient || _axios2.default;

      if (input.onDrop) {
        input.onDrop();
      }

      var data = new FormData();
      data.append('image', files[0]);

      this.setState({
        fetching: true,
        error: false
      });

      onUploadStart();

      computedHTTPClient.post(url, data, { headers: { 'content-type': 'multipart/form-data' } }).then(function (response) {
        var data = response.data[responseKey];
        input.onChange(data);
        onUploadEnd(data);
        setTimeout(function () {
          return _this2.setState({ fetching: false });
        }, 2000);
      }).catch(function (error) {
        onUploadEnd(undefined, error);
        _this2.setState({
          fetching: false,
          error: error.response ? error.response.data.message : 'Error'
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          intl = _props2.intl,
          input = _props2.input,
          meta = _props2.meta,
          appearance = _props2.appearance,
          caption = _props2.caption,
          disabled = _props2.disabled,
          rest = _objectWithoutProperties(_props2, ['intl', 'input', 'meta', 'appearance', 'caption', 'disabled']);

      var _state = this.state,
          fetching = _state.fetching,
          error = _state.error;

      var imageName = input.value ? input.value.split('/').pop() : null;

      var isError = meta.touched && meta.error;
      var isWarning = meta.touched && !meta.error && !error && meta.warning;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _reactDropzone2.default,
          {
            name: input.name || rest.name,
            className: cx('xsui-imagePicker', 'xsui-imagePicker--appearance-' + appearance, fetching && 'xsui-imagePicker--fetching', input.value && 'xsui-imagePicker--filled', isError && 'xsui-imagePicker--error', isWarning && 'xsui-imagePicker--warning', error && 'xsui-imagePicker--error'),
            acceptClassName: cx('xsui-imagePicker--accept'),
            rejectClassName: cx('xsui-imagePicker--reject'),
            disabledClassName: cx('xsui-imagePicker--disabled'),
            accept: acceptedTypes,
            multiple: false,
            disabled: disabled || fetching,
            disablePreview: true,
            onDrop: this.onDrop.bind(this) },
          _react2.default.createElement(
            'div',
            { className: cx('xsui-imagePicker__icon') },
            _react2.default.createElement(_icon2.default, {
              name: input.value ? 'delete' : 'upload',
              size: appearance === 'secondary' ? 24 : input.value ? 24 : 32,
              hoverable: !disabled,
              onClick: function onClick(e) {
                e.stopPropagation();
                !disabled && input.onChange(null);
              }
            })
          ),
          (appearance === 'primary' || appearance === 'tertiary') && _react2.default.createElement(
            _react.Fragment,
            null,
            fetching && _react2.default.createElement(_loader2.default, { color: 'blue', fullscreen: true }),
            !fetching && input.value && _react2.default.createElement('div', {
              className: cx('xsui-imagePicker__preview'),
              style: {
                backgroundImage: 'url(' + input.value + ')'
              }
            })
          ),
          appearance === 'secondary' && _react2.default.createElement(
            _react.Fragment,
            null,
            fetching && _react2.default.createElement(_loader2.default, { color: 'blue', fullscreen: true, size: 'xs' }),
            _react2.default.createElement(
              'div',
              { className: cx('xsui-imagePicker__caption') },
              imageName || caption || intl.formatMessage(_messages2.default.caption)
            )
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          isError && _react2.default.createElement(
            _notification2.default,
            { appearance: 'string', status: 'error' },
            meta.error
          ),
          isWarning && _react2.default.createElement(
            _notification2.default,
            { appearance: 'string', status: 'warning' },
            meta.warning
          ),
          error && _react2.default.createElement(
            _notification2.default,
            { appearance: 'string', status: 'error' },
            error
          )
        )
      );
    }
  }]);

  return ImagePicker;
}(_react.PureComponent);

ImagePicker.propTypes = {
  intl: function intl() {
    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  },
  input: _propTypes2.default.object,
  meta: _propTypes2.default.shape({
    touched: _propTypes2.default.bool.isRequired,
    error: _propTypes2.default.string,
    warning: _propTypes2.default.string
  }),
  name: _propTypes2.default.string,
  url: _propTypes2.default.string.isRequired,
  responseKey: _propTypes2.default.string,
  appearance: _propTypes2.default.oneOf(['primary', 'secondary', 'tertiary']),
  caption: _propTypes2.default.string.isRequired,
  onUploadStart: _propTypes2.default.func,
  onUploadEnd: _propTypes2.default.func,
  disabled: _propTypes2.default.bool,
  HTTPClient: function HTTPClient(props, propName, componentName) {
    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
    }
  }
};
ImagePicker.defaultProps = {
  input: {},
  meta: {
    touched: false,
    error: null
  },
  name: null,
  responseKey: 'image_url',
  appearance: 'primary',
  onUploadStart: function onUploadStart() {
    return void 0;
  },
  onUploadEnd: function onUploadEnd() {
    return void 0;
  },
  disabled: false
};
exports.default = (0, _reactIntl.injectIntl)(ImagePicker);