'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var Card = function (_React$PureComponent) {
  _inherits(Card, _React$PureComponent);

  function Card() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Card);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Card.__proto__ || Object.getPrototypeOf(Card)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      hovered: false
    }, _this.handleHoverer = function (hovered) {
      return _this.props.hoverable && _this.setState({ hovered: hovered });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Toggler of the hover state
   * @param boolean hovered
   */


  _createClass(Card, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          className = _props.className,
          _props$connected = _props.connected,
          connected = _props$connected === undefined ? false : _props$connected,
          _props$shadowType = _props.shadowType,
          shadowType = _props$shadowType === undefined ? 'hard' : _props$shadowType;


      return React.createElement(
        'div',
        {
          className: cx('xsui-card', 'xsui-card__shadow-' + shadowType, connected && 'xsui-card--connected', this.state.hovered && 'xsui-card--hovered', className),
          onMouseEnter: this.handleHoverer.bind(this, true),
          onMouseLeave: this.handleHoverer.bind(this, false) },
        children({ hovered: this.state.hovered })
      );
    }
  }]);

  return Card;
}(React.PureComponent);

Card.propTypes = {
  children: _propTypes2.default.func.isRequired,
  hoverable: _propTypes2.default.bool,
  connected: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  shadowType: _propTypes2.default.oneOf(['hard', 'soft'])
};
exports.default = Card;