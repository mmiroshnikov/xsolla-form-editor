'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _bind = require('classnames/bind');

var _bind2 = _interopRequireDefault(_bind);

var _entries = require('../tree-select/entries');

var _entries2 = _interopRequireDefault(_entries);

var _style = require('./style.css');

var _style2 = _interopRequireDefault(_style);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var cx = _bind2.default.bind(_style2.default);

var CheckboxGroup = function (_Component) {
  _inherits(CheckboxGroup, _Component);

  function CheckboxGroup() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CheckboxGroup);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (option) {
      var ignoreFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _this$props = _this.props,
          fields = _this$props.fields,
          allowSelectNestedFolder = _this$props.allowSelectNestedFolder;

      var values = fields.getAll() || [];
      var findIndex = values.findIndex(function (a) {
        return a === option.id;
      });

      if (!allowSelectNestedFolder && option.options && option.options.length) {
        return;
      }

      findIndex > -1 ? !ignoreFound && fields.remove(findIndex) : fields.push(option.id);
    }, _this.handleSelectAll = function () {
      var recursiveEach = function recursiveEach(options) {
        return options.forEach(function (option) {
          option.options && recursiveEach(option.options);
          !option.disabled && _this.props.fields.push(option.id);
        });
      };
      recursiveEach(_this.props.options);
    }, _this.checkedSelectedItems = function (options, items) {
      return options.map(function (option) {
        return _extends({}, option, {
          options: option.options && _this.checkedSelectedItems(option.options, items),
          checked: !!items.find(function (a) {
            return a === option.id;
          })
        });
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CheckboxGroup, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          fields = _props.fields,
          options = _props.options,
          showStripes = _props.showStripes,
          customStatusLabel = _props.customStatusLabel,
          allowSelectNestedFolder = _props.allowSelectNestedFolder,
          placeholder = _props.placeholder,
          _props$disabled = _props.disabled,
          disabled = _props$disabled === undefined ? false : _props$disabled,
          entryMaxHeight = _props.entryMaxHeight;

      var selectedItems = fields.getAll() || [];
      var entries = this.checkedSelectedItems(options, selectedItems);

      return _react2.default.createElement(
        'div',
        { className: cx('xsui-checkbox-group') },
        _react2.default.createElement(_entries2.default, {
          apperance: 'secondary',
          showStripes: showStripes,
          value: selectedItems,
          options: entries,
          disabled: disabled,
          placeholder: placeholder,
          appearance: 'secondary',
          allowMultiSelect: true,
          allowSelectNestedFolder: allowSelectNestedFolder,
          customStatusLabel: customStatusLabel,
          entryMaxHeight: entryMaxHeight,
          handleChange: this.handleChange,
          handleSelectAll: this.handleSelectAll.bind(this),
          handleUnselectAll: fields.removeAll.bind(this)
        })
      );
    }
  }]);

  return CheckboxGroup;
}(_react.Component);

CheckboxGroup.propTypes = {
  fields: _propTypes2.default.object.isRequired,
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    id: _propTypes2.default.number.isRequired,
    label: _propTypes2.default.string.isRequired,
    extraLabel: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    options: _propTypes2.default.arrayOf(function () {
      return (typeof Option === 'function' ? _propTypes2.default.instanceOf(Option).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
    }),
    checked: _propTypes2.default.bool
  }).isRequired).isRequired,
  showStripes: _propTypes2.default.bool,
  customStatusLabel: _propTypes2.default.shape({
    id: _propTypes2.default.string.isRequired,
    defaultValue: _propTypes2.default.string
  }),
  allowSelectNestedFolder: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  entryMaxHeight: _propTypes2.default.number
};
exports.default = CheckboxGroup;