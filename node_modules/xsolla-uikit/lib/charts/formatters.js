'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.graphicFormatter = graphicFormatter;
exports.pieFormatter = pieFormatter;
exports.mapFormatter = mapFormatter;
var defaultValueFormatter = function defaultValueFormatter(x) {
  return x;
};

var numberToString = function numberToString(num) {
  return Number(num).toFixed(2).replace(/(0+)$/, '').replace(/\.$/, '');
};

var getFormattedValue = function getFormattedValue(value, tooltipOptions) {
  var stringValue = !isNaN(value) ? numberToString(value) : value;

  if (!tooltipOptions) {
    return stringValue;
  }

  var valueFormatter = tooltipOptions.valueFormatter ? tooltipOptions.valueFormatter : defaultValueFormatter;

  return (tooltipOptions.valuePrefix || '') + valueFormatter(stringValue) + (tooltipOptions.valueSuffix || '');
};

function graphicFormatter() {
  return '\n    <table>\n      <tr class="highcharts-header"><th>' + this.x + '</th></tr>\n      ' + this.points.reduce(function (acc, point) {
    return acc + '\n          <tr>\n            <td>\n              <span class="highcharts-color-' + point.colorIndex + '">\u25CF</span>\n              <b>' + point.series.name + '</b>\n              <!-- Add space between name and value\n                   values will be outside tooltip box if using padding -->\n              &nbsp;&nbsp;\n            </td>\n            <td class="highcharts-tooltip-value">' + getFormattedValue(point.y, point.series.tooltipOptions) + '</td>\n          </tr>\n          ';
  }, '') + '\n    </table>\n  ';
}

function singleBarFormatter(tooltip) {
  var point = this.points[0];

  var percentage = this.y / tooltip.options.total * 100;

  return '\n    <table>\n      <tr class="highcharts-header"><th>' + tooltip.options.header + '</th></tr>\n      <tr>\n        <td><b>' + this.x + '&nbsp;&nbsp;</b></td>\n      </tr>\n      <tr>\n        <td class="highcharts-tooltip-value highcharts-tooltip-value--single">\n          <span class="highcharts-color-0">\u25CF</span>\n          ' + getFormattedValue(point.y, tooltip.options) + '\n          <span class="highcharts-tooltip-gray">\n            (' + Number(percentage).toFixed(2) + '%)\n          </span>\n        </td>\n      </tr>\n    </table>\n  ';
}

function multipleBarFormatter(tooltip) {
  var total = this.points.reduce(function (acc, point) {
    return acc + point.y;
  }, 0);

  return '\n    <table>\n      <tr class="highcharts-header"><th>' + tooltip.options.header + '</th></tr>\n      <tr>\n        <td><b>' + this.x + '&nbsp;&nbsp;</b></td>\n        <td class="highcharts-tooltip-value"><b>' + getFormattedValue(total, tooltip.options) + '</b></td>\n      </tr>\n      ' + this.points.reduce(function (acc, point) {
    return acc + '\n          <tr>\n            <td>\n              <span class="highcharts-color-' + point.colorIndex + '">\u25CF</span>\n              ' + point.series.name + '\n              <!-- Add space between name and value\n                   values will be outside tooltip box if using padding -->\n              &nbsp;&nbsp;\n            </td>\n            <td class="highcharts-tooltip-value">' + getFormattedValue(point.y, point.series.tooltipOptions) + '</td>\n          </tr>\n          ';
  }, '') + '\n    </table>\n  ';
}

var barFormatter = exports.barFormatter = function barFormatter(tooltip) {
  var isSingleData = this.points.length === 1;

  return isSingleData ? singleBarFormatter.call(this, tooltip) : multipleBarFormatter.call(this, tooltip);
};

function pieFormatter() {
  return '\n    <table>\n      <tr class="highcharts-header"><th>' + this.series.name + '</th></tr>\n      <tr>\n        <td>\n          <span class="highcharts-color-' + this.colorIndex + '">\u25CF</span>\n          <b>' + this.key + '</b>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          ' + getFormattedValue(this.point.y, this.series.tooltipOptions) + '\n          <span class="highcharts-tooltip-gray">\n            (' + Number(this.point.percentage).toFixed(2) + '%)\n          </span>\n        </td>\n      </tr>\n    </table>\n  ';
}

function mapFormatter(tooltip) {
  return '\n    <table>\n      <tr class="highcharts-header">\n        <th colspan="2">' + tooltip.options.header + '</th>\n      </tr>\n      <tr>\n        <td>\n          <span class="highcharts-color-0">\u25CF</span>\n          <b>' + (this.point.options.name || this.key) + '</b>\n          &nbsp;&nbsp;\n        </td>\n        <td class="highcharts-tooltip-value">' + getFormattedValue(this.point.value, tooltip.options) + '</td>\n      </tr>\n    </table>\n  ';
}