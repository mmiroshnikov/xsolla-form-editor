'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _reactIntl = require('react-intl');

var _reactResizeDetector = require('react-resize-detector');

var _reactResizeDetector2 = _interopRequireDefault(_reactResizeDetector);

var _highcharts = require('highcharts');

var _highcharts2 = _interopRequireDefault(_highcharts);

var _highmaps = require('highcharts/highmaps');

var _highmaps2 = _interopRequireDefault(_highmaps);

var _worldGeo = require('@highcharts/map-collection/custom/world.geo.json');

var _worldGeo2 = _interopRequireDefault(_worldGeo);

var _highchartsReactOfficial = require('highcharts-react-official');

var _highchartsReactOfficial2 = _interopRequireDefault(_highchartsReactOfficial);

var _formatters = require('./formatters');

var _shapes = require('./shapes');

var _states = require('./states');

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

require('./style.css');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var setupLibrary = function setupLibrary(lib) {
  if (lib.Renderer) {
    lib.Renderer.prototype.symbols.square = _shapes.roundedSquare;
  }
};

var setLang = function setLang(intl, lib) {
  if (lib.setOptions) {
    lib.setOptions({
      lang: {
        numericSymbols: [intl.formatMessage(_messages2.default.kilo), intl.formatMessage(_messages2.default.mega), intl.formatMessage(_messages2.default.giga), intl.formatMessage(_messages2.default.tera), intl.formatMessage(_messages2.default.peta), intl.formatMessage(_messages2.default.exa)]
      }
    });
  }
};

setupLibrary(_highcharts2.default);
setupLibrary(_highmaps2.default);

var MAP_ASPECT_RATIO = 50 / 85;

var defaultOptions = {
  chart: {
    styledMode: true,
    marginTop: 75,
    spacing: [0, 0, 0, 0],
    colorCount: 6
  },
  title: {
    text: ''
  },
  credits: {
    enabled: false
  },
  exporting: {
    enabled: false
  },
  legend: {
    layout: 'horizontal',
    align: 'left',
    verticalAlign: 'top',
    float: true
  },
  tooltip: {
    borderRadius: 4,
    padding: 16,
    shape: 'square',
    useHTML: true,
    shared: true,
    formatter: function formatter(tooltip) {
      var result = void 0;
      if (this.points) {
        if (this.points.every(function (point) {
          return point.series.type === 'column';
        })) {
          // stacked barchart
          result = _formatters.barFormatter.call(this, tooltip);
        } else {
          // barchart with single data serie
          result = _formatters.graphicFormatter.call(this);
        }
      } else if (this.series && this.series.mapData) {
        // world map
        result = _formatters.mapFormatter.call(this, tooltip);
      } else if (this.series.userOptions.type === 'pie') {
        // pie chart
        result = _formatters.pieFormatter.call(this);
      } else {
        result = tooltip.defaultFormatter.call(this, tooltip);
      }
      return result;
    }
  }
};

var getHighmapsOptions = function getHighmapsOptions(options, size) {
  var mergedOptions = (0, _lodash2.default)({}, defaultOptions, options);

  mergedOptions.series.forEach(function (serie, index) {
    mergedOptions.series[index] = (0, _lodash2.default)({
      name: '',
      joinBy: ['iso-a2', 'key'],
      mapData: _worldGeo2.default
    }, serie);
  });

  mergedOptions.legend.verticalAlign = 'bottom';

  mergedOptions.colorAxis = (0, _lodash2.default)(mergedOptions.colorAxis, {
    tickAmount: 2,
    minColor: '#95c4fa',
    maxColor: '#2483f4'
  }, options.colorAxis);

  // need to align legend with map
  mergedOptions.chart = (0, _lodash2.default)(mergedOptions.chart, _extends({}, size, {
    height: MAP_ASPECT_RATIO * size.width,
    marginTop: 0
  }), options.chart);

  return mergedOptions;
};

var getHighchartsOptions = function getHighchartsOptions(options, size) {
  var mergedOptions = (0, _lodash2.default)({}, defaultOptions, options);

  if (mergedOptions.xAxis) {
    mergedOptions.xAxis.crosshair = true;
  }

  if (!mergedOptions.yAxis) {
    mergedOptions.yAxis = [{}];
  }

  if (!Array.isArray(mergedOptions.yAxis)) {
    mergedOptions.yAxis = [mergedOptions.yAxis];
  }

  mergedOptions.chart = (0, _lodash2.default)(mergedOptions.chart, size, options.chart);

  // enabling stacking and labels for stacked columns
  if (mergedOptions.chart && mergedOptions.chart.type === 'column') {
    mergedOptions.plotOptions = (0, _lodash2.default)({
      column: {
        stacking: 'normal'
      }
    }, mergedOptions.plotOptions);

    (0, _lodash2.default)(mergedOptions.yAxis[0], {
      stackLabels: {
        enabled: true
      }
    });

    (0, _lodash2.default)(mergedOptions.xAxis, {
      labels: {
        format: '<b>{value}</b>'
      }
    });
  }

  if (mergedOptions.legend && mergedOptions.legend.enabled === false) {
    mergedOptions.chart.marginTop = 25;
  }

  mergedOptions.yAxis.forEach(function (axis) {
    var isLeftAxis = !axis.opposite;

    axis.showFirstLabel = false;
    axis.showLastLabel = false;
    // set axis line on plot area
    axis.offset = -20;
    // set axis values under plot bands
    axis.labels = _extends({}, axis.labels, {
      y: -6,
      align: isLeftAxis ? 'left' : 'right'
    });
    // set axis title under maximum band
    axis.title = _extends({}, axis.title, {
      align: 'high',
      offset: 0,
      rotation: 0,
      x: (isLeftAxis ? -1 : 1) * 20,
      textAlign: isLeftAxis ? 'left' : 'right',
      reserveSpace: false,
      y: -6
    });
  });

  if (!mergedOptions.series) {
    mergedOptions.series = [];
  }

  mergedOptions.series.forEach(function (serie) {
    if (serie.type === 'pie') {
      serie.innerSize = 116;
      serie.size = 196;
      serie.states = {
        hover: {
          enabled: false
        }
      };
    } else if (serie.type === 'column' || mergedOptions.chart && mergedOptions.chart.type === 'column') {
      serie.maxPointWidth = 72;
    }
  });

  return mergedOptions;
};

var styleOptions = function styleOptions(options, size, constructorType) {
  return constructorType === 'mapChart' ? getHighmapsOptions(options, size) : getHighchartsOptions(options, size);
};

var Charts = function Charts(_ref) {
  var options = _ref.options,
      constructorType = _ref.constructorType,
      state = _ref.state,
      onRefresh = _ref.onRefresh,
      _ref$refreshMode = _ref.refreshMode,
      refreshMode = _ref$refreshMode === undefined ? 'debounce' : _ref$refreshMode,
      intl = _ref.intl,
      props = _objectWithoutProperties(_ref, ['options', 'constructorType', 'state', 'onRefresh', 'refreshMode', 'intl']);

  var highchartsConstructorType = constructorType || 'chart';
  var isMapchart = constructorType === 'mapChart';
  var highchartInstance = isMapchart ? _highmaps2.default : _highcharts2.default;

  switch (state) {
    case 'loading':
      return _react2.default.createElement(_states.Loading, { className: props.className });
    case 'fail':
      return _react2.default.createElement(_states.Fail, { className: props.className, onClick: onRefresh });
    case 'empty':
      return _react2.default.createElement(_states.Empty, { className: props.className });
  }

  setLang(intl, highchartInstance);

  return _react2.default.createElement(
    _reactResizeDetector2.default,
    { handleWidth: true, handleHeight: true, refreshMode: refreshMode, refreshRate: 250 },
    function (_ref2) {
      var width = _ref2.width,
          height = _ref2.height;
      return _react2.default.createElement(_highchartsReactOfficial2.default, _extends({
        key: isMapchart ? Math.random() : void 0,
        highcharts: highchartInstance,
        options: styleOptions(options || {}, { width: width, height: height }, highchartsConstructorType),
        constructorType: highchartsConstructorType
      }, props));
    }
  );
};

Charts.propTypes = {
  options: _propTypes2.default.any,
  constructorType: _propTypes2.default.oneOf(['chart', 'mapChart', 'stockChart', 'ganttChart']),
  state: _propTypes2.default.oneOf(['normal', 'loading', 'fail', 'empty']),
  onRefresh: _propTypes2.default.func,
  className: _propTypes2.default.string,
  containerProps: _propTypes2.default.object,
  refreshMode: _propTypes2.default.oneOf(['debounce', 'throttle']),
  intl: function intl() {
    return (typeof intlShape === 'function' ? _propTypes2.default.instanceOf(intlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);
  }
};
exports.default = (0, _reactIntl.injectIntl)(Charts);