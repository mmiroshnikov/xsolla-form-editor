{"ast":null,"code":"import _defineProperty from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/maiik/Xsolla_HTML2/xsolla-form-editor/src/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  /* display:flex; */\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport initialData from './initial-data';\nimport Column from './components/Column';\nvar Container = styled.div(_templateObject());\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialData;\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var start = _this.state.columns[source.droppableId];\n      var finish = _this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        var newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var newColumn = _objectSpread({}, start, {\n          taskIds: newTaskIds\n        });\n\n        var _newState = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n        });\n\n        _this.setState(_newState);\n\n        return;\n      } // Moving from one list to another\n\n\n      var startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n\n      var newStart = _objectSpread({}, start, {\n        taskIds: startTaskIds\n      });\n\n      var finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId);\n\n      var newFinish = _objectSpread({}, finish, {\n        taskIds: finishTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newStart.id, newStart), _defineProperty(_objectSpread3, newFinish.id, newFinish), _objectSpread3))\n      });\n\n      _this.setState(newState);\n    };\n\n    _this.palette = initialData['palette'];\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // paletteTasks = palette.taskIds.map(\n    //   taskId => this.state.tasks[taskId]\n    // )\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        key: 'palette',\n        column: this.palette,\n        tasks: this.state['palette'].taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, this.state.columnOrder.map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return /*#__PURE__*/React.createElement(Column, {\n          key: column.id,\n          column: column,\n          tasks: tasks,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/Users/maiik/Xsolla_HTML2/xsolla-form-editor/src/index.js"],"names":["React","ReactDOM","DragDropContext","styled","initialData","Column","Container","div","App","state","onDragEnd","result","destination","source","draggableId","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","palette","map","taskId","tasks","columnOrder","columnId","column","Component","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport '@atlaskit/css-reset'\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\nimport initialData from './initial-data'\nimport Column from './components/Column'\n\nconst Container = styled.div`\n  /* display:flex; */\n`\n\nclass App extends React.Component {\n  state = initialData\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result\n\n    if (!destination) {\n      return\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    const start = this.state.columns[source.droppableId]\n    const finish = this.state.columns[destination.droppableId]\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds)\n      newTaskIds.splice(source.index, 1)\n      newTaskIds.splice(destination.index, 0, draggableId)\n\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds\n      }\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      this.setState(newState)\n      return\n    }\n\n    // Moving from one list to another\n    const startTaskIds = Array.from(start.taskIds)\n    startTaskIds.splice(source.index, 1)\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds)\n    finishTaskIds.splice(destination.index, 0, draggableId)\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }\n    this.setState(newState)\n  }\n\n  palette = initialData['palette']\n  // paletteTasks = palette.taskIds.map(\n  //   taskId => this.state.tasks[taskId]\n  // )\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n\n\n        <Container>\n          <Column key={'palette'} column={this.palette} tasks={this.state['palette'].taskIds.map(taskId => this.state.tasks[taskId])} />\n        </Container>\n        <Container>\n          {this.state.columnOrder.map(columnId => {\n            const column = this.state.columns[columnId]\n            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n            return (\n              <Column key={column.id} column={column} tasks={tasks} />\n            )\n          })}\n        </Container>\n      </DragDropContext>\n    )\n  }\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"]},"metadata":{},"sourceType":"module"}