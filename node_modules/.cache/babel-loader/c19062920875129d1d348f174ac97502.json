{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _modal = require('../modal');\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nvar _index = require('../form-footer/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _button = require('../button');\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar ModalAlert = function (_React$PureComponent) {\n  _inherits(ModalAlert, _React$PureComponent);\n\n  function ModalAlert() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ModalAlert);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ModalAlert.__proto__ || Object.getPrototypeOf(ModalAlert)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      fetching: false,\n      confirmed: false\n    }, _this.handleKeydown = function (e) {\n      var confirmed = _this.state.confirmed;\n      var _this$props = _this.props,\n          confirmationEl = _this$props.confirmationEl,\n          submitByEnter = _this$props.submitByEnter;\n\n      if (!submitByEnter) {\n        return;\n      }\n\n      var isConfirmed = confirmationEl ? confirmed : true;\n\n      if (e.keyCode === 13) {\n        e.preventDefault();\n\n        if (isConfirmed) {\n          _this.handleSubmit();\n        }\n      }\n    }, _this.toggleFetching = function () {\n      return _this.setState({\n        fetching: !_this.state.fetching\n      });\n    }, _this.setConfirmed = function (value) {\n      var confirmationHandler = _this.props.confirmationHandler;\n\n      _this.setState({\n        confirmed: value\n      });\n\n      if (confirmationHandler) {\n        _this.toggleFetching();\n\n        confirmationHandler().then(function () {\n          return _this.toggleFetching();\n        }).catch(function () {\n          return _this.toggleFetching();\n        });\n      }\n    }, _this.clearState = function () {\n      _this.setState({\n        fetching: false,\n        confirmed: false\n      });\n    }, _this.handleDiscard = function () {\n      _this.clearState();\n\n      _this.props.onDiscard();\n    }, _this.handleSubmit = function () {\n      var _this$props2 = _this.props,\n          onSubmit = _this$props2.onSubmit,\n          closeAfterSubmit = _this$props2.closeAfterSubmit;\n\n      _this.toggleFetching();\n\n      var submitResult = onSubmit(_this.state.confirmed);\n      Promise.resolve(submitResult).then(function () {\n        return _this.handleClose(closeAfterSubmit);\n      });\n    }, _this.handleClose = function () {\n      var close = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      _this.clearState();\n\n      close && _this.props.onClose();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ModalAlert, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.handleKeydown, true);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('keydown', this.handleKeydown, true);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          icon = _props.icon,\n          title = _props.title,\n          description = _props.description,\n          discard = _props.discard,\n          submit = _props.submit,\n          submitAppearance = _props.submitAppearance,\n          confirmationEl = _props.confirmationEl,\n          modalDiscardDataID = _props.modalDiscardDataID,\n          modalSubmitDataID = _props.modalSubmitDataID,\n          _props$compactFooter = _props.compactFooter,\n          compactFooter = _props$compactFooter === undefined ? false : _props$compactFooter,\n          rest = _objectWithoutProperties(_props, ['icon', 'title', 'description', 'discard', 'submit', 'submitAppearance', 'confirmationEl', 'modalDiscardDataID', 'modalSubmitDataID', 'compactFooter']);\n\n      return React.createElement(_modal2.default, _extends({}, rest, {\n        onClose: this.handleClose,\n        hideCloseBtn: true\n      }), React.createElement(React.Fragment, null, React.createElement('div', {\n        className: cx('modal-alert')\n      }, icon && React.createElement('img', {\n        className: cx('modal-alert__icon'),\n        src: icon\n      }), React.createElement('div', {\n        className: cx('modal-alert__title')\n      }, title), React.createElement('div', {\n        className: cx('modal-alert__description')\n      }, description), submit && confirmationEl && React.createElement('div', {\n        className: cx('modal-alert__confirmation')\n      }, confirmationEl({\n        value: this.state.confirmed,\n        onChange: this.setConfirmed\n      }))), (discard || submit) && React.createElement(_index2.default, {\n        compact: compactFooter\n      }, discard && React.createElement(_button2.default, {\n        appearance: 'outline',\n        onClick: function onClick() {\n          return _this2.handleDiscard() || _this2.handleClose();\n        },\n        'data-id': modalDiscardDataID\n      }, discard), submit && React.createElement(_button2.default, {\n        appearance: submitAppearance,\n        disabled: confirmationEl && !this.state.confirmed,\n        fetching: this.state.fetching,\n        onClick: this.handleSubmit,\n        'data-id': modalSubmitDataID\n      }, submit))));\n    }\n  }]);\n\n  return ModalAlert;\n}(React.PureComponent);\n\nModalAlert.propTypes = {\n  fetching: _propTypes2.default.bool,\n  isOpen: _propTypes2.default.bool,\n  icon: _propTypes2.default.string,\n  title: _propTypes2.default.node.isRequired,\n  description: _propTypes2.default.node.isRequired,\n  discard: _propTypes2.default.node,\n  submit: _propTypes2.default.node,\n  submitAppearance: _propTypes2.default.oneOf(['primary', 'secondary', 'outline', 'outline-primary', 'outline-secondary', 'flatten', 'square', 'icon', 'alert']),\n  confirmationEl: _propTypes2.default.func,\n  confirmationHandler: _propTypes2.default.func,\n  onClose: _propTypes2.default.func,\n  onSubmit: _propTypes2.default.func,\n  onDiscard: _propTypes2.default.func,\n  modalDiscardDataID: _propTypes2.default.string,\n  modalSubmitDataID: _propTypes2.default.string,\n  closeAfterSubmit: _propTypes2.default.bool,\n  compactFooter: _propTypes2.default.bool,\n  submitByEnter: _propTypes2.default.bool\n};\nModalAlert.defaultProps = {\n  compactFooter: false,\n  closeAfterSubmit: true,\n  submitByEnter: false,\n  fetching: false,\n  isOpen: false,\n  icon: null,\n  discard: null,\n  submit: null,\n  onClose: function onClose() {\n    return void 0;\n  },\n  onSubmit: function onSubmit() {\n    return void 0;\n  },\n  onDiscard: function onDiscard() {\n    return void 0;\n  }\n};\nexports.default = ModalAlert;","map":null,"metadata":{},"sourceType":"script"}