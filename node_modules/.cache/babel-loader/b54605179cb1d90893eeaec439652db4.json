{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = require('react-intl');\n\nvar _reactDom = require('react-dom');\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _loader = require('../loader');\n\nvar _loader2 = _interopRequireDefault(_loader);\n\nvar _utils = require('../utils');\n\nvar _input = require('../input');\n\nvar _input2 = _interopRequireDefault(_input);\n\nvar _icon = require('../icon');\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _messages = require('./messages');\n\nvar _messages2 = _interopRequireDefault(_messages);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _types = require('./types');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar Item = function Item(_ref) {\n  var _ref$tag = _ref.tag,\n      tag = _ref$tag === undefined ? _react2.default.createElement('div', null) : _ref$tag,\n      _ref$active = _ref.active,\n      active = _ref$active === undefined ? false : _ref$active,\n      label = _ref.label,\n      extraLabel = _ref.extraLabel,\n      description = _ref.description,\n      _ref$appearance = _ref.appearance,\n      appearance = _ref$appearance === undefined ? 'row' : _ref$appearance,\n      icon = _ref.icon,\n      _ref$iconAlign = _ref.iconAlign,\n      iconAlign = _ref$iconAlign === undefined ? 'left' : _ref$iconAlign,\n      customIcon = _ref.customIcon,\n      color = _ref.color,\n      disabled = _ref.disabled,\n      _ref$itemRef = _ref.itemRef,\n      itemRef = _ref$itemRef === undefined ? function () {\n    return void 0;\n  } : _ref$itemRef,\n      extraLabelClass = _ref.extraLabelClass,\n      className = _ref.className,\n      _ref$separated = _ref.separated,\n      separated = _ref$separated === undefined ? false : _ref$separated,\n      _ref$dataId = _ref.dataId,\n      dataId = _ref$dataId === undefined ? '' : _ref$dataId,\n      _ref$breakLabelText = _ref.breakLabelText,\n      breakLabelText = _ref$breakLabelText === undefined ? false : _ref$breakLabelText,\n      rest = _objectWithoutProperties(_ref, ['tag', 'active', 'label', 'extraLabel', 'description', 'appearance', 'icon', 'iconAlign', 'customIcon', 'color', 'disabled', 'itemRef', 'extraLabelClass', 'className', 'separated', 'dataId', 'breakLabelText']);\n\n  return _react2.default.cloneElement(tag, _extends({}, rest, {\n    ref: typeof tag.type === 'function' ? null : itemRef,\n    className: cx('xsui-dropdown-item', 'xsui-dropdown-item--appearance-' + appearance, active && 'xsui-dropdown-item--active', (icon || customIcon) && 'xsui-dropdown-item--icon-align-' + iconAlign, disabled && 'xsui-dropdown-item--disabled', separated && 'xsui-dropdown-item--separated', className),\n    'data-value': rest.value,\n    'data-id': dataId,\n    children: _react2.default.createElement(_react.Fragment, null, icon && _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__icon'),\n      style: {\n        color: color\n      }\n    }, _react2.default.createElement(_icon2.default, {\n      name: icon\n    })), !icon && customIcon && _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__icon')\n    }, customIcon), _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__entry')\n    }, _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__row')\n    }, _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__label', breakLabelText && 'xsui-dropdown-item__label--break-text'),\n      style: {\n        color: color\n      }\n    }, label), extraLabel instanceof Array ? extraLabel.map(function (a, index) {\n      return _react2.default.createElement('div', {\n        key: 'label--' + index,\n        className: cx('xsui-dropdown-item__extra-label', extraLabelClass)\n      }, a);\n    }) : _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__extra-label', extraLabelClass)\n    }, extraLabel)), description && _react2.default.createElement('div', {\n      className: cx('xsui-dropdown-item__description')\n    }, description)))\n  }));\n};\n\nItem.propTypes = _types.bpfrpt_proptype_ItemProps === _propTypes2.default.any ? {} : _types.bpfrpt_proptype_ItemProps;\n\nvar Options = function (_PureComponent) {\n  _inherits(Options, _PureComponent);\n\n  function Options() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Options);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Options.__proto__ || Object.getPrototypeOf(Options)).call.apply(_ref2, [this].concat(args))), _this), _this.positionPredetermined = !!_this.props.position, _this.state = {\n      search: '',\n      position: _this.props.position || 'bottom'\n    }, _this.layoutRef = (0, _react.createRef)(), _this.determineDropdownPosition = function () {\n      _this.setState({\n        position: (0, _utils.dropdownVisible)(_this.containerRef, _this.props.buttonRef) ? 'bottom' : 'top'\n      });\n    }, _this.handleScroll = function () {\n      var onScroll = _this.props.onScroll;\n      var selectHeight = 84;\n      var blockIndents = 10;\n\n      if (_this.containerRef && _this.optionsRef) {\n        var containerInnerHeight = _this.containerRef.offsetHeight - blockIndents;\n        var scrollTop = _this.optionsRef.scrollHeight - containerInnerHeight + selectHeight;\n\n        if (scrollTop === _this.containerRef.scrollTop) {\n          onScroll();\n        }\n      }\n    }, _this.setContainerRef = function (ref) {\n      return _this.containerRef = ref;\n    }, _this.setOptionsRef = function (ref) {\n      return _this.optionsRef = ref;\n    }, _this.setItemRef = function (ref) {\n      return _this.activeItemRef = ref;\n    }, _this.handleClick = function (item) {\n      item.onClick && item.onClick();\n\n      _this.props.onChange(item.value);\n    }, _this.filterItem = function (item, string) {\n      return item.label.toString().toLowerCase().indexOf(string) > -1 || item.value && item.value.toString().toLowerCase().indexOf(string) > -1 || item.extraLabel && item.extraLabel.toString().toLowerCase().indexOf(string) > -1 || item.description && item.description.toString().toLowerCase().indexOf(string) > -1;\n    }, _this.renderOptions = function (filterredItems) {\n      var _this$props = _this.props,\n          intl = _this$props.intl,\n          size = _this$props.size,\n          align = _this$props.align,\n          appearance = _this$props.appearance,\n          searchable = _this$props.searchable,\n          separated = _this$props.separated,\n          fullWidth = _this$props.fullWidth,\n          style = _this$props.style,\n          buttonRef = _this$props.buttonRef,\n          fetching = _this$props.fetching;\n      return _react2.default.createElement('div', {\n        ref: _this.setContainerRef,\n        className: cx('xsui-dropdown__container', 'xsui-dropdown__container--size-' + size, 'xsui-dropdown__container--appearance-' + appearance, !buttonRef && 'xsui-dropdown__container--align-' + align, 'xsui-dropdown__container--position-' + _this.state.position, buttonRef && 'xsui-dropdown__container--position-' + _this.state.position + '-hovered', separated && 'xsui-dropdown__container--separated', fullWidth && 'xsui-dropdown__container--full-width'),\n        style: style\n      }, searchable && _react2.default.createElement('div', {\n        className: cx('xsui-dropdown__container__search')\n      }, _react2.default.createElement(_input2.default, {\n        input: {\n          name: 'search',\n          value: _this.state.search,\n          onChange: function onChange(e) {\n            return _this.setState({\n              search: e.target.value\n            });\n          }\n        },\n        size: 'sm',\n        offset: 'left',\n        icon: 'search',\n        autoComplete: 'off',\n        placeholder: intl.formatMessage(_messages2.default.search)\n      })), _react2.default.createElement('div', {\n        ref: _this.setOptionsRef\n      }, filterredItems.map(function (item, index) {\n        return _react2.default.createElement(Item, _extends({}, item, {\n          iconAlign: item.iconAlign || align.split('-')[0],\n          key: 'option-' + index,\n          itemRef: function itemRef(ref) {\n            return item.active && _this.setItemRef(ref);\n          },\n          onClick: function onClick() {\n            return _this.handleClick(item);\n          }\n        }));\n      })), fetching && _react2.default.createElement('div', {\n        className: cx('xsui-dropdown__loader-container')\n      }, _react2.default.createElement(_loader2.default, {\n        fullscreen: true,\n        size: 'lg'\n      })), !filterredItems.length && _react2.default.createElement(Item, {\n        label: intl.formatMessage(_messages2.default.nothingFound),\n        disabled: true\n      }));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Options, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.containerRef) {\n        this.containerRef.addEventListener('scroll', this.handleScroll);\n      }\n\n      if (!this.positionPredetermined) {\n        this.determineDropdownPosition();\n        window.addEventListener('resize', this.determineDropdownPosition);\n      }\n\n      if (this.activeItemRef) {\n        // $FlowFixMe ref type for findDOMNode\n        var item = (0, _reactDom.findDOMNode)(this.activeItemRef);\n\n        if (item.offsetTop > 100) {\n          // $FlowFixMe ref type for findDOMNode\n          (0, _reactDom.findDOMNode)(this.containerRef).scrollTop = item.offsetTop - item.clientHeight - 42;\n        }\n      }\n\n      if (this.props.buttonRef && this.containerRef) {\n        var layoutEl = this.layoutRef.current;\n\n        if (!layoutEl || !this.props.buttonRef.current) {\n          return;\n        }\n\n        var layoutElHeight = this.containerRef.offsetHeight + this.props.buttonRef.current.offsetHeight - 5;\n        layoutEl.style.height = layoutElHeight + 'px';\n        layoutEl.style.width = this.containerRef.offsetWidth + 'px';\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.containerRef) {\n        this.containerRef.removeEventListener('scroll', this.handleScroll);\n      }\n\n      if (!this.positionPredetermined) {\n        window.removeEventListener('resize', this.determineDropdownPosition);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          items = _props.items,\n          align = _props.align,\n          value = _props.value,\n          buttonRef = _props.buttonRef;\n      var filterredItems = items.filter(function (a) {\n        return _this2.filterItem(a, _this2.state.search.toString().toLowerCase().trim());\n      }).map(function (item) {\n        return _extends({}, item, {\n          active: item.active || item.value === value\n        });\n      });\n      return _react2.default.createElement(_react.Fragment, null, buttonRef ? _react2.default.createElement('div', {\n        ref: this.layoutRef,\n        className: cx('xsui-dropdown__layout', 'xsui-dropdown__layout-' + align, 'xsui-dropdown__layout-' + this.state.position, 'xsui-dropdown__container--align-' + align)\n      }, this.renderOptions(filterredItems)) : _react2.default.createElement(_react.Fragment, null, this.renderOptions(filterredItems)));\n    }\n  }]);\n\n  return Options;\n}(_react.PureComponent);\n\nOptions.propTypes = {\n  intl: function intl() {\n    return (typeof IntlShape === 'function' ? _propTypes2.default.instanceOf(IntlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);\n  },\n  items: _propTypes2.default.arrayOf(function (props, propName, componentName) {\n    if (!Object.prototype.hasOwnProperty.call(props, propName)) {\n      throw new Error('Prop `' + propName + '` has type \\'any\\' or \\'mixed\\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');\n    }\n  }).isRequired,\n  size: _propTypes2.default.oneOf(['sm', 'md', 'lg']),\n  align: _propTypes2.default.oneOf(['left', 'left-half', 'left-half-back', 'right', 'right-half', 'right-half-back']),\n  appearance: _propTypes2.default.oneOf(['primary', 'secondary', 'tertiary']),\n  position: _propTypes2.default.oneOf(['top', 'bottom']),\n  searchable: _propTypes2.default.bool,\n  separated: _propTypes2.default.bool,\n  fullWidth: _propTypes2.default.bool,\n  value: _propTypes2.default.any,\n  onChange: _propTypes2.default.func,\n  onScroll: _propTypes2.default.func,\n  fetching: _propTypes2.default.bool,\n  style: _propTypes2.default.object,\n  buttonRef: _propTypes2.default.shape({\n    current: function current() {\n      return (typeof HTMLDivElement === 'function' ? _propTypes2.default.instanceOf(HTMLDivElement) : _propTypes2.default.any).apply(this, arguments);\n    }\n  })\n};\nOptions.defaultProps = {\n  position: null,\n  size: 'md',\n  align: 'left',\n  appearance: 'primary',\n  searchable: false,\n  separated: false,\n  fullWidth: false,\n  value: null,\n  onChange: function onChange() {\n    return void 0;\n  },\n  onScroll: function onScroll() {\n    return void 0;\n  },\n  fetching: false\n};\nexports.default = (0, _reactIntl.injectIntl)(Options);","map":null,"metadata":{},"sourceType":"script"}