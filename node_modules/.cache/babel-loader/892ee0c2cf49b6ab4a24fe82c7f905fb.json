{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _reactPortal = require('react-portal');\n\nvar _contentBlock = require('../content-block');\n\nvar _contentBlock2 = _interopRequireDefault(_contentBlock);\n\nvar _loader = require('../loader');\n\nvar _loader2 = _interopRequireDefault(_loader);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar Overlay = function Overlay() {\n  return React.createElement('div', {\n    className: cx('xsui-modal__overlay')\n  });\n};\n\nvar Modal = function (_React$PureComponent) {\n  _inherits(Modal, _React$PureComponent);\n\n  function Modal() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Modal);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      waiting: true\n    }, _this.initialModal = function () {\n      if (document.body) {\n        var scrollbarWidth = window.innerWidth - document.body.clientWidth;\n        document.body.style.paddingRight = scrollbarWidth + 'px';\n        document.body.style.overflowY = 'hidden';\n        document.body.addEventListener('keydown', _this.closeOnEscPress);\n        _this.timer = window.setTimeout(function () {\n          _this.setState({\n            waiting: false\n          });\n        });\n      }\n    }, _this.clearModal = function () {\n      if (document.body) {\n        document.body.style.paddingRight = '';\n        document.body.style.overflowY = '';\n        document.body.removeEventListener('keydown', _this.closeOnEscPress);\n        window.clearTimeout(_this.timer);\n      }\n    }, _this.handleClose = function () {\n      var onClose = _this.props.onClose;\n      _this.modal && _this.modal.classList.add(cx('xsui-modal--hidden'));\n      onClose();\n    }, _this.closeOnEscPress = function (e) {\n      if (e.keyCode === 27) {\n        _this.handleClose();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Modal, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.isOpen) {\n        this.initialModal();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.isOpen !== prevProps.isOpen) {\n        if (this.props.isOpen) {\n          this.initialModal();\n        } else {\n          this.clearModal();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.clearModal();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          size = _props.size,\n          fetching = _props.fetching,\n          hideCloseBtn = _props.hideCloseBtn,\n          isOpen = _props.isOpen,\n          modalClassName = _props.modalClassName;\n\n      if (!isOpen || this.state.waiting) {\n        return null;\n      }\n\n      return React.createElement(_reactPortal.Portal, null, React.createElement('div', {\n        ref: function ref(modal) {\n          return _this2.modal = modal;\n        },\n        className: cx('xsui-modal', 'xsui-modal--size-' + size, fetching && 'xsui-modal--fetching', modalClassName)\n      }, React.createElement(Overlay, null), fetching && React.createElement(_loader2.default, {\n        size: 'xlg',\n        fullscreen: true,\n        color: 'white'\n      }), React.createElement('div', {\n        className: cx('xsui-modal__entry')\n      }, !hideCloseBtn && React.createElement('div', {\n        className: cx('xsui-modal__close'),\n        onClick: this.handleClose,\n        'data-id': 'close_modal'\n      }), React.createElement(_contentBlock2.default, {\n        appearance: 'modal'\n      }, children))));\n    }\n  }]);\n\n  return Modal;\n}(React.PureComponent);\n\nModal.propTypes = {\n  children: _propTypes2.default.node.isRequired,\n  size: _propTypes2.default.oneOf(['sm', 'md', 'lg', 'xlg']),\n  fetching: _propTypes2.default.bool,\n  onClose: _propTypes2.default.func,\n  hideCloseBtn: _propTypes2.default.bool,\n  isOpen: _propTypes2.default.bool,\n  modalClassName: _propTypes2.default.string\n};\nModal.defaultProps = {\n  size: 'md',\n  fetching: false,\n  onClose: function onClose() {\n    return void 0;\n  },\n  hideCloseBtn: false,\n  isOpen: false,\n  modalClassName: ''\n};\nexports.default = Modal;","map":null,"metadata":{},"sourceType":"script"}