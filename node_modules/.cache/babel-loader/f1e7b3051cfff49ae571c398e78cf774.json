{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.STICKY_CLASS = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _tooltip = require('../../tooltip');\n\nvar _tooltip2 = _interopRequireDefault(_tooltip);\n\nvar _constants = require('../constants');\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _types = require('../types');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar STICKY_CLASS = exports.STICKY_CLASS = 'xsui-table-head-cell--sticky-col';\n\nvar HeadCell = function (_PureComponent) {\n  _inherits(HeadCell, _PureComponent);\n\n  function HeadCell() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, HeadCell);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HeadCell.__proto__ || Object.getPrototypeOf(HeadCell)).call.apply(_ref, [this].concat(args))), _this), _this.textRef = (0, _react.createRef)(), _this.cellRef = (0, _react.createRef)(), _this.state = {\n      isCellHigh: false,\n      cellOffsetLeft: null\n    }, _this.headTextCheck = function () {\n      var iteration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (!_this.textRef.current || iteration > 1) {\n        return;\n      }\n\n      var clientHeight = _this.textRef.current.clientHeight;\n      var isCellHigh = clientHeight > _constants.MAX_CELL_HEIGHT; // Если после обновления ноды, текст слишком большой, тогда вернем соокращение\n\n      _this.setState({\n        isCellHigh: isCellHigh\n      }, function () {\n        return !isCellHigh && _this.headTextCheck(iteration + 1);\n      });\n    }, _this.handleResize = function () {\n      _this.headTextCheck();\n    }, _this.setCellOffset = function () {\n      var cell = _this.cellRef.current;\n\n      if (!cell) {\n        return;\n      }\n\n      if (cell && _this.props.column.sticky) {\n        _this.setState({\n          cellOffsetLeft: cell.offsetLeft\n        });\n      }\n    }, _this.isShowTooltip = function () {\n      return !!_this.props.column.description || _this.state.isCellHigh;\n    }, _this.renderCellContent = function () {\n      if (_this.isShowTooltip()) {\n        return _this.renderTooltip();\n      }\n\n      return _this.renderName();\n    }, _this.renderName = function () {\n      var isShowTooltip = _this.isShowTooltip();\n\n      return _react2.default.createElement('p', {\n        ref: _this.textRef,\n        className: cx('xsui-table-head-cell__text', isShowTooltip && 'xsui-table-head-cell__text--hover', _this.state.isCellHigh && 'xsui-table-head-cell__text--shorted')\n      }, _this.props.column.name);\n    }, _this.renderTooltip = function () {\n      var _this$props$column = _this.props.column,\n          name = _this$props$column.name,\n          description = _this$props$column.description;\n      var isCellHigh = _this.state.isCellHigh;\n      return _react2.default.createElement(_tooltip2.default, {\n        className: cx('xsui-table-head-cell__tooltip', isCellHigh && 'xsui-table-head-cell__tooltip--fluid'),\n        label: _react2.default.createElement('div', null, !!description && _react2.default.createElement('p', null, description), isCellHigh && _react2.default.createElement('p', null, name))\n      }, _this.renderName());\n    }, _this.renderCell = function () {\n      var _this$props = _this.props,\n          column = _this$props.column,\n          compact = _this$props.compact,\n          stickyRow = _this$props.stickyRow;\n      var isStickyCell = column.sticky || stickyRow;\n      return _react2.default.createElement('div', {\n        className: cx('xsui-table-head-cell__wrapper', isStickyCell && 'xsui-table-head-cell__wrapper--fit', compact && 'xsui-table-head-cell__wrapper--compact', _this.state.isCellHigh && 'xsui-table-head-cell__wrapper--shorted')\n      }, _react2.default.createElement(_react.Fragment, null, _react2.default.createElement('div', {\n        className: cx('xsui-table-head-cell__border-bottom')\n      }), !column.sticky && _react2.default.createElement('div', {\n        className: cx('xsui-table-head-cell__border', compact && 'xsui-table-head-cell__border--compact')\n      }), _this.renderCellContent(), column.sticky && _react2.default.createElement('div', {\n        className: cx('xsui-table-head-cell__border', 'xsui-table-head-cell__border--sticky-column')\n      })));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(HeadCell, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.headTextCheck();\n      window.addEventListener('resize', this.handleResize);\n      this.setCellOffset();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.column.name !== prevProps.column.name) {\n        this.headTextCheck();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          column = _props.column,\n          compact = _props.compact,\n          stickyRow = _props.stickyRow;\n      var cellOffsetLeft = this.state.cellOffsetLeft;\n      var renderHeadCell = column.renderHeadCell,\n          width = column.width,\n          minWidth = column.minWidth,\n          maxWidth = column.maxWidth,\n          _column$show = column.show,\n          show = _column$show === undefined ? true : _column$show,\n          sticky = column.sticky;\n\n      if (!show) {\n        return null;\n      }\n\n      var classes = cx('xsui-table-head-cell', stickyRow && 'xsui-table-head-cell--sticky-row', sticky && STICKY_CLASS);\n      var styles = {\n        width: width,\n        minWidth: minWidth || width,\n        maxWidth: maxWidth || width,\n        left: sticky && cellOffsetLeft\n      };\n\n      if (renderHeadCell) {\n        return renderHeadCell({\n          column: column,\n          compact: compact,\n          sticky: sticky,\n          className: classes,\n          style: styles\n        });\n      }\n\n      return _react2.default.createElement('th', {\n        ref: this.cellRef,\n        style: styles,\n        className: classes\n      }, this.renderCell());\n    }\n  }]);\n\n  return HeadCell;\n}(_react.PureComponent);\n\nHeadCell.propTypes = {\n  column: function column() {\n    return (typeof _types.bpfrpt_proptype_Column === 'function' ? _types.bpfrpt_proptype_Column.isRequired ? _types.bpfrpt_proptype_Column.isRequired : _types.bpfrpt_proptype_Column : _propTypes2.default.shape(_types.bpfrpt_proptype_Column).isRequired).apply(this, arguments);\n  },\n  compact: _propTypes2.default.bool.isRequired,\n  stickyRow: _propTypes2.default.bool.isRequired\n};\nexports.default = HeadCell;","map":null,"metadata":{},"sourceType":"script"}