{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = require('react-intl');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _reactOnclickoutside = require('react-onclickoutside');\n\nvar _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);\n\nvar _reactTransitionGroup = require('react-transition-group');\n\nvar _index = require('../input/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _entries = require('./entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _messages = require('./messages');\n\nvar _messages2 = _interopRequireDefault(_messages);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _inputTag = require('../input-tag');\n\nvar _inputTag2 = _interopRequireDefault(_inputTag);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar TreeSelect = function (_Component) {\n  _inherits(TreeSelect, _Component);\n\n  function TreeSelect() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TreeSelect);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TreeSelect.__proto__ || Object.getPrototypeOf(TreeSelect)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      visible: false,\n      position: 'bottom'\n    }, _this.dropdownRef = null, _this.setDropdownRef = function (ref) {\n      _this.dropdownRef = ref;\n    }, _this.toggleVisible = function () {\n      return _this.setState({\n        visible: !_this.state.visible\n      });\n    }, _this.handleClickOutside = function () {\n      if (_this.state.visible) {\n        _this.setState({\n          visible: false\n        });\n      }\n    }, _this.handleChange = function (option) {\n      var ignoreFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _this$props = _this.props,\n          input = _this$props.input,\n          allowMultiSelect = _this$props.allowMultiSelect,\n          allowSelectNestedFolder = _this$props.allowSelectNestedFolder;\n      var findIndex = input.value.findIndex(function (a) {\n        return a.id === option.id;\n      });\n\n      if (!allowSelectNestedFolder && option.options && option.options.length) {\n        return;\n      }\n\n      if (!allowMultiSelect) {\n        _this.toggleVisible();\n      }\n\n      if (findIndex > -1) {\n        !ignoreFound && input.value.splice(findIndex, 1);\n      } else {\n        allowMultiSelect ? input.value.push(option) : input.value = [option];\n      }\n\n      input.onChange(input.value);\n      return _this.forceUpdate();\n    }, _this.handleSelectAll = function () {\n      var recursiveEach = function recursiveEach(options) {\n        return options.forEach(function (option) {\n          option.options && recursiveEach(option.options);\n          !option.disabled && _this.handleChange(option, true);\n        });\n      };\n\n      recursiveEach(_this.props.options);\n    }, _this.handleUnselectAll = function () {\n      _this.props.input.onChange([]);\n\n      return _this.forceUpdate();\n    }, _this.checkedSelectedItems = function (options) {\n      return options.map(function (option) {\n        return _extends({}, option, {\n          options: option.options && _this.checkedSelectedItems(option.options),\n          checked: !!_this.props.input.value.find(function (a) {\n            return a.id === option.id;\n          })\n        });\n      });\n    }, _this.determineDropdownPosition = function () {\n      _this.setState({\n        position: !(0, _utils.visibleInPage)(_this.dropdownRef) ? 'top' : 'bottom'\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * Handle change item\n   * @param option\n   * @param ignoreFound\n   */\n\n  /**\n   * Unselect all items\n   */\n\n  /**\n   * Checked selected items\n   * @param options\n   * @returns Array\n   */\n\n\n  _createClass(TreeSelect, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(_, prevState) {\n      if (prevState.visible !== this.state.visible) {\n        this.determineDropdownPosition();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          intl = _props.intl,\n          input = _props.input,\n          meta = _props.meta,\n          options = _props.options,\n          name = _props.name,\n          size = _props.size,\n          allowMultiSelect = _props.allowMultiSelect,\n          allowSelectNestedFolder = _props.allowSelectNestedFolder,\n          placeholder = _props.placeholder,\n          disabled = _props.disabled,\n          kind = _props.kind;\n\n      if (!input.value) {\n        input.value = [];\n      }\n\n      var entries = this.checkedSelectedItems(options);\n      var commonProps = {\n        meta: meta,\n        size: size,\n        offset: 'right',\n        focused: this.state.visible,\n        disabled: disabled,\n        icon: 'dropdown-select',\n        readOnly: true,\n        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),\n        onClick: this.toggleVisible\n      };\n      return _react2.default.createElement('div', {\n        className: cx('xsui-tree-select')\n      }, kind === 'count' && _react2.default.createElement(_index2.default, _extends({\n        input: {\n          name: '',\n          value: intl.formatMessage(_messages2.default.selectedItems, {\n            count: input.value.length\n          }),\n          onChange: function onChange() {}\n        }\n      }, commonProps)), kind === 'plain' && _react2.default.createElement(_index2.default, _extends({\n        input: {\n          name: input.name || name,\n          value: input.value.map(function (a) {\n            return a.label;\n          }).join(', '),\n          onChange: function onChange() {\n            return void 0;\n          }\n        }\n      }, commonProps)), kind === 'tags' && _react2.default.createElement(_inputTag2.default, _extends({\n        name: input.name || name,\n        hideInput: true,\n        fields: {\n          getAll: function getAll() {\n            return input.value.map(function (tag) {\n              return tag.label;\n            });\n          },\n          push: function push(newTag) {\n            return input.onChange([].concat(_toConsumableArray(input.value), [newTag]));\n          },\n          remove: function remove(tagIndex) {\n            var nextTags = [].concat(_toConsumableArray(input.value));\n            nextTags.splice(tagIndex, 1);\n            input.onChange(nextTags);\n          }\n        }\n      }, commonProps)), _react2.default.createElement(_reactTransitionGroup.TransitionGroup, null, this.state.visible && _react2.default.createElement(_reactTransitionGroup.CSSTransition, {\n        classNames: 'slide-transition',\n        timeout: 100\n      }, _react2.default.createElement('div', {\n        ref: this.setDropdownRef,\n        className: cx('xsui-tree-select__container', 'xsui-tree-select__container--position-' + this.state.position)\n      }, _react2.default.createElement(_entries2.default, {\n        value: input.value,\n        options: entries,\n        allowMultiSelect: allowMultiSelect,\n        allowSelectNestedFolder: allowSelectNestedFolder,\n        handleChange: this.handleChange,\n        handleSelectAll: this.handleSelectAll,\n        handleUnselectAll: this.handleUnselectAll\n      })))));\n    }\n  }]);\n\n  return TreeSelect;\n}(_react.Component);\n\nTreeSelect.propTypes = {\n  intl: _reactIntl.intlShape,\n  input: _propTypes2.default.object.isRequired,\n  meta: _propTypes2.default.shape({\n    touched: _propTypes2.default.bool,\n    error: _propTypes2.default.any\n  }),\n  name: _propTypes2.default.string,\n  options: _propTypes2.default.array.isRequired,\n  size: _propTypes2.default.oneOf(['xs', 'sm', 'md']),\n  allowMultiSelect: _propTypes2.default.bool,\n  allowSelectNestedFolder: _propTypes2.default.bool,\n  placeholder: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  kind: _propTypes2.default.oneOf(['count', 'plain', 'tags'])\n};\nTreeSelect.defaultProps = {\n  meta: {\n    touched: false,\n    error: null\n  },\n  allowMultiSelect: false,\n  allowSelectNestedFolder: false,\n  disabled: false,\n  kind: 'plain'\n};\nexports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(TreeSelect));","map":null,"metadata":{},"sourceType":"script"}