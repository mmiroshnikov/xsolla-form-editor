{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _entries = require('../tree-select/entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar CheckboxGroup = function (_Component) {\n  _inherits(CheckboxGroup, _Component);\n\n  function CheckboxGroup() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call.apply(_ref, [this].concat(args))), _this), _this.handleChange = function (option) {\n      var ignoreFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _this$props = _this.props,\n          fields = _this$props.fields,\n          allowSelectNestedFolder = _this$props.allowSelectNestedFolder;\n      var values = fields.getAll() || [];\n      var findIndex = values.findIndex(function (a) {\n        return a === option.id;\n      });\n\n      if (!allowSelectNestedFolder && option.options && option.options.length) {\n        return;\n      }\n\n      findIndex > -1 ? !ignoreFound && fields.remove(findIndex) : fields.push(option.id);\n    }, _this.handleSelectAll = function () {\n      var recursiveEach = function recursiveEach(options) {\n        return options.forEach(function (option) {\n          option.options && recursiveEach(option.options);\n          !option.disabled && _this.props.fields.push(option.id);\n        });\n      };\n\n      recursiveEach(_this.props.options);\n    }, _this.checkedSelectedItems = function (options, items) {\n      return options.map(function (option) {\n        return _extends({}, option, {\n          options: option.options && _this.checkedSelectedItems(option.options, items),\n          checked: !!items.find(function (a) {\n            return a === option.id;\n          })\n        });\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          fields = _props.fields,\n          options = _props.options,\n          showStripes = _props.showStripes,\n          customStatusLabel = _props.customStatusLabel,\n          allowSelectNestedFolder = _props.allowSelectNestedFolder,\n          placeholder = _props.placeholder,\n          _props$disabled = _props.disabled,\n          disabled = _props$disabled === undefined ? false : _props$disabled,\n          entryMaxHeight = _props.entryMaxHeight;\n      var selectedItems = fields.getAll() || [];\n      var entries = this.checkedSelectedItems(options, selectedItems);\n      return _react2.default.createElement('div', {\n        className: cx('xsui-checkbox-group')\n      }, _react2.default.createElement(_entries2.default, {\n        apperance: 'secondary',\n        showStripes: showStripes,\n        value: selectedItems,\n        options: entries,\n        disabled: disabled,\n        placeholder: placeholder,\n        appearance: 'secondary',\n        allowMultiSelect: true,\n        allowSelectNestedFolder: allowSelectNestedFolder,\n        customStatusLabel: customStatusLabel,\n        entryMaxHeight: entryMaxHeight,\n        handleChange: this.handleChange,\n        handleSelectAll: this.handleSelectAll.bind(this),\n        handleUnselectAll: fields.removeAll.bind(this)\n      }));\n    }\n  }]);\n\n  return CheckboxGroup;\n}(_react.Component);\n\nCheckboxGroup.propTypes = {\n  fields: _propTypes2.default.object.isRequired,\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    id: _propTypes2.default.number.isRequired,\n    label: _propTypes2.default.string.isRequired,\n    extraLabel: _propTypes2.default.string,\n    disabled: _propTypes2.default.bool,\n    options: _propTypes2.default.arrayOf(function () {\n      return (typeof Option === 'function' ? _propTypes2.default.instanceOf(Option).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);\n    }),\n    checked: _propTypes2.default.bool\n  }).isRequired).isRequired,\n  showStripes: _propTypes2.default.bool,\n  customStatusLabel: _propTypes2.default.shape({\n    id: _propTypes2.default.string.isRequired,\n    defaultValue: _propTypes2.default.string\n  }),\n  allowSelectNestedFolder: _propTypes2.default.bool,\n  placeholder: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  entryMaxHeight: _propTypes2.default.number\n};\nexports.default = CheckboxGroup;","map":null,"metadata":{},"sourceType":"script"}