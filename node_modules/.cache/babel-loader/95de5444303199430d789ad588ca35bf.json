{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash.merge');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _reactIntl = require('react-intl');\n\nvar _reactResizeDetector = require('react-resize-detector');\n\nvar _reactResizeDetector2 = _interopRequireDefault(_reactResizeDetector);\n\nvar _highcharts = require('highcharts');\n\nvar _highcharts2 = _interopRequireDefault(_highcharts);\n\nvar _highmaps = require('highcharts/highmaps');\n\nvar _highmaps2 = _interopRequireDefault(_highmaps);\n\nvar _worldGeo = require('@highcharts/map-collection/custom/world.geo.json');\n\nvar _worldGeo2 = _interopRequireDefault(_worldGeo);\n\nvar _highchartsReactOfficial = require('highcharts-react-official');\n\nvar _highchartsReactOfficial2 = _interopRequireDefault(_highchartsReactOfficial);\n\nvar _formatters = require('./formatters');\n\nvar _shapes = require('./shapes');\n\nvar _states = require('./states');\n\nvar _messages = require('./messages');\n\nvar _messages2 = _interopRequireDefault(_messages);\n\nrequire('./style.css');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar setupLibrary = function setupLibrary(lib) {\n  if (lib.Renderer) {\n    lib.Renderer.prototype.symbols.square = _shapes.roundedSquare;\n  }\n};\n\nvar setLang = function setLang(intl, lib) {\n  if (lib.setOptions) {\n    lib.setOptions({\n      lang: {\n        numericSymbols: [intl.formatMessage(_messages2.default.kilo), intl.formatMessage(_messages2.default.mega), intl.formatMessage(_messages2.default.giga), intl.formatMessage(_messages2.default.tera), intl.formatMessage(_messages2.default.peta), intl.formatMessage(_messages2.default.exa)]\n      }\n    });\n  }\n};\n\nsetupLibrary(_highcharts2.default);\nsetupLibrary(_highmaps2.default);\nvar MAP_ASPECT_RATIO = 50 / 85;\nvar defaultOptions = {\n  chart: {\n    styledMode: true,\n    marginTop: 75,\n    spacing: [0, 0, 0, 0],\n    colorCount: 6\n  },\n  title: {\n    text: ''\n  },\n  credits: {\n    enabled: false\n  },\n  exporting: {\n    enabled: false\n  },\n  legend: {\n    layout: 'horizontal',\n    align: 'left',\n    verticalAlign: 'top',\n    float: true\n  },\n  tooltip: {\n    borderRadius: 4,\n    padding: 16,\n    shape: 'square',\n    useHTML: true,\n    shared: true,\n    formatter: function formatter(tooltip) {\n      var result = void 0;\n\n      if (this.points) {\n        if (this.points.every(function (point) {\n          return point.series.type === 'column';\n        })) {\n          // stacked barchart\n          result = _formatters.barFormatter.call(this, tooltip);\n        } else {\n          // barchart with single data serie\n          result = _formatters.graphicFormatter.call(this);\n        }\n      } else if (this.series && this.series.mapData) {\n        // world map\n        result = _formatters.mapFormatter.call(this, tooltip);\n      } else if (this.series.userOptions.type === 'pie') {\n        // pie chart\n        result = _formatters.pieFormatter.call(this);\n      } else {\n        result = tooltip.defaultFormatter.call(this, tooltip);\n      }\n\n      return result;\n    }\n  }\n};\n\nvar getHighmapsOptions = function getHighmapsOptions(options, size) {\n  var mergedOptions = (0, _lodash2.default)({}, defaultOptions, options);\n  mergedOptions.series.forEach(function (serie, index) {\n    mergedOptions.series[index] = (0, _lodash2.default)({\n      name: '',\n      joinBy: ['iso-a2', 'key'],\n      mapData: _worldGeo2.default\n    }, serie);\n  });\n  mergedOptions.legend.verticalAlign = 'bottom';\n  mergedOptions.colorAxis = (0, _lodash2.default)(mergedOptions.colorAxis, {\n    tickAmount: 2,\n    minColor: '#95c4fa',\n    maxColor: '#2483f4'\n  }, options.colorAxis); // need to align legend with map\n\n  mergedOptions.chart = (0, _lodash2.default)(mergedOptions.chart, _extends({}, size, {\n    height: MAP_ASPECT_RATIO * size.width,\n    marginTop: 0\n  }), options.chart);\n  return mergedOptions;\n};\n\nvar getHighchartsOptions = function getHighchartsOptions(options, size) {\n  var mergedOptions = (0, _lodash2.default)({}, defaultOptions, options);\n\n  if (mergedOptions.xAxis) {\n    mergedOptions.xAxis.crosshair = true;\n  }\n\n  if (!mergedOptions.yAxis) {\n    mergedOptions.yAxis = [{}];\n  }\n\n  if (!Array.isArray(mergedOptions.yAxis)) {\n    mergedOptions.yAxis = [mergedOptions.yAxis];\n  }\n\n  mergedOptions.chart = (0, _lodash2.default)(mergedOptions.chart, size, options.chart); // enabling stacking and labels for stacked columns\n\n  if (mergedOptions.chart && mergedOptions.chart.type === 'column') {\n    mergedOptions.plotOptions = (0, _lodash2.default)({\n      column: {\n        stacking: 'normal'\n      }\n    }, mergedOptions.plotOptions);\n    (0, _lodash2.default)(mergedOptions.yAxis[0], {\n      stackLabels: {\n        enabled: true\n      }\n    });\n    (0, _lodash2.default)(mergedOptions.xAxis, {\n      labels: {\n        format: '<b>{value}</b>'\n      }\n    });\n  }\n\n  if (mergedOptions.legend && mergedOptions.legend.enabled === false) {\n    mergedOptions.chart.marginTop = 25;\n  }\n\n  mergedOptions.yAxis.forEach(function (axis) {\n    var isLeftAxis = !axis.opposite;\n    axis.showFirstLabel = false;\n    axis.showLastLabel = false; // set axis line on plot area\n\n    axis.offset = -20; // set axis values under plot bands\n\n    axis.labels = _extends({}, axis.labels, {\n      y: -6,\n      align: isLeftAxis ? 'left' : 'right'\n    }); // set axis title under maximum band\n\n    axis.title = _extends({}, axis.title, {\n      align: 'high',\n      offset: 0,\n      rotation: 0,\n      x: (isLeftAxis ? -1 : 1) * 20,\n      textAlign: isLeftAxis ? 'left' : 'right',\n      reserveSpace: false,\n      y: -6\n    });\n  });\n\n  if (!mergedOptions.series) {\n    mergedOptions.series = [];\n  }\n\n  mergedOptions.series.forEach(function (serie) {\n    if (serie.type === 'pie') {\n      serie.innerSize = 116;\n      serie.size = 196;\n      serie.states = {\n        hover: {\n          enabled: false\n        }\n      };\n    } else if (serie.type === 'column' || mergedOptions.chart && mergedOptions.chart.type === 'column') {\n      serie.maxPointWidth = 72;\n    }\n  });\n  return mergedOptions;\n};\n\nvar styleOptions = function styleOptions(options, size, constructorType) {\n  return constructorType === 'mapChart' ? getHighmapsOptions(options, size) : getHighchartsOptions(options, size);\n};\n\nvar Charts = function Charts(_ref) {\n  var options = _ref.options,\n      constructorType = _ref.constructorType,\n      state = _ref.state,\n      onRefresh = _ref.onRefresh,\n      _ref$refreshMode = _ref.refreshMode,\n      refreshMode = _ref$refreshMode === undefined ? 'debounce' : _ref$refreshMode,\n      intl = _ref.intl,\n      props = _objectWithoutProperties(_ref, ['options', 'constructorType', 'state', 'onRefresh', 'refreshMode', 'intl']);\n\n  var highchartsConstructorType = constructorType || 'chart';\n  var isMapchart = constructorType === 'mapChart';\n  var highchartInstance = isMapchart ? _highmaps2.default : _highcharts2.default;\n\n  switch (state) {\n    case 'loading':\n      return _react2.default.createElement(_states.Loading, {\n        className: props.className\n      });\n\n    case 'fail':\n      return _react2.default.createElement(_states.Fail, {\n        className: props.className,\n        onClick: onRefresh\n      });\n\n    case 'empty':\n      return _react2.default.createElement(_states.Empty, {\n        className: props.className\n      });\n  }\n\n  setLang(intl, highchartInstance);\n  return _react2.default.createElement(_reactResizeDetector2.default, {\n    handleWidth: true,\n    handleHeight: true,\n    refreshMode: refreshMode,\n    refreshRate: 250\n  }, function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return _react2.default.createElement(_highchartsReactOfficial2.default, _extends({\n      key: isMapchart ? Math.random() : void 0,\n      highcharts: highchartInstance,\n      options: styleOptions(options || {}, {\n        width: width,\n        height: height\n      }, highchartsConstructorType),\n      constructorType: highchartsConstructorType\n    }, props));\n  });\n};\n\nCharts.propTypes = {\n  options: _propTypes2.default.any,\n  constructorType: _propTypes2.default.oneOf(['chart', 'mapChart', 'stockChart', 'ganttChart']),\n  state: _propTypes2.default.oneOf(['normal', 'loading', 'fail', 'empty']),\n  onRefresh: _propTypes2.default.func,\n  className: _propTypes2.default.string,\n  containerProps: _propTypes2.default.object,\n  refreshMode: _propTypes2.default.oneOf(['debounce', 'throttle']),\n  intl: function intl() {\n    return (typeof intlShape === 'function' ? _propTypes2.default.instanceOf(intlShape).isRequired : _propTypes2.default.any.isRequired).apply(this, arguments);\n  }\n};\nexports.default = (0, _reactIntl.injectIntl)(Charts);","map":null,"metadata":{},"sourceType":"script"}