{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _bind = require('classnames/bind');\n\nvar _bind2 = _interopRequireDefault(_bind);\n\nvar _reactIntl = require('react-intl');\n\nvar _reactOnclickoutside = require('react-onclickoutside');\n\nvar _reactOnclickoutside2 = _interopRequireDefault(_reactOnclickoutside);\n\nvar _reactTransitionGroup = require('react-transition-group');\n\nvar _index = require('../input/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _groups = require('./groups');\n\nvar _groups2 = _interopRequireDefault(_groups);\n\nvar _entries = require('./entries');\n\nvar _entries2 = _interopRequireDefault(_entries);\n\nvar _style = require('./style.css');\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _messages = require('../select/messages');\n\nvar _messages2 = _interopRequireDefault(_messages);\n\nvar _messages3 = require('./messages');\n\nvar _messages4 = _interopRequireDefault(_messages3);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar cx = _bind2.default.bind(_style2.default);\n\nvar positionValues = {\n  top: 'top',\n  bottom: 'bottom'\n};\n\nvar GroupSelect = function (_Component) {\n  _inherits(GroupSelect, _Component);\n\n  function GroupSelect() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, GroupSelect);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GroupSelect.__proto__ || Object.getPrototypeOf(GroupSelect)).call.apply(_ref, [this].concat(args))), _this), _this.allGroupValue = 'allElementsGroup', _this.compareElementsByLabel = function (a, b) {\n      var getVal = function getVal(x) {\n        return x && x.label ? x.label.toLowerCase() : '';\n      };\n\n      var va = getVal(a);\n      var vb = getVal(b);\n      return va > vb ? 1 : va < vb ? -1 : 0;\n    }, _this.getAllGroup = function () {\n      var options = _this.props.options;\n      var optionsAvailable = !!(options && options.length);\n\n      if (!optionsAvailable) {\n        return null;\n      } //Use Map to avoid duplication of objects with the same value\n\n\n      var allChildrenMap = new Map();\n      options.forEach(function (group) {\n        var children = group.children;\n\n        if (children && children.length > 0) {\n          children.forEach(function (child) {\n            allChildrenMap.set(child.value, child);\n          });\n        }\n      });\n      var allChildren = [].concat(_toConsumableArray(allChildrenMap.values()));\n\n      if (allChildren.length > 0) {\n        allChildren.sort(_this.compareElementsByLabel);\n        var allGroup = {\n          label: _this.getAllGroupLabel(),\n          value: _this.allGroupValue,\n          children: allChildren\n        };\n        return allGroup;\n      }\n\n      return null;\n    }, _this.getAllGroupLabel = function () {\n      return _this.props.allGroupLabel || _this.props.intl.formatMessage(_messages4.default.allGroupLabel);\n    }, _this.state = {\n      position: positionValues.bottom,\n      visible: false,\n      group: _this.props.initialGroup\n    }, _this.determineDropdownPosition = function () {\n      if (_this.inputRef && _this.containerRef) {\n        var inputRect = _this.inputRef.getBoundingClientRect();\n\n        var containerRect = _this.containerRef.getBoundingClientRect();\n\n        var height = containerRect.bottom - containerRect.top + 1;\n        var marginToInput = 5;\n        var marginToWindow = 32;\n        var margin = marginToInput + marginToWindow;\n        var heightUnder = document.documentElement.clientHeight - inputRect.bottom - margin;\n        var heightAbove = inputRect.top - margin;\n\n        _this.setState({\n          position: height <= heightUnder || height > heightAbove && heightUnder >= heightAbove ? positionValues.bottom : positionValues.top\n        });\n      }\n    }, _this.handleResize = function () {\n      _this.setState({\n        position: positionValues.bottom\n      });\n\n      _this.determineDropdownPosition();\n    }, _this.setContainerRef = function (ref) {\n      return _this.containerRef = ref;\n    }, _this.setInputRef = function (ref) {\n      return _this.inputRef = ref;\n    }, _this.setVisibility = function () {\n      var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (visible === _this.state.visible) {\n        return;\n      }\n\n      if (visible && _this.props.input.onFocus) {\n        _this.props.input.onFocus();\n      }\n\n      if (!visible && _this.props.input.onBlur) {\n        // Pass current value on blur to avoid issues\n        // in custom parse/format/normalize handlers\n        // See: https://github.com/erikras/redux-form/issues/2768\n        _this.props.input.onBlur(_this.props.input.value);\n      }\n\n      _this.setState({\n        visible: visible,\n        position: visible ? _this.state.position : positionValues.bottom\n      });\n    }, _this.toggleVisible = function () {\n      _this.setVisibility(!_this.state.visible);\n    }, _this.handleClickOutside = function () {\n      _this.setVisibility(false);\n    }, _this.handleGroupChange = function (value) {\n      _this.setState({\n        group: value\n      });\n    }, _this.handleChildrenChange = function (option) {\n      _this.handleMultiChange([option]);\n    }, _this.handleMultiChange = function (options) {\n      var _this$props = _this.props,\n          input = _this$props.input,\n          groupKey = _this$props.groupKey,\n          childrenKey = _this$props.childrenKey,\n          propOptions = _this$props.options;\n      var allOptions = [];\n      propOptions.forEach(function (group) {\n        group.children.forEach(function (child) {\n          var _allOptions$push;\n\n          allOptions.push((_allOptions$push = {}, _defineProperty(_allOptions$push, groupKey, group.value), _defineProperty(_allOptions$push, 'label', child.label), _defineProperty(_allOptions$push, 'value', child.value), _allOptions$push));\n        });\n      });\n      var changedOptions = [].concat(_toConsumableArray(options.filter(function (x) {\n        return x.group !== _this.allGroupValue;\n      })));\n      var optionsFromAllGroup = options.filter(function (x) {\n        return x.group === _this.allGroupValue;\n      });\n      optionsFromAllGroup.forEach(function (option) {\n        changedOptions = changedOptions.concat(allOptions.filter(function (y) {\n          return option.value === y.value;\n        }).map(function (z) {\n          return _extends({}, z, {\n            checked: option.checked\n          });\n        }));\n      });\n      var value = input.value || []; // The set with removed items\n      // Items are compared using two keys, so the map is nested two levels deep\n\n      var removedSet = changedOptions.reduce(function (acc, item) {\n        return item.checked ? _extends({}, acc, _defineProperty({}, item.group, _extends({}, acc[item.group], _defineProperty({}, item.value, true)))) : acc;\n      }, {});\n\n      var notRemoved = function notRemoved(item) {\n        return !(removedSet[item[groupKey]] && removedSet[item[groupKey]][item[childrenKey]]);\n      };\n\n      var added = changedOptions.filter(function (item) {\n        return item.checked === false;\n      }).map(function (item) {\n        var _ref2;\n\n        return _ref2 = {}, _defineProperty(_ref2, groupKey, item.group), _defineProperty(_ref2, childrenKey, item.value), _ref2;\n      });\n      var updatedValue = value.filter(notRemoved) // Removed unchecked items\n      .concat(added); // Add newly checked items\n\n      input.onChange(updatedValue);\n    }, _this.humanizeOutputValue = function (options, input) {\n      var _this$props2 = _this.props,\n          maxLength = _this$props2.maxLength,\n          groupKey = _this$props2.groupKey,\n          childrenKey = _this$props2.childrenKey;\n      var value = input.value || [];\n      var humanizedValue = options.reduce(function (previousOption, currentOption) {\n        var selectValues = currentOption.children.filter(function (children) {\n          return value.find(function (a) {\n            return a[groupKey] === currentOption.value && a[childrenKey] === children.value;\n          });\n        }).map(function (a) {\n          return {\n            label: a.label,\n            type: 'children'\n          };\n        });\n\n        if (selectValues.length && selectValues.length === currentOption.children.length) {\n          return [].concat(_toConsumableArray(previousOption), [{\n            label: currentOption.label,\n            type: 'group'\n          }]);\n        }\n\n        return [].concat(_toConsumableArray(previousOption), _toConsumableArray(selectValues));\n      }, []).sort(function (a, b) {\n        return a.type === b.type ? 0 : a.type < b.type ? 1 : -1;\n      }).map(function (a) {\n        return a.label;\n      });\n\n      if (humanizedValue.length > maxLength) {\n        return [].concat(_toConsumableArray(humanizedValue.splice(0, maxLength)), ['+' + humanizedValue.length]);\n      }\n\n      return humanizedValue;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(GroupSelect, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.determineDropdownPosition();\n      window.addEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (!prevState.visible && this.state.visible) {\n        this.determineDropdownPosition();\n      }\n    }\n    /**\n     * Humanize output\n     * @param options\n     * @param input\n     * @returns {*}\n     */\n\n  }, {\n    key: 'getActiveGroup',\n    value: function getActiveGroup() {\n      if (this.state.group !== null) {\n        return this.state.group;\n      }\n\n      var _props = this.props,\n          options = _props.options,\n          showAllGroup = _props.showAllGroup;\n\n      if (showAllGroup) {\n        return this.allGroupValue;\n      } else if (options && options[0] && options[0].value) {\n        return options[0].value;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'countSelectedGroupItems',\n    value: function countSelectedGroupItems(selectedValues, groupKey) {\n      return selectedValues.reduce(function (acc, value) {\n        return _extends({}, acc, _defineProperty({}, value[groupKey], (acc[value[groupKey]] || 0) + 1));\n      }, {});\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          options = _props2.options,\n          showAllGroup = _props2.showAllGroup,\n          allGroupLabelForInput = _props2.allGroupLabelForInput,\n          intl = _props2.intl,\n          input = _props2.input,\n          meta = _props2.meta,\n          label = _props2.label,\n          groupKey = _props2.groupKey,\n          childrenKey = _props2.childrenKey,\n          name = _props2.name,\n          size = _props2.size,\n          placeholder = _props2.placeholder,\n          containerClassName = _props2.containerClassName,\n          disabled = _props2.disabled;\n      var value = input.value || [];\n      var activeGroup = this.getActiveGroup();\n      var groups = options.map(function (option) {\n        return _extends({}, option, {\n          active: option.value === activeGroup\n        });\n      });\n      var allGroupSelectedCount = void 0;\n      var isAllElementsInAllGroupSelected = false;\n\n      if (showAllGroup && groups.length > 0) {\n        var allGroup = this.getAllGroup();\n        allGroup.active = allGroup.value === activeGroup;\n\n        if (allGroup) {\n          groups.splice(0, 0, allGroup);\n        }\n\n        if (allGroup.children) {\n          allGroupSelectedCount = allGroup.children.reduce(function (count, x) {\n            return value.some(function (v) {\n              return v[childrenKey] === x.value;\n            }) ? ++count : count;\n          }, 0);\n          isAllElementsInAllGroupSelected = allGroupSelectedCount === allGroup.children.length;\n        }\n      }\n\n      var groupObject = groups.find(function (a) {\n        return a.value === activeGroup;\n      });\n\n      var isChecked = function isChecked(selectedItem) {\n        if (activeGroup === _this2.allGroupValue) {\n          return value.some(function (a) {\n            return a[childrenKey] === selectedItem.value;\n          });\n        } else {\n          return value.some(function (a) {\n            return a[groupKey] === activeGroup && a[childrenKey] === selectedItem.value;\n          });\n        }\n      };\n\n      var entries = groupObject && (groupObject.children || []).map(function (option) {\n        return _extends({}, option, {\n          checked: isChecked(option),\n          group: activeGroup\n        });\n      });\n      var selectedCountMap = this.countSelectedGroupItems(value, groupKey);\n\n      if (allGroupSelectedCount != null) {\n        selectedCountMap[this.allGroupValue] = allGroupSelectedCount;\n      }\n\n      var optionsAvailable = !!(options && options.length);\n      var inputElementValue = isAllElementsInAllGroupSelected ? allGroupLabelForInput || this.getAllGroupLabel() : this.humanizeOutputValue(options, input).join(', ');\n      return _react2.default.createElement('div', {\n        className: cx('xsui-group-select')\n      }, _react2.default.createElement(_index2.default, {\n        input: {\n          name: input.name || name,\n          value: inputElementValue,\n          onChange: function onChange() {\n            return void 0;\n          }\n        },\n        containerRef: this.setInputRef,\n        meta: meta,\n        size: size,\n        offset: 'right',\n        placeholder: placeholder || intl.formatMessage(_messages2.default.placeholder),\n        focused: this.state.visible,\n        disabled: disabled || !optionsAvailable,\n        icon: 'dropdown-select',\n        readOnly: true,\n        onClick: this.toggleVisible\n      }), _react2.default.createElement(_reactTransitionGroup.TransitionGroup, null, optionsAvailable && this.state.visible ? _react2.default.createElement(_reactTransitionGroup.CSSTransition, {\n        classNames: 'slide-transition',\n        timeout: 150\n      }, _react2.default.createElement('div', {\n        className: cx('xsui-group-select__transition-container', 'xsui-group-select__transition-container--position-' + this.state.position, containerClassName)\n      }, _react2.default.createElement('div', {\n        ref: this.setContainerRef,\n        className: cx('xsui-group-select__container', 'xsui-group-select__container--position-' + this.state.position, containerClassName)\n      }, _react2.default.createElement(_groups2.default, {\n        options: groups,\n        handleChange: this.handleGroupChange,\n        selectedCountMap: selectedCountMap\n      }), _react2.default.createElement(_entries2.default, {\n        activeGroup: activeGroup,\n        options: entries,\n        label: label,\n        handleChange: this.handleChildrenChange,\n        handleMultiChange: this.handleMultiChange\n      })))) : null));\n    }\n  }]);\n\n  return GroupSelect;\n}(_react.Component);\n\nGroupSelect.propTypes = {\n  input: _propTypes2.default.object.isRequired,\n  meta: _propTypes2.default.shape({\n    touched: _propTypes2.default.bool,\n    error: _propTypes2.default.any\n  }),\n  intl: _propTypes2.default.object,\n  name: _propTypes2.default.string,\n  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    label: _propTypes2.default.string.isRequired,\n    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,\n    children: _propTypes2.default.array.isRequired\n  })).isRequired,\n  showAllGroup: _propTypes2.default.bool,\n  allGroupLabel: _propTypes2.default.node,\n  allGroupLabelForInput: _propTypes2.default.node,\n  label: _propTypes2.default.string,\n  size: _propTypes2.default.oneOf(['xs', 'sm', 'md']),\n  maxLength: _propTypes2.default.number,\n  groupKey: _propTypes2.default.string,\n  childrenKey: _propTypes2.default.string,\n  placeholder: _propTypes2.default.string,\n  containerClassName: _propTypes2.default.string,\n  initialGroup: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  disabled: _propTypes2.default.bool\n};\nGroupSelect.defaultProps = {\n  meta: {\n    touched: false,\n    error: null\n  },\n  maxLength: 4,\n  showAllGroup: false,\n  groupKey: 'group',\n  childrenKey: 'children',\n  containerClassName: '',\n  initialGroup: null,\n  disabled: false\n};\nexports.default = (0, _reactIntl.injectIntl)((0, _reactOnclickoutside2.default)(GroupSelect));","map":null,"metadata":{},"sourceType":"script"}